package openconfig_bgp

import (
	"fmt"
	"github.com/CiscoDevNet/ydk-go/ydk"
	"github.com/CiscoDevNet/ydk-go/ydk/models/ydktest"
	"github.com/CiscoDevNet/ydk-go/ydk/types"
	"reflect"
)

func init() {
	fmt.Println("Registering top level entities for package bgp...")
	ydk.RegisterEntity("{http://openconfig.net/yang/bgp bgp}", reflect.TypeOf(Bgp{}))
	ydk.RegisterEntity("openconfig-bgp:bgp", reflect.TypeOf(Bgp{}))
}

//////////////////////////////////////////////////////////////////////////
// Bgp
//////////////////////////////////////////////////////////////////////////
type Bgp struct {
	parent types.Entity
	Filter types.YFilter

	Global     Bgp_Global
	Neighbors  Bgp_Neighbors
	PeerGroups Bgp_PeerGroups
}

func (bgp *Bgp) HasDataOrFilter() bool {
	return bgp.Global.HasDataOrFilter() ||
		bgp.Neighbors.HasDataOrFilter() ||
		bgp.PeerGroups.HasDataOrFilter()
}

func (bgp *Bgp) GetFilter() types.YFilter {
	return bgp.Filter
}

func (bgp *Bgp) GetSegmentPath() string {
	return "openconfig-bgp:bgp"
}

func (bgp *Bgp) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: bgp.GetSegmentPath()}
	return entityPath
}

func (bgp *Bgp) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "global" {
		return &bgp.Global
	}
	if child_yang_name == "neighbors" {
		return &bgp.Neighbors
	}
	if child_yang_name == "peer-groups" {
		return &bgp.PeerGroups
	}
	return nil
}

func (bgp *Bgp) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["global"] = &bgp.Global
	children["neighbors"] = &bgp.Neighbors
	children["peer-groups"] = &bgp.PeerGroups

	return children
}

func (bgp *Bgp) SetValue(value_path string, value string) {
}

func (bgp *Bgp) GetBundleName() string {
	return "ydktest"
}

func (bgp *Bgp) GetYangName() string {
	return "bgp"
}

func (bgp *Bgp) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (bgp *Bgp) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (bgp *Bgp) SetParent(parent types.Entity) {
	bgp.parent = parent
}

func (bgp *Bgp) GetParent() types.Entity {
	return bgp.parent
}

func (bgp *Bgp) GetParentYangName() string {
	return "openconfig-bgp"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global
//////////////////////////////////////////////////////////////////////////
type Bgp_Global struct {
	parent types.Entity
	Filter types.YFilter

	AfiSafis              Bgp_Global_AfiSafis
	ApplyPolicy           Bgp_Global_ApplyPolicy
	Confederation         Bgp_Global_Confederation
	Config                Bgp_Global_Config
	DefaultRouteDistance  Bgp_Global_DefaultRouteDistance
	GracefulRestart       Bgp_Global_GracefulRestart
	RouteSelectionOptions Bgp_Global_RouteSelectionOptions
	State                 Bgp_Global_State
	UseMultiplePaths      Bgp_Global_UseMultiplePaths
}

func (global *Bgp_Global) HasDataOrFilter() bool {
	return global.AfiSafis.HasDataOrFilter() ||
		global.ApplyPolicy.HasDataOrFilter() ||
		global.Confederation.HasDataOrFilter() ||
		global.Config.HasDataOrFilter() ||
		global.DefaultRouteDistance.HasDataOrFilter() ||
		global.GracefulRestart.HasDataOrFilter() ||
		global.RouteSelectionOptions.HasDataOrFilter() ||
		global.State.HasDataOrFilter() ||
		global.UseMultiplePaths.HasDataOrFilter()
}

func (global *Bgp_Global) GetFilter() types.YFilter {
	return global.Filter
}

func (global *Bgp_Global) GetSegmentPath() string {
	return "global"
}

func (global *Bgp_Global) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: global.GetSegmentPath()}
	return entityPath
}

func (global *Bgp_Global) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "afi-safis" {
		return &global.AfiSafis
	}
	if child_yang_name == "apply-policy" {
		return &global.ApplyPolicy
	}
	if child_yang_name == "confederation" {
		return &global.Confederation
	}
	if child_yang_name == "config" {
		return &global.Config
	}
	if child_yang_name == "default-route-distance" {
		return &global.DefaultRouteDistance
	}
	if child_yang_name == "graceful-restart" {
		return &global.GracefulRestart
	}
	if child_yang_name == "route-selection-options" {
		return &global.RouteSelectionOptions
	}
	if child_yang_name == "state" {
		return &global.State
	}
	if child_yang_name == "use-multiple-paths" {
		return &global.UseMultiplePaths
	}
	return nil
}

func (global *Bgp_Global) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["afi-safis"] = &global.AfiSafis
	children["apply-policy"] = &global.ApplyPolicy
	children["confederation"] = &global.Confederation
	children["config"] = &global.Config
	children["default-route-distance"] = &global.DefaultRouteDistance
	children["graceful-restart"] = &global.GracefulRestart
	children["route-selection-options"] = &global.RouteSelectionOptions
	children["state"] = &global.State
	children["use-multiple-paths"] = &global.UseMultiplePaths

	return children
}

func (global *Bgp_Global) SetValue(value_path string, value string) {
}

func (global *Bgp_Global) GetBundleName() string {
	return "ydktest"
}

func (global *Bgp_Global) GetYangName() string {
	return "global"
}

func (global *Bgp_Global) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (global *Bgp_Global) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (global *Bgp_Global) SetParent(parent types.Entity) {
	global.parent = parent
}

func (global *Bgp_Global) GetParent() types.Entity {
	return global.parent
}

func (global *Bgp_Global) GetParentYangName() string {
	return "bgp"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_Config struct {
	parent types.Entity
	Filter types.YFilter

	As       interface{} // uint32
	RouterId interface{} // str
}

func (config *Bgp_Global_Config) HasDataOrFilter() bool {
	return config.As != nil ||
		config.RouterId != nil
}

func (config *Bgp_Global_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Global_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Global_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.As != nil {
		switch config.As.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.As.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.As)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "as", Data: leafData})
		}
	}

	if config.RouterId != nil {
		switch config.RouterId.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RouterId.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RouterId)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "router-id", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Global_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Global_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Global_Config) SetValue(value_path string, value string) {
	if value_path == "as" {
		config.As = value
	}
	if value_path == "router-id" {
		config.RouterId = value
	}
}

func (config *Bgp_Global_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Global_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Global_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Global_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Global_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Global_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Global_Config) GetParentYangName() string {
	return "global"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_State struct {
	parent types.Entity
	Filter types.YFilter

	As            interface{} // uint32
	RouterId      interface{} // str
	TotalPaths    interface{} // uint32
	TotalPrefixes interface{} // uint32
}

func (state *Bgp_Global_State) HasDataOrFilter() bool {
	return state.As != nil ||
		state.RouterId != nil ||
		state.TotalPaths != nil ||
		state.TotalPrefixes != nil
}

func (state *Bgp_Global_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Global_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Global_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.As != nil {
		switch state.As.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.As.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.As)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "as", Data: leafData})
		}
	}

	if state.RouterId != nil {
		switch state.RouterId.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RouterId.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RouterId)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "router-id", Data: leafData})
		}
	}

	if state.TotalPaths != nil {
		switch state.TotalPaths.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.TotalPaths.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.TotalPaths)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "total-paths", Data: leafData})
		}
	}

	if state.TotalPrefixes != nil {
		switch state.TotalPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.TotalPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.TotalPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "total-prefixes", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Global_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Global_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Global_State) SetValue(value_path string, value string) {
	if value_path == "as" {
		state.As = value
	}
	if value_path == "router-id" {
		state.RouterId = value
	}
	if value_path == "total-paths" {
		state.TotalPaths = value
	}
	if value_path == "total-prefixes" {
		state.TotalPrefixes = value
	}
}

func (state *Bgp_Global_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Global_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Global_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Global_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Global_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Global_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Global_State) GetParentYangName() string {
	return "global"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_DefaultRouteDistance
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_DefaultRouteDistance struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Global_DefaultRouteDistance_Config
	State  Bgp_Global_DefaultRouteDistance_State
}

func (defaultRouteDistance *Bgp_Global_DefaultRouteDistance) HasDataOrFilter() bool {
	return defaultRouteDistance.Config.HasDataOrFilter() ||
		defaultRouteDistance.State.HasDataOrFilter()
}

func (defaultRouteDistance *Bgp_Global_DefaultRouteDistance) GetFilter() types.YFilter {
	return defaultRouteDistance.Filter
}

func (defaultRouteDistance *Bgp_Global_DefaultRouteDistance) GetSegmentPath() string {
	return "default-route-distance"
}

func (defaultRouteDistance *Bgp_Global_DefaultRouteDistance) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: defaultRouteDistance.GetSegmentPath()}
	return entityPath
}

func (defaultRouteDistance *Bgp_Global_DefaultRouteDistance) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &defaultRouteDistance.Config
	}
	if child_yang_name == "state" {
		return &defaultRouteDistance.State
	}
	return nil
}

func (defaultRouteDistance *Bgp_Global_DefaultRouteDistance) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &defaultRouteDistance.Config
	children["state"] = &defaultRouteDistance.State

	return children
}

func (defaultRouteDistance *Bgp_Global_DefaultRouteDistance) SetValue(value_path string, value string) {
}

func (defaultRouteDistance *Bgp_Global_DefaultRouteDistance) GetBundleName() string {
	return "ydktest"
}

func (defaultRouteDistance *Bgp_Global_DefaultRouteDistance) GetYangName() string {
	return "defaultRouteDistance"
}

func (defaultRouteDistance *Bgp_Global_DefaultRouteDistance) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (defaultRouteDistance *Bgp_Global_DefaultRouteDistance) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (defaultRouteDistance *Bgp_Global_DefaultRouteDistance) SetParent(parent types.Entity) {
	defaultRouteDistance.parent = parent
}

func (defaultRouteDistance *Bgp_Global_DefaultRouteDistance) GetParent() types.Entity {
	return defaultRouteDistance.parent
}

func (defaultRouteDistance *Bgp_Global_DefaultRouteDistance) GetParentYangName() string {
	return "global"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_DefaultRouteDistance_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_DefaultRouteDistance_Config struct {
	parent types.Entity
	Filter types.YFilter

	ExternalRouteDistance interface{} // uint8
	InternalRouteDistance interface{} // uint8
}

func (config *Bgp_Global_DefaultRouteDistance_Config) HasDataOrFilter() bool {
	return config.ExternalRouteDistance != nil ||
		config.InternalRouteDistance != nil
}

func (config *Bgp_Global_DefaultRouteDistance_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Global_DefaultRouteDistance_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Global_DefaultRouteDistance_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.ExternalRouteDistance != nil {
		switch config.ExternalRouteDistance.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ExternalRouteDistance.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ExternalRouteDistance)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "external-route-distance", Data: leafData})
		}
	}

	if config.InternalRouteDistance != nil {
		switch config.InternalRouteDistance.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.InternalRouteDistance.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.InternalRouteDistance)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "internal-route-distance", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Global_DefaultRouteDistance_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Global_DefaultRouteDistance_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Global_DefaultRouteDistance_Config) SetValue(value_path string, value string) {
	if value_path == "external-route-distance" {
		config.ExternalRouteDistance = value
	}
	if value_path == "internal-route-distance" {
		config.InternalRouteDistance = value
	}
}

func (config *Bgp_Global_DefaultRouteDistance_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Global_DefaultRouteDistance_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Global_DefaultRouteDistance_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Global_DefaultRouteDistance_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Global_DefaultRouteDistance_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Global_DefaultRouteDistance_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Global_DefaultRouteDistance_Config) GetParentYangName() string {
	return "default-route-distance"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_DefaultRouteDistance_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_DefaultRouteDistance_State struct {
	parent types.Entity
	Filter types.YFilter

	ExternalRouteDistance interface{} // uint8
	InternalRouteDistance interface{} // uint8
}

func (state *Bgp_Global_DefaultRouteDistance_State) HasDataOrFilter() bool {
	return state.ExternalRouteDistance != nil ||
		state.InternalRouteDistance != nil
}

func (state *Bgp_Global_DefaultRouteDistance_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Global_DefaultRouteDistance_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Global_DefaultRouteDistance_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.ExternalRouteDistance != nil {
		switch state.ExternalRouteDistance.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ExternalRouteDistance.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ExternalRouteDistance)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "external-route-distance", Data: leafData})
		}
	}

	if state.InternalRouteDistance != nil {
		switch state.InternalRouteDistance.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.InternalRouteDistance.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.InternalRouteDistance)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "internal-route-distance", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Global_DefaultRouteDistance_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Global_DefaultRouteDistance_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Global_DefaultRouteDistance_State) SetValue(value_path string, value string) {
	if value_path == "external-route-distance" {
		state.ExternalRouteDistance = value
	}
	if value_path == "internal-route-distance" {
		state.InternalRouteDistance = value
	}
}

func (state *Bgp_Global_DefaultRouteDistance_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Global_DefaultRouteDistance_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Global_DefaultRouteDistance_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Global_DefaultRouteDistance_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Global_DefaultRouteDistance_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Global_DefaultRouteDistance_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Global_DefaultRouteDistance_State) GetParentYangName() string {
	return "default-route-distance"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_Confederation
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_Confederation struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Global_Confederation_Config
	State  Bgp_Global_Confederation_State
}

func (confederation *Bgp_Global_Confederation) HasDataOrFilter() bool {
	return confederation.Config.HasDataOrFilter() ||
		confederation.State.HasDataOrFilter()
}

func (confederation *Bgp_Global_Confederation) GetFilter() types.YFilter {
	return confederation.Filter
}

func (confederation *Bgp_Global_Confederation) GetSegmentPath() string {
	return "confederation"
}

func (confederation *Bgp_Global_Confederation) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: confederation.GetSegmentPath()}
	return entityPath
}

func (confederation *Bgp_Global_Confederation) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &confederation.Config
	}
	if child_yang_name == "state" {
		return &confederation.State
	}
	return nil
}

func (confederation *Bgp_Global_Confederation) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &confederation.Config
	children["state"] = &confederation.State

	return children
}

func (confederation *Bgp_Global_Confederation) SetValue(value_path string, value string) {
}

func (confederation *Bgp_Global_Confederation) GetBundleName() string {
	return "ydktest"
}

func (confederation *Bgp_Global_Confederation) GetYangName() string {
	return "confederation"
}

func (confederation *Bgp_Global_Confederation) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (confederation *Bgp_Global_Confederation) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (confederation *Bgp_Global_Confederation) SetParent(parent types.Entity) {
	confederation.parent = parent
}

func (confederation *Bgp_Global_Confederation) GetParent() types.Entity {
	return confederation.parent
}

func (confederation *Bgp_Global_Confederation) GetParentYangName() string {
	return "global"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_Confederation_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_Confederation_Config struct {
	parent types.Entity
	Filter types.YFilter

	Enabled    interface{} // boolean
	Identifier interface{} // uint32
	MemberAs   []interface{}
}

func (config *Bgp_Global_Confederation_Config) HasDataOrFilter() bool {
	for _, leaf := range config.MemberAs {
		if leaf != nil {
			return true
		}
	}
	return config.Enabled != nil ||
		config.Identifier != nil
}

func (config *Bgp_Global_Confederation_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Global_Confederation_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Global_Confederation_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.Enabled != nil {
		switch config.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	if config.Identifier != nil {
		switch config.Identifier.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.Identifier.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.Identifier)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "identifier", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Global_Confederation_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Global_Confederation_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Global_Confederation_Config) SetValue(value_path string, value string) {
	if value_path == "enabled" {
		config.Enabled = value
	}
	if value_path == "identifier" {
		config.Identifier = value
	}
	if value_path == "member-as" {
		config.MemberAs = append(config.MemberAs, value)
	}
}

func (config *Bgp_Global_Confederation_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Global_Confederation_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Global_Confederation_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Global_Confederation_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Global_Confederation_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Global_Confederation_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Global_Confederation_Config) GetParentYangName() string {
	return "confederation"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_Confederation_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_Confederation_State struct {
	parent types.Entity
	Filter types.YFilter

	Enabled    interface{} // boolean
	Identifier interface{} // uint32
	MemberAs   []interface{}
}

func (state *Bgp_Global_Confederation_State) HasDataOrFilter() bool {
	for _, leaf := range state.MemberAs {
		if leaf != nil {
			return true
		}
	}
	return state.Enabled != nil ||
		state.Identifier != nil
}

func (state *Bgp_Global_Confederation_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Global_Confederation_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Global_Confederation_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.Enabled != nil {
		switch state.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	if state.Identifier != nil {
		switch state.Identifier.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.Identifier.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.Identifier)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "identifier", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Global_Confederation_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Global_Confederation_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Global_Confederation_State) SetValue(value_path string, value string) {
	if value_path == "enabled" {
		state.Enabled = value
	}
	if value_path == "identifier" {
		state.Identifier = value
	}
	if value_path == "member-as" {
		state.MemberAs = append(state.MemberAs, value)
	}
}

func (state *Bgp_Global_Confederation_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Global_Confederation_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Global_Confederation_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Global_Confederation_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Global_Confederation_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Global_Confederation_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Global_Confederation_State) GetParentYangName() string {
	return "confederation"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_GracefulRestart
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_GracefulRestart struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Global_GracefulRestart_Config
	State  Bgp_Global_GracefulRestart_State
}

func (gracefulRestart *Bgp_Global_GracefulRestart) HasDataOrFilter() bool {
	return gracefulRestart.Config.HasDataOrFilter() ||
		gracefulRestart.State.HasDataOrFilter()
}

func (gracefulRestart *Bgp_Global_GracefulRestart) GetFilter() types.YFilter {
	return gracefulRestart.Filter
}

func (gracefulRestart *Bgp_Global_GracefulRestart) GetSegmentPath() string {
	return "graceful-restart"
}

func (gracefulRestart *Bgp_Global_GracefulRestart) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: gracefulRestart.GetSegmentPath()}
	return entityPath
}

func (gracefulRestart *Bgp_Global_GracefulRestart) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &gracefulRestart.Config
	}
	if child_yang_name == "state" {
		return &gracefulRestart.State
	}
	return nil
}

func (gracefulRestart *Bgp_Global_GracefulRestart) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &gracefulRestart.Config
	children["state"] = &gracefulRestart.State

	return children
}

func (gracefulRestart *Bgp_Global_GracefulRestart) SetValue(value_path string, value string) {
}

func (gracefulRestart *Bgp_Global_GracefulRestart) GetBundleName() string {
	return "ydktest"
}

func (gracefulRestart *Bgp_Global_GracefulRestart) GetYangName() string {
	return "gracefulRestart"
}

func (gracefulRestart *Bgp_Global_GracefulRestart) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (gracefulRestart *Bgp_Global_GracefulRestart) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (gracefulRestart *Bgp_Global_GracefulRestart) SetParent(parent types.Entity) {
	gracefulRestart.parent = parent
}

func (gracefulRestart *Bgp_Global_GracefulRestart) GetParent() types.Entity {
	return gracefulRestart.parent
}

func (gracefulRestart *Bgp_Global_GracefulRestart) GetParentYangName() string {
	return "global"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_GracefulRestart_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_GracefulRestart_Config struct {
	parent types.Entity
	Filter types.YFilter

	Enabled         interface{} // boolean
	HelperOnly      interface{} // boolean
	RestartTime     interface{} // uint16
	StaleRoutesTime interface{} // str
}

func (config *Bgp_Global_GracefulRestart_Config) HasDataOrFilter() bool {
	return config.Enabled != nil ||
		config.HelperOnly != nil ||
		config.RestartTime != nil ||
		config.StaleRoutesTime != nil
}

func (config *Bgp_Global_GracefulRestart_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Global_GracefulRestart_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Global_GracefulRestart_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.Enabled != nil {
		switch config.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	if config.HelperOnly != nil {
		switch config.HelperOnly.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.HelperOnly.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.HelperOnly)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "helper-only", Data: leafData})
		}
	}

	if config.RestartTime != nil {
		switch config.RestartTime.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTime.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTime)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-time", Data: leafData})
		}
	}

	if config.StaleRoutesTime != nil {
		switch config.StaleRoutesTime.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.StaleRoutesTime.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.StaleRoutesTime)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "stale-routes-time", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Global_GracefulRestart_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Global_GracefulRestart_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Global_GracefulRestart_Config) SetValue(value_path string, value string) {
	if value_path == "enabled" {
		config.Enabled = value
	}
	if value_path == "helper-only" {
		config.HelperOnly = value
	}
	if value_path == "restart-time" {
		config.RestartTime = value
	}
	if value_path == "stale-routes-time" {
		config.StaleRoutesTime = value
	}
}

func (config *Bgp_Global_GracefulRestart_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Global_GracefulRestart_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Global_GracefulRestart_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Global_GracefulRestart_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Global_GracefulRestart_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Global_GracefulRestart_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Global_GracefulRestart_Config) GetParentYangName() string {
	return "graceful-restart"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_GracefulRestart_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_GracefulRestart_State struct {
	parent types.Entity
	Filter types.YFilter

	Enabled         interface{} // boolean
	HelperOnly      interface{} // boolean
	RestartTime     interface{} // uint16
	StaleRoutesTime interface{} // str
}

func (state *Bgp_Global_GracefulRestart_State) HasDataOrFilter() bool {
	return state.Enabled != nil ||
		state.HelperOnly != nil ||
		state.RestartTime != nil ||
		state.StaleRoutesTime != nil
}

func (state *Bgp_Global_GracefulRestart_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Global_GracefulRestart_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Global_GracefulRestart_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.Enabled != nil {
		switch state.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	if state.HelperOnly != nil {
		switch state.HelperOnly.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.HelperOnly.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.HelperOnly)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "helper-only", Data: leafData})
		}
	}

	if state.RestartTime != nil {
		switch state.RestartTime.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTime.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTime)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-time", Data: leafData})
		}
	}

	if state.StaleRoutesTime != nil {
		switch state.StaleRoutesTime.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.StaleRoutesTime.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.StaleRoutesTime)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "stale-routes-time", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Global_GracefulRestart_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Global_GracefulRestart_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Global_GracefulRestart_State) SetValue(value_path string, value string) {
	if value_path == "enabled" {
		state.Enabled = value
	}
	if value_path == "helper-only" {
		state.HelperOnly = value
	}
	if value_path == "restart-time" {
		state.RestartTime = value
	}
	if value_path == "stale-routes-time" {
		state.StaleRoutesTime = value
	}
}

func (state *Bgp_Global_GracefulRestart_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Global_GracefulRestart_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Global_GracefulRestart_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Global_GracefulRestart_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Global_GracefulRestart_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Global_GracefulRestart_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Global_GracefulRestart_State) GetParentYangName() string {
	return "graceful-restart"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_UseMultiplePaths
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_UseMultiplePaths struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Global_UseMultiplePaths_Config
	Ebgp   Bgp_Global_UseMultiplePaths_Ebgp
	Ibgp   Bgp_Global_UseMultiplePaths_Ibgp
	State  Bgp_Global_UseMultiplePaths_State
}

func (useMultiplePaths *Bgp_Global_UseMultiplePaths) HasDataOrFilter() bool {
	return useMultiplePaths.Config.HasDataOrFilter() ||
		useMultiplePaths.Ebgp.HasDataOrFilter() ||
		useMultiplePaths.Ibgp.HasDataOrFilter() ||
		useMultiplePaths.State.HasDataOrFilter()
}

func (useMultiplePaths *Bgp_Global_UseMultiplePaths) GetFilter() types.YFilter {
	return useMultiplePaths.Filter
}

func (useMultiplePaths *Bgp_Global_UseMultiplePaths) GetSegmentPath() string {
	return "use-multiple-paths"
}

func (useMultiplePaths *Bgp_Global_UseMultiplePaths) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: useMultiplePaths.GetSegmentPath()}
	return entityPath
}

func (useMultiplePaths *Bgp_Global_UseMultiplePaths) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &useMultiplePaths.Config
	}
	if child_yang_name == "ebgp" {
		return &useMultiplePaths.Ebgp
	}
	if child_yang_name == "ibgp" {
		return &useMultiplePaths.Ibgp
	}
	if child_yang_name == "state" {
		return &useMultiplePaths.State
	}
	return nil
}

func (useMultiplePaths *Bgp_Global_UseMultiplePaths) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &useMultiplePaths.Config
	children["ebgp"] = &useMultiplePaths.Ebgp
	children["ibgp"] = &useMultiplePaths.Ibgp
	children["state"] = &useMultiplePaths.State

	return children
}

func (useMultiplePaths *Bgp_Global_UseMultiplePaths) SetValue(value_path string, value string) {
}

func (useMultiplePaths *Bgp_Global_UseMultiplePaths) GetBundleName() string {
	return "ydktest"
}

func (useMultiplePaths *Bgp_Global_UseMultiplePaths) GetYangName() string {
	return "useMultiplePaths"
}

func (useMultiplePaths *Bgp_Global_UseMultiplePaths) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (useMultiplePaths *Bgp_Global_UseMultiplePaths) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (useMultiplePaths *Bgp_Global_UseMultiplePaths) SetParent(parent types.Entity) {
	useMultiplePaths.parent = parent
}

func (useMultiplePaths *Bgp_Global_UseMultiplePaths) GetParent() types.Entity {
	return useMultiplePaths.parent
}

func (useMultiplePaths *Bgp_Global_UseMultiplePaths) GetParentYangName() string {
	return "global"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_UseMultiplePaths_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_UseMultiplePaths_Config struct {
	parent types.Entity
	Filter types.YFilter

	Enabled interface{} // boolean
}

func (config *Bgp_Global_UseMultiplePaths_Config) HasDataOrFilter() bool {
	return config.Enabled != nil
}

func (config *Bgp_Global_UseMultiplePaths_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Global_UseMultiplePaths_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Global_UseMultiplePaths_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.Enabled != nil {
		switch config.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Global_UseMultiplePaths_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Global_UseMultiplePaths_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Global_UseMultiplePaths_Config) SetValue(value_path string, value string) {
	if value_path == "enabled" {
		config.Enabled = value
	}
}

func (config *Bgp_Global_UseMultiplePaths_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Global_UseMultiplePaths_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Global_UseMultiplePaths_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Global_UseMultiplePaths_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Global_UseMultiplePaths_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Global_UseMultiplePaths_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Global_UseMultiplePaths_Config) GetParentYangName() string {
	return "use-multiple-paths"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_UseMultiplePaths_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_UseMultiplePaths_State struct {
	parent types.Entity
	Filter types.YFilter

	Enabled interface{} // boolean
}

func (state *Bgp_Global_UseMultiplePaths_State) HasDataOrFilter() bool {
	return state.Enabled != nil
}

func (state *Bgp_Global_UseMultiplePaths_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Global_UseMultiplePaths_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Global_UseMultiplePaths_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.Enabled != nil {
		switch state.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Global_UseMultiplePaths_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Global_UseMultiplePaths_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Global_UseMultiplePaths_State) SetValue(value_path string, value string) {
	if value_path == "enabled" {
		state.Enabled = value
	}
}

func (state *Bgp_Global_UseMultiplePaths_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Global_UseMultiplePaths_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Global_UseMultiplePaths_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Global_UseMultiplePaths_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Global_UseMultiplePaths_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Global_UseMultiplePaths_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Global_UseMultiplePaths_State) GetParentYangName() string {
	return "use-multiple-paths"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_UseMultiplePaths_Ebgp
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_UseMultiplePaths_Ebgp struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Global_UseMultiplePaths_Ebgp_Config
	State  Bgp_Global_UseMultiplePaths_Ebgp_State
}

func (ebgp *Bgp_Global_UseMultiplePaths_Ebgp) HasDataOrFilter() bool {
	return ebgp.Config.HasDataOrFilter() ||
		ebgp.State.HasDataOrFilter()
}

func (ebgp *Bgp_Global_UseMultiplePaths_Ebgp) GetFilter() types.YFilter {
	return ebgp.Filter
}

func (ebgp *Bgp_Global_UseMultiplePaths_Ebgp) GetSegmentPath() string {
	return "ebgp"
}

func (ebgp *Bgp_Global_UseMultiplePaths_Ebgp) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: ebgp.GetSegmentPath()}
	return entityPath
}

func (ebgp *Bgp_Global_UseMultiplePaths_Ebgp) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &ebgp.Config
	}
	if child_yang_name == "state" {
		return &ebgp.State
	}
	return nil
}

func (ebgp *Bgp_Global_UseMultiplePaths_Ebgp) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &ebgp.Config
	children["state"] = &ebgp.State

	return children
}

func (ebgp *Bgp_Global_UseMultiplePaths_Ebgp) SetValue(value_path string, value string) {
}

func (ebgp *Bgp_Global_UseMultiplePaths_Ebgp) GetBundleName() string {
	return "ydktest"
}

func (ebgp *Bgp_Global_UseMultiplePaths_Ebgp) GetYangName() string {
	return "ebgp"
}

func (ebgp *Bgp_Global_UseMultiplePaths_Ebgp) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (ebgp *Bgp_Global_UseMultiplePaths_Ebgp) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (ebgp *Bgp_Global_UseMultiplePaths_Ebgp) SetParent(parent types.Entity) {
	ebgp.parent = parent
}

func (ebgp *Bgp_Global_UseMultiplePaths_Ebgp) GetParent() types.Entity {
	return ebgp.parent
}

func (ebgp *Bgp_Global_UseMultiplePaths_Ebgp) GetParentYangName() string {
	return "use-multiple-paths"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_UseMultiplePaths_Ebgp_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_UseMultiplePaths_Ebgp_Config struct {
	parent types.Entity
	Filter types.YFilter

	AllowMultipleAs interface{} // boolean
	MaximumPaths    interface{} // uint32
}

func (config *Bgp_Global_UseMultiplePaths_Ebgp_Config) HasDataOrFilter() bool {
	return config.AllowMultipleAs != nil ||
		config.MaximumPaths != nil
}

func (config *Bgp_Global_UseMultiplePaths_Ebgp_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Global_UseMultiplePaths_Ebgp_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Global_UseMultiplePaths_Ebgp_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.AllowMultipleAs != nil {
		switch config.AllowMultipleAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.AllowMultipleAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.AllowMultipleAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "allow-multiple-as", Data: leafData})
		}
	}

	if config.MaximumPaths != nil {
		switch config.MaximumPaths.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaximumPaths.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaximumPaths)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "maximum-paths", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Global_UseMultiplePaths_Ebgp_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Global_UseMultiplePaths_Ebgp_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Global_UseMultiplePaths_Ebgp_Config) SetValue(value_path string, value string) {
	if value_path == "allow-multiple-as" {
		config.AllowMultipleAs = value
	}
	if value_path == "maximum-paths" {
		config.MaximumPaths = value
	}
}

func (config *Bgp_Global_UseMultiplePaths_Ebgp_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Global_UseMultiplePaths_Ebgp_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Global_UseMultiplePaths_Ebgp_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Global_UseMultiplePaths_Ebgp_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Global_UseMultiplePaths_Ebgp_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Global_UseMultiplePaths_Ebgp_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Global_UseMultiplePaths_Ebgp_Config) GetParentYangName() string {
	return "ebgp"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_UseMultiplePaths_Ebgp_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_UseMultiplePaths_Ebgp_State struct {
	parent types.Entity
	Filter types.YFilter

	AllowMultipleAs interface{} // boolean
	MaximumPaths    interface{} // uint32
}

func (state *Bgp_Global_UseMultiplePaths_Ebgp_State) HasDataOrFilter() bool {
	return state.AllowMultipleAs != nil ||
		state.MaximumPaths != nil
}

func (state *Bgp_Global_UseMultiplePaths_Ebgp_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Global_UseMultiplePaths_Ebgp_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Global_UseMultiplePaths_Ebgp_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.AllowMultipleAs != nil {
		switch state.AllowMultipleAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.AllowMultipleAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.AllowMultipleAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "allow-multiple-as", Data: leafData})
		}
	}

	if state.MaximumPaths != nil {
		switch state.MaximumPaths.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaximumPaths.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaximumPaths)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "maximum-paths", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Global_UseMultiplePaths_Ebgp_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Global_UseMultiplePaths_Ebgp_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Global_UseMultiplePaths_Ebgp_State) SetValue(value_path string, value string) {
	if value_path == "allow-multiple-as" {
		state.AllowMultipleAs = value
	}
	if value_path == "maximum-paths" {
		state.MaximumPaths = value
	}
}

func (state *Bgp_Global_UseMultiplePaths_Ebgp_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Global_UseMultiplePaths_Ebgp_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Global_UseMultiplePaths_Ebgp_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Global_UseMultiplePaths_Ebgp_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Global_UseMultiplePaths_Ebgp_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Global_UseMultiplePaths_Ebgp_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Global_UseMultiplePaths_Ebgp_State) GetParentYangName() string {
	return "ebgp"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_UseMultiplePaths_Ibgp
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_UseMultiplePaths_Ibgp struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Global_UseMultiplePaths_Ibgp_Config
	State  Bgp_Global_UseMultiplePaths_Ibgp_State
}

func (ibgp *Bgp_Global_UseMultiplePaths_Ibgp) HasDataOrFilter() bool {
	return ibgp.Config.HasDataOrFilter() ||
		ibgp.State.HasDataOrFilter()
}

func (ibgp *Bgp_Global_UseMultiplePaths_Ibgp) GetFilter() types.YFilter {
	return ibgp.Filter
}

func (ibgp *Bgp_Global_UseMultiplePaths_Ibgp) GetSegmentPath() string {
	return "ibgp"
}

func (ibgp *Bgp_Global_UseMultiplePaths_Ibgp) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: ibgp.GetSegmentPath()}
	return entityPath
}

func (ibgp *Bgp_Global_UseMultiplePaths_Ibgp) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &ibgp.Config
	}
	if child_yang_name == "state" {
		return &ibgp.State
	}
	return nil
}

func (ibgp *Bgp_Global_UseMultiplePaths_Ibgp) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &ibgp.Config
	children["state"] = &ibgp.State

	return children
}

func (ibgp *Bgp_Global_UseMultiplePaths_Ibgp) SetValue(value_path string, value string) {
}

func (ibgp *Bgp_Global_UseMultiplePaths_Ibgp) GetBundleName() string {
	return "ydktest"
}

func (ibgp *Bgp_Global_UseMultiplePaths_Ibgp) GetYangName() string {
	return "ibgp"
}

func (ibgp *Bgp_Global_UseMultiplePaths_Ibgp) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (ibgp *Bgp_Global_UseMultiplePaths_Ibgp) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (ibgp *Bgp_Global_UseMultiplePaths_Ibgp) SetParent(parent types.Entity) {
	ibgp.parent = parent
}

func (ibgp *Bgp_Global_UseMultiplePaths_Ibgp) GetParent() types.Entity {
	return ibgp.parent
}

func (ibgp *Bgp_Global_UseMultiplePaths_Ibgp) GetParentYangName() string {
	return "use-multiple-paths"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_UseMultiplePaths_Ibgp_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_UseMultiplePaths_Ibgp_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaximumPaths interface{} // uint32
}

func (config *Bgp_Global_UseMultiplePaths_Ibgp_Config) HasDataOrFilter() bool {
	return config.MaximumPaths != nil
}

func (config *Bgp_Global_UseMultiplePaths_Ibgp_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Global_UseMultiplePaths_Ibgp_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Global_UseMultiplePaths_Ibgp_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaximumPaths != nil {
		switch config.MaximumPaths.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaximumPaths.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaximumPaths)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "maximum-paths", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Global_UseMultiplePaths_Ibgp_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Global_UseMultiplePaths_Ibgp_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Global_UseMultiplePaths_Ibgp_Config) SetValue(value_path string, value string) {
	if value_path == "maximum-paths" {
		config.MaximumPaths = value
	}
}

func (config *Bgp_Global_UseMultiplePaths_Ibgp_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Global_UseMultiplePaths_Ibgp_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Global_UseMultiplePaths_Ibgp_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Global_UseMultiplePaths_Ibgp_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Global_UseMultiplePaths_Ibgp_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Global_UseMultiplePaths_Ibgp_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Global_UseMultiplePaths_Ibgp_Config) GetParentYangName() string {
	return "ibgp"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_UseMultiplePaths_Ibgp_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_UseMultiplePaths_Ibgp_State struct {
	parent types.Entity
	Filter types.YFilter

	MaximumPaths interface{} // uint32
}

func (state *Bgp_Global_UseMultiplePaths_Ibgp_State) HasDataOrFilter() bool {
	return state.MaximumPaths != nil
}

func (state *Bgp_Global_UseMultiplePaths_Ibgp_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Global_UseMultiplePaths_Ibgp_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Global_UseMultiplePaths_Ibgp_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaximumPaths != nil {
		switch state.MaximumPaths.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaximumPaths.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaximumPaths)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "maximum-paths", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Global_UseMultiplePaths_Ibgp_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Global_UseMultiplePaths_Ibgp_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Global_UseMultiplePaths_Ibgp_State) SetValue(value_path string, value string) {
	if value_path == "maximum-paths" {
		state.MaximumPaths = value
	}
}

func (state *Bgp_Global_UseMultiplePaths_Ibgp_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Global_UseMultiplePaths_Ibgp_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Global_UseMultiplePaths_Ibgp_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Global_UseMultiplePaths_Ibgp_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Global_UseMultiplePaths_Ibgp_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Global_UseMultiplePaths_Ibgp_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Global_UseMultiplePaths_Ibgp_State) GetParentYangName() string {
	return "ibgp"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_RouteSelectionOptions
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_RouteSelectionOptions struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Global_RouteSelectionOptions_Config
	State  Bgp_Global_RouteSelectionOptions_State
}

func (routeSelectionOptions *Bgp_Global_RouteSelectionOptions) HasDataOrFilter() bool {
	return routeSelectionOptions.Config.HasDataOrFilter() ||
		routeSelectionOptions.State.HasDataOrFilter()
}

func (routeSelectionOptions *Bgp_Global_RouteSelectionOptions) GetFilter() types.YFilter {
	return routeSelectionOptions.Filter
}

func (routeSelectionOptions *Bgp_Global_RouteSelectionOptions) GetSegmentPath() string {
	return "route-selection-options"
}

func (routeSelectionOptions *Bgp_Global_RouteSelectionOptions) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: routeSelectionOptions.GetSegmentPath()}
	return entityPath
}

func (routeSelectionOptions *Bgp_Global_RouteSelectionOptions) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &routeSelectionOptions.Config
	}
	if child_yang_name == "state" {
		return &routeSelectionOptions.State
	}
	return nil
}

func (routeSelectionOptions *Bgp_Global_RouteSelectionOptions) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &routeSelectionOptions.Config
	children["state"] = &routeSelectionOptions.State

	return children
}

func (routeSelectionOptions *Bgp_Global_RouteSelectionOptions) SetValue(value_path string, value string) {
}

func (routeSelectionOptions *Bgp_Global_RouteSelectionOptions) GetBundleName() string {
	return "ydktest"
}

func (routeSelectionOptions *Bgp_Global_RouteSelectionOptions) GetYangName() string {
	return "routeSelectionOptions"
}

func (routeSelectionOptions *Bgp_Global_RouteSelectionOptions) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (routeSelectionOptions *Bgp_Global_RouteSelectionOptions) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (routeSelectionOptions *Bgp_Global_RouteSelectionOptions) SetParent(parent types.Entity) {
	routeSelectionOptions.parent = parent
}

func (routeSelectionOptions *Bgp_Global_RouteSelectionOptions) GetParent() types.Entity {
	return routeSelectionOptions.parent
}

func (routeSelectionOptions *Bgp_Global_RouteSelectionOptions) GetParentYangName() string {
	return "global"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_RouteSelectionOptions_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_RouteSelectionOptions_Config struct {
	parent types.Entity
	Filter types.YFilter

	AdvertiseInactiveRoutes interface{} // boolean
	AlwaysCompareMed        interface{} // boolean
	EnableAigp              interface{} // boolean
	ExternalCompareRouterId interface{} // boolean
	IgnoreAsPathLength      interface{} // boolean
	IgnoreNextHopIgpMetric  interface{} // boolean
}

func (config *Bgp_Global_RouteSelectionOptions_Config) HasDataOrFilter() bool {
	return config.AdvertiseInactiveRoutes != nil ||
		config.AlwaysCompareMed != nil ||
		config.EnableAigp != nil ||
		config.ExternalCompareRouterId != nil ||
		config.IgnoreAsPathLength != nil ||
		config.IgnoreNextHopIgpMetric != nil
}

func (config *Bgp_Global_RouteSelectionOptions_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Global_RouteSelectionOptions_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Global_RouteSelectionOptions_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.AdvertiseInactiveRoutes != nil {
		switch config.AdvertiseInactiveRoutes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.AdvertiseInactiveRoutes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.AdvertiseInactiveRoutes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "advertise-inactive-routes", Data: leafData})
		}
	}

	if config.AlwaysCompareMed != nil {
		switch config.AlwaysCompareMed.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.AlwaysCompareMed.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.AlwaysCompareMed)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "always-compare-med", Data: leafData})
		}
	}

	if config.EnableAigp != nil {
		switch config.EnableAigp.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.EnableAigp.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.EnableAigp)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enable-aigp", Data: leafData})
		}
	}

	if config.ExternalCompareRouterId != nil {
		switch config.ExternalCompareRouterId.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ExternalCompareRouterId.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ExternalCompareRouterId)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "external-compare-router-id", Data: leafData})
		}
	}

	if config.IgnoreAsPathLength != nil {
		switch config.IgnoreAsPathLength.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.IgnoreAsPathLength.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.IgnoreAsPathLength)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "ignore-as-path-length", Data: leafData})
		}
	}

	if config.IgnoreNextHopIgpMetric != nil {
		switch config.IgnoreNextHopIgpMetric.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.IgnoreNextHopIgpMetric.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.IgnoreNextHopIgpMetric)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "ignore-next-hop-igp-metric", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Global_RouteSelectionOptions_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Global_RouteSelectionOptions_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Global_RouteSelectionOptions_Config) SetValue(value_path string, value string) {
	if value_path == "advertise-inactive-routes" {
		config.AdvertiseInactiveRoutes = value
	}
	if value_path == "always-compare-med" {
		config.AlwaysCompareMed = value
	}
	if value_path == "enable-aigp" {
		config.EnableAigp = value
	}
	if value_path == "external-compare-router-id" {
		config.ExternalCompareRouterId = value
	}
	if value_path == "ignore-as-path-length" {
		config.IgnoreAsPathLength = value
	}
	if value_path == "ignore-next-hop-igp-metric" {
		config.IgnoreNextHopIgpMetric = value
	}
}

func (config *Bgp_Global_RouteSelectionOptions_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Global_RouteSelectionOptions_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Global_RouteSelectionOptions_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Global_RouteSelectionOptions_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Global_RouteSelectionOptions_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Global_RouteSelectionOptions_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Global_RouteSelectionOptions_Config) GetParentYangName() string {
	return "route-selection-options"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_RouteSelectionOptions_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_RouteSelectionOptions_State struct {
	parent types.Entity
	Filter types.YFilter

	AdvertiseInactiveRoutes interface{} // boolean
	AlwaysCompareMed        interface{} // boolean
	EnableAigp              interface{} // boolean
	ExternalCompareRouterId interface{} // boolean
	IgnoreAsPathLength      interface{} // boolean
	IgnoreNextHopIgpMetric  interface{} // boolean
}

func (state *Bgp_Global_RouteSelectionOptions_State) HasDataOrFilter() bool {
	return state.AdvertiseInactiveRoutes != nil ||
		state.AlwaysCompareMed != nil ||
		state.EnableAigp != nil ||
		state.ExternalCompareRouterId != nil ||
		state.IgnoreAsPathLength != nil ||
		state.IgnoreNextHopIgpMetric != nil
}

func (state *Bgp_Global_RouteSelectionOptions_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Global_RouteSelectionOptions_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Global_RouteSelectionOptions_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.AdvertiseInactiveRoutes != nil {
		switch state.AdvertiseInactiveRoutes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.AdvertiseInactiveRoutes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.AdvertiseInactiveRoutes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "advertise-inactive-routes", Data: leafData})
		}
	}

	if state.AlwaysCompareMed != nil {
		switch state.AlwaysCompareMed.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.AlwaysCompareMed.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.AlwaysCompareMed)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "always-compare-med", Data: leafData})
		}
	}

	if state.EnableAigp != nil {
		switch state.EnableAigp.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.EnableAigp.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.EnableAigp)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enable-aigp", Data: leafData})
		}
	}

	if state.ExternalCompareRouterId != nil {
		switch state.ExternalCompareRouterId.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ExternalCompareRouterId.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ExternalCompareRouterId)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "external-compare-router-id", Data: leafData})
		}
	}

	if state.IgnoreAsPathLength != nil {
		switch state.IgnoreAsPathLength.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.IgnoreAsPathLength.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.IgnoreAsPathLength)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "ignore-as-path-length", Data: leafData})
		}
	}

	if state.IgnoreNextHopIgpMetric != nil {
		switch state.IgnoreNextHopIgpMetric.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.IgnoreNextHopIgpMetric.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.IgnoreNextHopIgpMetric)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "ignore-next-hop-igp-metric", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Global_RouteSelectionOptions_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Global_RouteSelectionOptions_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Global_RouteSelectionOptions_State) SetValue(value_path string, value string) {
	if value_path == "advertise-inactive-routes" {
		state.AdvertiseInactiveRoutes = value
	}
	if value_path == "always-compare-med" {
		state.AlwaysCompareMed = value
	}
	if value_path == "enable-aigp" {
		state.EnableAigp = value
	}
	if value_path == "external-compare-router-id" {
		state.ExternalCompareRouterId = value
	}
	if value_path == "ignore-as-path-length" {
		state.IgnoreAsPathLength = value
	}
	if value_path == "ignore-next-hop-igp-metric" {
		state.IgnoreNextHopIgpMetric = value
	}
}

func (state *Bgp_Global_RouteSelectionOptions_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Global_RouteSelectionOptions_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Global_RouteSelectionOptions_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Global_RouteSelectionOptions_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Global_RouteSelectionOptions_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Global_RouteSelectionOptions_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Global_RouteSelectionOptions_State) GetParentYangName() string {
	return "route-selection-options"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis struct {
	parent types.Entity
	Filter types.YFilter

	AfiSafi []Bgp_Global_AfiSafis_AfiSafi
}

func (afiSafis *Bgp_Global_AfiSafis) HasDataOrFilter() bool {
	for _, child := range afiSafis.AfiSafi {
		if child.HasDataOrFilter() {
			return true
		}
	}
	return false
}

func (afiSafis *Bgp_Global_AfiSafis) GetFilter() types.YFilter {
	return afiSafis.Filter
}

func (afiSafis *Bgp_Global_AfiSafis) GetSegmentPath() string {
	return "afi-safis"
}

func (afiSafis *Bgp_Global_AfiSafis) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: afiSafis.GetSegmentPath()}
	return entityPath
}

func (afiSafis *Bgp_Global_AfiSafis) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "afi-safi" {
		for _, c := range afiSafis.AfiSafi {
			if afiSafis.GetSegmentPath() == segment_path {
				return &c
			}
		}
		child := Bgp_Global_AfiSafis_AfiSafi{}
		afiSafis.AfiSafi = append(afiSafis.AfiSafi, child)
		return &afiSafis.AfiSafi[len(afiSafis.AfiSafi)-1]
	}
	return nil
}

func (afiSafis *Bgp_Global_AfiSafis) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	for i := range afiSafis.AfiSafi {
		children[afiSafis.AfiSafi[i].GetSegmentPath()] = &afiSafis.AfiSafi[i]
	}

	return children
}

func (afiSafis *Bgp_Global_AfiSafis) SetValue(value_path string, value string) {
}

func (afiSafis *Bgp_Global_AfiSafis) GetBundleName() string {
	return "ydktest"
}

func (afiSafis *Bgp_Global_AfiSafis) GetYangName() string {
	return "afiSafis"
}

func (afiSafis *Bgp_Global_AfiSafis) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (afiSafis *Bgp_Global_AfiSafis) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (afiSafis *Bgp_Global_AfiSafis) SetParent(parent types.Entity) {
	afiSafis.parent = parent
}

func (afiSafis *Bgp_Global_AfiSafis) GetParent() types.Entity {
	return afiSafis.parent
}

func (afiSafis *Bgp_Global_AfiSafis) GetParentYangName() string {
	return "global"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi struct {
	parent types.Entity
	Filter types.YFilter

	AfiSafiName           interface{} // identityref
	ApplyPolicy           Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy
	Config                Bgp_Global_AfiSafis_AfiSafi_Config
	GracefulRestart       Bgp_Global_AfiSafis_AfiSafi_GracefulRestart
	Ipv4LabeledUnicast    Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast
	Ipv4Unicast           Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast
	Ipv6LabeledUnicast    Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast
	Ipv6Unicast           Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast
	L2VpnEvpn             Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn
	L2VpnVpls             Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls
	L3VpnIpv4Multicast    Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast
	L3VpnIpv4Unicast      Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast
	L3VpnIpv6Multicast    Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast
	L3VpnIpv6Unicast      Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast
	RouteSelectionOptions Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions
	State                 Bgp_Global_AfiSafis_AfiSafi_State
	UseMultiplePaths      Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths
}

func (afiSafi *Bgp_Global_AfiSafis_AfiSafi) HasDataOrFilter() bool {
	return afiSafi.AfiSafiName != nil ||
		afiSafi.ApplyPolicy.HasDataOrFilter() ||
		afiSafi.Config.HasDataOrFilter() ||
		afiSafi.GracefulRestart.HasDataOrFilter() ||
		afiSafi.Ipv4LabeledUnicast.HasDataOrFilter() ||
		afiSafi.Ipv4Unicast.HasDataOrFilter() ||
		afiSafi.Ipv6LabeledUnicast.HasDataOrFilter() ||
		afiSafi.Ipv6Unicast.HasDataOrFilter() ||
		afiSafi.L2VpnEvpn.HasDataOrFilter() ||
		afiSafi.L2VpnVpls.HasDataOrFilter() ||
		afiSafi.L3VpnIpv4Multicast.HasDataOrFilter() ||
		afiSafi.L3VpnIpv4Unicast.HasDataOrFilter() ||
		afiSafi.L3VpnIpv6Multicast.HasDataOrFilter() ||
		afiSafi.L3VpnIpv6Unicast.HasDataOrFilter() ||
		afiSafi.RouteSelectionOptions.HasDataOrFilter() ||
		afiSafi.State.HasDataOrFilter() ||
		afiSafi.UseMultiplePaths.HasDataOrFilter()
}

func (afiSafi *Bgp_Global_AfiSafis_AfiSafi) GetFilter() types.YFilter {
	return afiSafi.Filter
}

func (afiSafi *Bgp_Global_AfiSafis_AfiSafi) GetSegmentPath() string {
	return "afi-safi" + "[afi-safi-name=\"" + fmt.Sprintf("%v", afiSafi.AfiSafiName) + "\"]"
}

func (afiSafi *Bgp_Global_AfiSafis_AfiSafi) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: afiSafi.GetSegmentPath()}
	var leafData types.LeafData

	if afiSafi.AfiSafiName != nil {
		switch afiSafi.AfiSafiName.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: afiSafi.AfiSafiName.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", afiSafi.AfiSafiName)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "afi-safi-name", Data: leafData})
		}
	}

	return entityPath
}

func (afiSafi *Bgp_Global_AfiSafis_AfiSafi) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "apply-policy" {
		return &afiSafi.ApplyPolicy
	}
	if child_yang_name == "config" {
		return &afiSafi.Config
	}
	if child_yang_name == "graceful-restart" {
		return &afiSafi.GracefulRestart
	}
	if child_yang_name == "ipv4-labeled-unicast" {
		return &afiSafi.Ipv4LabeledUnicast
	}
	if child_yang_name == "ipv4-unicast" {
		return &afiSafi.Ipv4Unicast
	}
	if child_yang_name == "ipv6-labeled-unicast" {
		return &afiSafi.Ipv6LabeledUnicast
	}
	if child_yang_name == "ipv6-unicast" {
		return &afiSafi.Ipv6Unicast
	}
	if child_yang_name == "l2vpn-evpn" {
		return &afiSafi.L2VpnEvpn
	}
	if child_yang_name == "l2vpn-vpls" {
		return &afiSafi.L2VpnVpls
	}
	if child_yang_name == "l3vpn-ipv4-multicast" {
		return &afiSafi.L3VpnIpv4Multicast
	}
	if child_yang_name == "l3vpn-ipv4-unicast" {
		return &afiSafi.L3VpnIpv4Unicast
	}
	if child_yang_name == "l3vpn-ipv6-multicast" {
		return &afiSafi.L3VpnIpv6Multicast
	}
	if child_yang_name == "l3vpn-ipv6-unicast" {
		return &afiSafi.L3VpnIpv6Unicast
	}
	if child_yang_name == "route-selection-options" {
		return &afiSafi.RouteSelectionOptions
	}
	if child_yang_name == "state" {
		return &afiSafi.State
	}
	if child_yang_name == "use-multiple-paths" {
		return &afiSafi.UseMultiplePaths
	}
	return nil
}

func (afiSafi *Bgp_Global_AfiSafis_AfiSafi) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["apply-policy"] = &afiSafi.ApplyPolicy
	children["config"] = &afiSafi.Config
	children["graceful-restart"] = &afiSafi.GracefulRestart
	children["ipv4-labeled-unicast"] = &afiSafi.Ipv4LabeledUnicast
	children["ipv4-unicast"] = &afiSafi.Ipv4Unicast
	children["ipv6-labeled-unicast"] = &afiSafi.Ipv6LabeledUnicast
	children["ipv6-unicast"] = &afiSafi.Ipv6Unicast
	children["l2vpn-evpn"] = &afiSafi.L2VpnEvpn
	children["l2vpn-vpls"] = &afiSafi.L2VpnVpls
	children["l3vpn-ipv4-multicast"] = &afiSafi.L3VpnIpv4Multicast
	children["l3vpn-ipv4-unicast"] = &afiSafi.L3VpnIpv4Unicast
	children["l3vpn-ipv6-multicast"] = &afiSafi.L3VpnIpv6Multicast
	children["l3vpn-ipv6-unicast"] = &afiSafi.L3VpnIpv6Unicast
	children["route-selection-options"] = &afiSafi.RouteSelectionOptions
	children["state"] = &afiSafi.State
	children["use-multiple-paths"] = &afiSafi.UseMultiplePaths

	return children
}

func (afiSafi *Bgp_Global_AfiSafis_AfiSafi) SetValue(value_path string, value string) {
	if value_path == "afi-safi-name" {
		afiSafi.AfiSafiName = value
	}
}

func (afiSafi *Bgp_Global_AfiSafis_AfiSafi) GetBundleName() string {
	return "ydktest"
}

func (afiSafi *Bgp_Global_AfiSafis_AfiSafi) GetYangName() string {
	return "afiSafi"
}

func (afiSafi *Bgp_Global_AfiSafis_AfiSafi) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (afiSafi *Bgp_Global_AfiSafis_AfiSafi) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (afiSafi *Bgp_Global_AfiSafis_AfiSafi) SetParent(parent types.Entity) {
	afiSafi.parent = parent
}

func (afiSafi *Bgp_Global_AfiSafis_AfiSafi) GetParent() types.Entity {
	return afiSafi.parent
}

func (afiSafi *Bgp_Global_AfiSafis_AfiSafi) GetParentYangName() string {
	return "afi-safis"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_Config struct {
	parent types.Entity
	Filter types.YFilter

	AfiSafiName interface{} // identityref
	Enabled     interface{} // boolean
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Config) HasDataOrFilter() bool {
	return config.AfiSafiName != nil ||
		config.Enabled != nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.AfiSafiName != nil {
		switch config.AfiSafiName.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.AfiSafiName.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.AfiSafiName)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "afi-safi-name", Data: leafData})
		}
	}

	if config.Enabled != nil {
		switch config.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Config) SetValue(value_path string, value string) {
	if value_path == "afi-safi-name" {
		config.AfiSafiName = value
	}
	if value_path == "enabled" {
		config.Enabled = value
	}
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Config) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_State struct {
	parent types.Entity
	Filter types.YFilter

	AfiSafiName   interface{} // identityref
	Enabled       interface{} // boolean
	TotalPaths    interface{} // uint32
	TotalPrefixes interface{} // uint32
}

func (state *Bgp_Global_AfiSafis_AfiSafi_State) HasDataOrFilter() bool {
	return state.AfiSafiName != nil ||
		state.Enabled != nil ||
		state.TotalPaths != nil ||
		state.TotalPrefixes != nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Global_AfiSafis_AfiSafi_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.AfiSafiName != nil {
		switch state.AfiSafiName.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.AfiSafiName.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.AfiSafiName)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "afi-safi-name", Data: leafData})
		}
	}

	if state.Enabled != nil {
		switch state.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	if state.TotalPaths != nil {
		switch state.TotalPaths.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.TotalPaths.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.TotalPaths)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "total-paths", Data: leafData})
		}
	}

	if state.TotalPrefixes != nil {
		switch state.TotalPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.TotalPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.TotalPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "total-prefixes", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Global_AfiSafis_AfiSafi_State) SetValue(value_path string, value string) {
	if value_path == "afi-safi-name" {
		state.AfiSafiName = value
	}
	if value_path == "enabled" {
		state.Enabled = value
	}
	if value_path == "total-paths" {
		state.TotalPaths = value
	}
	if value_path == "total-prefixes" {
		state.TotalPrefixes = value
	}
}

func (state *Bgp_Global_AfiSafis_AfiSafi_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Global_AfiSafis_AfiSafi_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_State) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_GracefulRestart
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_GracefulRestart struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config
	State  Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State
}

func (gracefulRestart *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart) HasDataOrFilter() bool {
	return gracefulRestart.Config.HasDataOrFilter() ||
		gracefulRestart.State.HasDataOrFilter()
}

func (gracefulRestart *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart) GetFilter() types.YFilter {
	return gracefulRestart.Filter
}

func (gracefulRestart *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart) GetSegmentPath() string {
	return "graceful-restart"
}

func (gracefulRestart *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: gracefulRestart.GetSegmentPath()}
	return entityPath
}

func (gracefulRestart *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &gracefulRestart.Config
	}
	if child_yang_name == "state" {
		return &gracefulRestart.State
	}
	return nil
}

func (gracefulRestart *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &gracefulRestart.Config
	children["state"] = &gracefulRestart.State

	return children
}

func (gracefulRestart *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart) SetValue(value_path string, value string) {
}

func (gracefulRestart *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart) GetBundleName() string {
	return "ydktest"
}

func (gracefulRestart *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart) GetYangName() string {
	return "gracefulRestart"
}

func (gracefulRestart *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (gracefulRestart *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (gracefulRestart *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart) SetParent(parent types.Entity) {
	gracefulRestart.parent = parent
}

func (gracefulRestart *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart) GetParent() types.Entity {
	return gracefulRestart.parent
}

func (gracefulRestart *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config struct {
	parent types.Entity
	Filter types.YFilter

	Enabled interface{} // boolean
}

func (config *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config) HasDataOrFilter() bool {
	return config.Enabled != nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.Enabled != nil {
		switch config.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config) SetValue(value_path string, value string) {
	if value_path == "enabled" {
		config.Enabled = value
	}
}

func (config *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_Config) GetParentYangName() string {
	return "graceful-restart"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State struct {
	parent types.Entity
	Filter types.YFilter

	Enabled interface{} // boolean
}

func (state *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State) HasDataOrFilter() bool {
	return state.Enabled != nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.Enabled != nil {
		switch state.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State) SetValue(value_path string, value string) {
	if value_path == "enabled" {
		state.Enabled = value
	}
}

func (state *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_GracefulRestart_State) GetParentYangName() string {
	return "graceful-restart"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config
	State  Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State
}

func (routeSelectionOptions *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions) HasDataOrFilter() bool {
	return routeSelectionOptions.Config.HasDataOrFilter() ||
		routeSelectionOptions.State.HasDataOrFilter()
}

func (routeSelectionOptions *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions) GetFilter() types.YFilter {
	return routeSelectionOptions.Filter
}

func (routeSelectionOptions *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions) GetSegmentPath() string {
	return "route-selection-options"
}

func (routeSelectionOptions *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: routeSelectionOptions.GetSegmentPath()}
	return entityPath
}

func (routeSelectionOptions *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &routeSelectionOptions.Config
	}
	if child_yang_name == "state" {
		return &routeSelectionOptions.State
	}
	return nil
}

func (routeSelectionOptions *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &routeSelectionOptions.Config
	children["state"] = &routeSelectionOptions.State

	return children
}

func (routeSelectionOptions *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions) SetValue(value_path string, value string) {
}

func (routeSelectionOptions *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions) GetBundleName() string {
	return "ydktest"
}

func (routeSelectionOptions *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions) GetYangName() string {
	return "routeSelectionOptions"
}

func (routeSelectionOptions *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (routeSelectionOptions *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (routeSelectionOptions *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions) SetParent(parent types.Entity) {
	routeSelectionOptions.parent = parent
}

func (routeSelectionOptions *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions) GetParent() types.Entity {
	return routeSelectionOptions.parent
}

func (routeSelectionOptions *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config struct {
	parent types.Entity
	Filter types.YFilter

	AdvertiseInactiveRoutes interface{} // boolean
	AlwaysCompareMed        interface{} // boolean
	EnableAigp              interface{} // boolean
	ExternalCompareRouterId interface{} // boolean
	IgnoreAsPathLength      interface{} // boolean
	IgnoreNextHopIgpMetric  interface{} // boolean
}

func (config *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config) HasDataOrFilter() bool {
	return config.AdvertiseInactiveRoutes != nil ||
		config.AlwaysCompareMed != nil ||
		config.EnableAigp != nil ||
		config.ExternalCompareRouterId != nil ||
		config.IgnoreAsPathLength != nil ||
		config.IgnoreNextHopIgpMetric != nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.AdvertiseInactiveRoutes != nil {
		switch config.AdvertiseInactiveRoutes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.AdvertiseInactiveRoutes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.AdvertiseInactiveRoutes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "advertise-inactive-routes", Data: leafData})
		}
	}

	if config.AlwaysCompareMed != nil {
		switch config.AlwaysCompareMed.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.AlwaysCompareMed.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.AlwaysCompareMed)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "always-compare-med", Data: leafData})
		}
	}

	if config.EnableAigp != nil {
		switch config.EnableAigp.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.EnableAigp.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.EnableAigp)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enable-aigp", Data: leafData})
		}
	}

	if config.ExternalCompareRouterId != nil {
		switch config.ExternalCompareRouterId.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ExternalCompareRouterId.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ExternalCompareRouterId)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "external-compare-router-id", Data: leafData})
		}
	}

	if config.IgnoreAsPathLength != nil {
		switch config.IgnoreAsPathLength.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.IgnoreAsPathLength.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.IgnoreAsPathLength)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "ignore-as-path-length", Data: leafData})
		}
	}

	if config.IgnoreNextHopIgpMetric != nil {
		switch config.IgnoreNextHopIgpMetric.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.IgnoreNextHopIgpMetric.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.IgnoreNextHopIgpMetric)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "ignore-next-hop-igp-metric", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config) SetValue(value_path string, value string) {
	if value_path == "advertise-inactive-routes" {
		config.AdvertiseInactiveRoutes = value
	}
	if value_path == "always-compare-med" {
		config.AlwaysCompareMed = value
	}
	if value_path == "enable-aigp" {
		config.EnableAigp = value
	}
	if value_path == "external-compare-router-id" {
		config.ExternalCompareRouterId = value
	}
	if value_path == "ignore-as-path-length" {
		config.IgnoreAsPathLength = value
	}
	if value_path == "ignore-next-hop-igp-metric" {
		config.IgnoreNextHopIgpMetric = value
	}
}

func (config *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetParentYangName() string {
	return "route-selection-options"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State struct {
	parent types.Entity
	Filter types.YFilter

	AdvertiseInactiveRoutes interface{} // boolean
	AlwaysCompareMed        interface{} // boolean
	EnableAigp              interface{} // boolean
	ExternalCompareRouterId interface{} // boolean
	IgnoreAsPathLength      interface{} // boolean
	IgnoreNextHopIgpMetric  interface{} // boolean
}

func (state *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State) HasDataOrFilter() bool {
	return state.AdvertiseInactiveRoutes != nil ||
		state.AlwaysCompareMed != nil ||
		state.EnableAigp != nil ||
		state.ExternalCompareRouterId != nil ||
		state.IgnoreAsPathLength != nil ||
		state.IgnoreNextHopIgpMetric != nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.AdvertiseInactiveRoutes != nil {
		switch state.AdvertiseInactiveRoutes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.AdvertiseInactiveRoutes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.AdvertiseInactiveRoutes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "advertise-inactive-routes", Data: leafData})
		}
	}

	if state.AlwaysCompareMed != nil {
		switch state.AlwaysCompareMed.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.AlwaysCompareMed.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.AlwaysCompareMed)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "always-compare-med", Data: leafData})
		}
	}

	if state.EnableAigp != nil {
		switch state.EnableAigp.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.EnableAigp.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.EnableAigp)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enable-aigp", Data: leafData})
		}
	}

	if state.ExternalCompareRouterId != nil {
		switch state.ExternalCompareRouterId.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ExternalCompareRouterId.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ExternalCompareRouterId)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "external-compare-router-id", Data: leafData})
		}
	}

	if state.IgnoreAsPathLength != nil {
		switch state.IgnoreAsPathLength.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.IgnoreAsPathLength.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.IgnoreAsPathLength)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "ignore-as-path-length", Data: leafData})
		}
	}

	if state.IgnoreNextHopIgpMetric != nil {
		switch state.IgnoreNextHopIgpMetric.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.IgnoreNextHopIgpMetric.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.IgnoreNextHopIgpMetric)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "ignore-next-hop-igp-metric", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State) SetValue(value_path string, value string) {
	if value_path == "advertise-inactive-routes" {
		state.AdvertiseInactiveRoutes = value
	}
	if value_path == "always-compare-med" {
		state.AlwaysCompareMed = value
	}
	if value_path == "enable-aigp" {
		state.EnableAigp = value
	}
	if value_path == "external-compare-router-id" {
		state.ExternalCompareRouterId = value
	}
	if value_path == "ignore-as-path-length" {
		state.IgnoreAsPathLength = value
	}
	if value_path == "ignore-next-hop-igp-metric" {
		state.IgnoreNextHopIgpMetric = value
	}
}

func (state *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetParentYangName() string {
	return "route-selection-options"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config
	Ebgp   Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp
	Ibgp   Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp
	State  Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State
}

func (useMultiplePaths *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths) HasDataOrFilter() bool {
	return useMultiplePaths.Config.HasDataOrFilter() ||
		useMultiplePaths.Ebgp.HasDataOrFilter() ||
		useMultiplePaths.Ibgp.HasDataOrFilter() ||
		useMultiplePaths.State.HasDataOrFilter()
}

func (useMultiplePaths *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths) GetFilter() types.YFilter {
	return useMultiplePaths.Filter
}

func (useMultiplePaths *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths) GetSegmentPath() string {
	return "use-multiple-paths"
}

func (useMultiplePaths *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: useMultiplePaths.GetSegmentPath()}
	return entityPath
}

func (useMultiplePaths *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &useMultiplePaths.Config
	}
	if child_yang_name == "ebgp" {
		return &useMultiplePaths.Ebgp
	}
	if child_yang_name == "ibgp" {
		return &useMultiplePaths.Ibgp
	}
	if child_yang_name == "state" {
		return &useMultiplePaths.State
	}
	return nil
}

func (useMultiplePaths *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &useMultiplePaths.Config
	children["ebgp"] = &useMultiplePaths.Ebgp
	children["ibgp"] = &useMultiplePaths.Ibgp
	children["state"] = &useMultiplePaths.State

	return children
}

func (useMultiplePaths *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths) SetValue(value_path string, value string) {
}

func (useMultiplePaths *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths) GetBundleName() string {
	return "ydktest"
}

func (useMultiplePaths *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths) GetYangName() string {
	return "useMultiplePaths"
}

func (useMultiplePaths *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (useMultiplePaths *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (useMultiplePaths *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths) SetParent(parent types.Entity) {
	useMultiplePaths.parent = parent
}

func (useMultiplePaths *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths) GetParent() types.Entity {
	return useMultiplePaths.parent
}

func (useMultiplePaths *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config struct {
	parent types.Entity
	Filter types.YFilter

	Enabled interface{} // boolean
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config) HasDataOrFilter() bool {
	return config.Enabled != nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.Enabled != nil {
		switch config.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config) SetValue(value_path string, value string) {
	if value_path == "enabled" {
		config.Enabled = value
	}
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetParentYangName() string {
	return "use-multiple-paths"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State struct {
	parent types.Entity
	Filter types.YFilter

	Enabled interface{} // boolean
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State) HasDataOrFilter() bool {
	return state.Enabled != nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.Enabled != nil {
		switch state.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State) SetValue(value_path string, value string) {
	if value_path == "enabled" {
		state.Enabled = value
	}
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_State) GetParentYangName() string {
	return "use-multiple-paths"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config
	State  Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State
}

func (ebgp *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) HasDataOrFilter() bool {
	return ebgp.Config.HasDataOrFilter() ||
		ebgp.State.HasDataOrFilter()
}

func (ebgp *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetFilter() types.YFilter {
	return ebgp.Filter
}

func (ebgp *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetSegmentPath() string {
	return "ebgp"
}

func (ebgp *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: ebgp.GetSegmentPath()}
	return entityPath
}

func (ebgp *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &ebgp.Config
	}
	if child_yang_name == "state" {
		return &ebgp.State
	}
	return nil
}

func (ebgp *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &ebgp.Config
	children["state"] = &ebgp.State

	return children
}

func (ebgp *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) SetValue(value_path string, value string) {
}

func (ebgp *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetBundleName() string {
	return "ydktest"
}

func (ebgp *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetYangName() string {
	return "ebgp"
}

func (ebgp *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (ebgp *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (ebgp *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) SetParent(parent types.Entity) {
	ebgp.parent = parent
}

func (ebgp *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetParent() types.Entity {
	return ebgp.parent
}

func (ebgp *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetParentYangName() string {
	return "use-multiple-paths"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config struct {
	parent types.Entity
	Filter types.YFilter

	AllowMultipleAs interface{} // boolean
	MaximumPaths    interface{} // uint32
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) HasDataOrFilter() bool {
	return config.AllowMultipleAs != nil ||
		config.MaximumPaths != nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.AllowMultipleAs != nil {
		switch config.AllowMultipleAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.AllowMultipleAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.AllowMultipleAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "allow-multiple-as", Data: leafData})
		}
	}

	if config.MaximumPaths != nil {
		switch config.MaximumPaths.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaximumPaths.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaximumPaths)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "maximum-paths", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) SetValue(value_path string, value string) {
	if value_path == "allow-multiple-as" {
		config.AllowMultipleAs = value
	}
	if value_path == "maximum-paths" {
		config.MaximumPaths = value
	}
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetParentYangName() string {
	return "ebgp"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State struct {
	parent types.Entity
	Filter types.YFilter

	AllowMultipleAs interface{} // boolean
	MaximumPaths    interface{} // uint32
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) HasDataOrFilter() bool {
	return state.AllowMultipleAs != nil ||
		state.MaximumPaths != nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.AllowMultipleAs != nil {
		switch state.AllowMultipleAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.AllowMultipleAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.AllowMultipleAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "allow-multiple-as", Data: leafData})
		}
	}

	if state.MaximumPaths != nil {
		switch state.MaximumPaths.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaximumPaths.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaximumPaths)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "maximum-paths", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) SetValue(value_path string, value string) {
	if value_path == "allow-multiple-as" {
		state.AllowMultipleAs = value
	}
	if value_path == "maximum-paths" {
		state.MaximumPaths = value
	}
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetParentYangName() string {
	return "ebgp"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config
	State  Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State
}

func (ibgp *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) HasDataOrFilter() bool {
	return ibgp.Config.HasDataOrFilter() ||
		ibgp.State.HasDataOrFilter()
}

func (ibgp *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) GetFilter() types.YFilter {
	return ibgp.Filter
}

func (ibgp *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) GetSegmentPath() string {
	return "ibgp"
}

func (ibgp *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: ibgp.GetSegmentPath()}
	return entityPath
}

func (ibgp *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &ibgp.Config
	}
	if child_yang_name == "state" {
		return &ibgp.State
	}
	return nil
}

func (ibgp *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &ibgp.Config
	children["state"] = &ibgp.State

	return children
}

func (ibgp *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) SetValue(value_path string, value string) {
}

func (ibgp *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) GetBundleName() string {
	return "ydktest"
}

func (ibgp *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) GetYangName() string {
	return "ibgp"
}

func (ibgp *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (ibgp *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (ibgp *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) SetParent(parent types.Entity) {
	ibgp.parent = parent
}

func (ibgp *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) GetParent() types.Entity {
	return ibgp.parent
}

func (ibgp *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) GetParentYangName() string {
	return "use-multiple-paths"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaximumPaths interface{} // uint32
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) HasDataOrFilter() bool {
	return config.MaximumPaths != nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaximumPaths != nil {
		switch config.MaximumPaths.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaximumPaths.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaximumPaths)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "maximum-paths", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) SetValue(value_path string, value string) {
	if value_path == "maximum-paths" {
		config.MaximumPaths = value
	}
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) GetParentYangName() string {
	return "ibgp"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State struct {
	parent types.Entity
	Filter types.YFilter

	MaximumPaths interface{} // uint32
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) HasDataOrFilter() bool {
	return state.MaximumPaths != nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaximumPaths != nil {
		switch state.MaximumPaths.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaximumPaths.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaximumPaths)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "maximum-paths", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) SetValue(value_path string, value string) {
	if value_path == "maximum-paths" {
		state.MaximumPaths = value
	}
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) GetParentYangName() string {
	return "ibgp"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_Config
	State  Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_State
}

func (applyPolicy *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy) HasDataOrFilter() bool {
	return applyPolicy.Config.HasDataOrFilter() ||
		applyPolicy.State.HasDataOrFilter()
}

func (applyPolicy *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy) GetFilter() types.YFilter {
	return applyPolicy.Filter
}

func (applyPolicy *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy) GetSegmentPath() string {
	return "apply-policy"
}

func (applyPolicy *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: applyPolicy.GetSegmentPath()}
	return entityPath
}

func (applyPolicy *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &applyPolicy.Config
	}
	if child_yang_name == "state" {
		return &applyPolicy.State
	}
	return nil
}

func (applyPolicy *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &applyPolicy.Config
	children["state"] = &applyPolicy.State

	return children
}

func (applyPolicy *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy) SetValue(value_path string, value string) {
}

func (applyPolicy *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy) GetBundleName() string {
	return "ydktest"
}

func (applyPolicy *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy) GetYangName() string {
	return "applyPolicy"
}

func (applyPolicy *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (applyPolicy *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (applyPolicy *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy) SetParent(parent types.Entity) {
	applyPolicy.parent = parent
}

func (applyPolicy *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy) GetParent() types.Entity {
	return applyPolicy.parent
}

func (applyPolicy *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_Config struct {
	parent types.Entity
	Filter types.YFilter

	DefaultExportPolicy interface{} // enumeration
	DefaultImportPolicy interface{} // enumeration
	ExportPolicy        []interface{}
	ImportPolicy        []interface{}
}

func (config *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_Config) HasDataOrFilter() bool {
	for _, leaf := range config.ExportPolicy {
		if leaf != nil {
			return true
		}
	}
	for _, leaf := range config.ImportPolicy {
		if leaf != nil {
			return true
		}
	}
	return config.DefaultExportPolicy != nil ||
		config.DefaultImportPolicy != nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.DefaultExportPolicy != nil {
		switch config.DefaultExportPolicy.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.DefaultExportPolicy.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.DefaultExportPolicy)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "default-export-policy", Data: leafData})
		}
	}

	if config.DefaultImportPolicy != nil {
		switch config.DefaultImportPolicy.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.DefaultImportPolicy.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.DefaultImportPolicy)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "default-import-policy", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_Config) SetValue(value_path string, value string) {
	if value_path == "default-export-policy" {
		config.DefaultExportPolicy = value
	}
	if value_path == "default-import-policy" {
		config.DefaultImportPolicy = value
	}
	if value_path == "export-policy" {
		config.ExportPolicy = append(config.ExportPolicy, value)
	}
	if value_path == "import-policy" {
		config.ImportPolicy = append(config.ImportPolicy, value)
	}
}

func (config *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_Config) GetParentYangName() string {
	return "apply-policy"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_State struct {
	parent types.Entity
	Filter types.YFilter

	DefaultExportPolicy interface{} // enumeration
	DefaultImportPolicy interface{} // enumeration
	ExportPolicy        []interface{}
	ImportPolicy        []interface{}
}

func (state *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_State) HasDataOrFilter() bool {
	for _, leaf := range state.ExportPolicy {
		if leaf != nil {
			return true
		}
	}
	for _, leaf := range state.ImportPolicy {
		if leaf != nil {
			return true
		}
	}
	return state.DefaultExportPolicy != nil ||
		state.DefaultImportPolicy != nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.DefaultExportPolicy != nil {
		switch state.DefaultExportPolicy.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.DefaultExportPolicy.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.DefaultExportPolicy)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "default-export-policy", Data: leafData})
		}
	}

	if state.DefaultImportPolicy != nil {
		switch state.DefaultImportPolicy.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.DefaultImportPolicy.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.DefaultImportPolicy)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "default-import-policy", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_State) SetValue(value_path string, value string) {
	if value_path == "default-export-policy" {
		state.DefaultExportPolicy = value
	}
	if value_path == "default-import-policy" {
		state.DefaultImportPolicy = value
	}
	if value_path == "export-policy" {
		state.ExportPolicy = append(state.ExportPolicy, value)
	}
	if value_path == "import-policy" {
		state.ImportPolicy = append(state.ImportPolicy, value)
	}
}

func (state *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_ApplyPolicy_State) GetParentYangName() string {
	return "apply-policy"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast struct {
	parent types.Entity
	Filter types.YFilter

	Config      Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config
	PrefixLimit Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit
	State       Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State
}

func (ipv4Unicast *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast) HasDataOrFilter() bool {
	return ipv4Unicast.Config.HasDataOrFilter() ||
		ipv4Unicast.PrefixLimit.HasDataOrFilter() ||
		ipv4Unicast.State.HasDataOrFilter()
}

func (ipv4Unicast *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast) GetFilter() types.YFilter {
	return ipv4Unicast.Filter
}

func (ipv4Unicast *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast) GetSegmentPath() string {
	return "ipv4-unicast"
}

func (ipv4Unicast *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: ipv4Unicast.GetSegmentPath()}
	return entityPath
}

func (ipv4Unicast *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &ipv4Unicast.Config
	}
	if child_yang_name == "prefix-limit" {
		return &ipv4Unicast.PrefixLimit
	}
	if child_yang_name == "state" {
		return &ipv4Unicast.State
	}
	return nil
}

func (ipv4Unicast *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &ipv4Unicast.Config
	children["prefix-limit"] = &ipv4Unicast.PrefixLimit
	children["state"] = &ipv4Unicast.State

	return children
}

func (ipv4Unicast *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast) SetValue(value_path string, value string) {
}

func (ipv4Unicast *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast) GetBundleName() string {
	return "ydktest"
}

func (ipv4Unicast *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast) GetYangName() string {
	return "ipv4Unicast"
}

func (ipv4Unicast *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (ipv4Unicast *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (ipv4Unicast *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast) SetParent(parent types.Entity) {
	ipv4Unicast.parent = parent
}

func (ipv4Unicast *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast) GetParent() types.Entity {
	return ipv4Unicast.parent
}

func (ipv4Unicast *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config
	State  Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) HasDataOrFilter() bool {
	return prefixLimit.Config.HasDataOrFilter() ||
		prefixLimit.State.HasDataOrFilter()
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetFilter() types.YFilter {
	return prefixLimit.Filter
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetSegmentPath() string {
	return "prefix-limit"
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixLimit.GetSegmentPath()}
	return entityPath
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &prefixLimit.Config
	}
	if child_yang_name == "state" {
		return &prefixLimit.State
	}
	return nil
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &prefixLimit.Config
	children["state"] = &prefixLimit.State

	return children
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) SetValue(value_path string, value string) {
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetBundleName() string {
	return "ydktest"
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetYangName() string {
	return "prefixLimit"
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) SetParent(parent types.Entity) {
	prefixLimit.parent = parent
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetParent() types.Entity {
	return prefixLimit.parent
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetParentYangName() string {
	return "ipv4-unicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) HasDataOrFilter() bool {
	return config.MaxPrefixes != nil ||
		config.RestartTimer != nil ||
		config.ShutdownThresholdPct != nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaxPrefixes != nil {
		switch config.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if config.RestartTimer != nil {
		switch config.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if config.ShutdownThresholdPct != nil {
		switch config.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		config.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		config.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		config.ShutdownThresholdPct = value
	}
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) HasDataOrFilter() bool {
	return state.MaxPrefixes != nil ||
		state.RestartTimer != nil ||
		state.ShutdownThresholdPct != nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaxPrefixes != nil {
		switch state.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if state.RestartTimer != nil {
		switch state.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if state.ShutdownThresholdPct != nil {
		switch state.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		state.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		state.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		state.ShutdownThresholdPct = value
	}
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config struct {
	parent types.Entity
	Filter types.YFilter

	SendDefaultRoute interface{} // boolean
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config) HasDataOrFilter() bool {
	return config.SendDefaultRoute != nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.SendDefaultRoute != nil {
		switch config.SendDefaultRoute.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.SendDefaultRoute.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.SendDefaultRoute)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "send-default-route", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config) SetValue(value_path string, value string) {
	if value_path == "send-default-route" {
		config.SendDefaultRoute = value
	}
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetParentYangName() string {
	return "ipv4-unicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State struct {
	parent types.Entity
	Filter types.YFilter

	SendDefaultRoute interface{} // boolean
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State) HasDataOrFilter() bool {
	return state.SendDefaultRoute != nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.SendDefaultRoute != nil {
		switch state.SendDefaultRoute.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.SendDefaultRoute.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.SendDefaultRoute)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "send-default-route", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State) SetValue(value_path string, value string) {
	if value_path == "send-default-route" {
		state.SendDefaultRoute = value
	}
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4Unicast_State) GetParentYangName() string {
	return "ipv4-unicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast struct {
	parent types.Entity
	Filter types.YFilter

	Config      Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config
	PrefixLimit Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit
	State       Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State
}

func (ipv6Unicast *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast) HasDataOrFilter() bool {
	return ipv6Unicast.Config.HasDataOrFilter() ||
		ipv6Unicast.PrefixLimit.HasDataOrFilter() ||
		ipv6Unicast.State.HasDataOrFilter()
}

func (ipv6Unicast *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast) GetFilter() types.YFilter {
	return ipv6Unicast.Filter
}

func (ipv6Unicast *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast) GetSegmentPath() string {
	return "ipv6-unicast"
}

func (ipv6Unicast *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: ipv6Unicast.GetSegmentPath()}
	return entityPath
}

func (ipv6Unicast *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &ipv6Unicast.Config
	}
	if child_yang_name == "prefix-limit" {
		return &ipv6Unicast.PrefixLimit
	}
	if child_yang_name == "state" {
		return &ipv6Unicast.State
	}
	return nil
}

func (ipv6Unicast *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &ipv6Unicast.Config
	children["prefix-limit"] = &ipv6Unicast.PrefixLimit
	children["state"] = &ipv6Unicast.State

	return children
}

func (ipv6Unicast *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast) SetValue(value_path string, value string) {
}

func (ipv6Unicast *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast) GetBundleName() string {
	return "ydktest"
}

func (ipv6Unicast *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast) GetYangName() string {
	return "ipv6Unicast"
}

func (ipv6Unicast *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (ipv6Unicast *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (ipv6Unicast *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast) SetParent(parent types.Entity) {
	ipv6Unicast.parent = parent
}

func (ipv6Unicast *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast) GetParent() types.Entity {
	return ipv6Unicast.parent
}

func (ipv6Unicast *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config
	State  Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) HasDataOrFilter() bool {
	return prefixLimit.Config.HasDataOrFilter() ||
		prefixLimit.State.HasDataOrFilter()
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetFilter() types.YFilter {
	return prefixLimit.Filter
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetSegmentPath() string {
	return "prefix-limit"
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixLimit.GetSegmentPath()}
	return entityPath
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &prefixLimit.Config
	}
	if child_yang_name == "state" {
		return &prefixLimit.State
	}
	return nil
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &prefixLimit.Config
	children["state"] = &prefixLimit.State

	return children
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) SetValue(value_path string, value string) {
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetBundleName() string {
	return "ydktest"
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetYangName() string {
	return "prefixLimit"
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) SetParent(parent types.Entity) {
	prefixLimit.parent = parent
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetParent() types.Entity {
	return prefixLimit.parent
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetParentYangName() string {
	return "ipv6-unicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) HasDataOrFilter() bool {
	return config.MaxPrefixes != nil ||
		config.RestartTimer != nil ||
		config.ShutdownThresholdPct != nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaxPrefixes != nil {
		switch config.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if config.RestartTimer != nil {
		switch config.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if config.ShutdownThresholdPct != nil {
		switch config.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		config.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		config.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		config.ShutdownThresholdPct = value
	}
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) HasDataOrFilter() bool {
	return state.MaxPrefixes != nil ||
		state.RestartTimer != nil ||
		state.ShutdownThresholdPct != nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaxPrefixes != nil {
		switch state.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if state.RestartTimer != nil {
		switch state.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if state.ShutdownThresholdPct != nil {
		switch state.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		state.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		state.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		state.ShutdownThresholdPct = value
	}
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config struct {
	parent types.Entity
	Filter types.YFilter

	SendDefaultRoute interface{} // boolean
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config) HasDataOrFilter() bool {
	return config.SendDefaultRoute != nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.SendDefaultRoute != nil {
		switch config.SendDefaultRoute.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.SendDefaultRoute.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.SendDefaultRoute)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "send-default-route", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config) SetValue(value_path string, value string) {
	if value_path == "send-default-route" {
		config.SendDefaultRoute = value
	}
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetParentYangName() string {
	return "ipv6-unicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State struct {
	parent types.Entity
	Filter types.YFilter

	SendDefaultRoute interface{} // boolean
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State) HasDataOrFilter() bool {
	return state.SendDefaultRoute != nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.SendDefaultRoute != nil {
		switch state.SendDefaultRoute.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.SendDefaultRoute.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.SendDefaultRoute)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "send-default-route", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State) SetValue(value_path string, value string) {
	if value_path == "send-default-route" {
		state.SendDefaultRoute = value
	}
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6Unicast_State) GetParentYangName() string {
	return "ipv6-unicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast struct {
	parent types.Entity
	Filter types.YFilter

	PrefixLimit Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
}

func (ipv4LabeledUnicast *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast) HasDataOrFilter() bool {
	return ipv4LabeledUnicast.PrefixLimit.HasDataOrFilter()
}

func (ipv4LabeledUnicast *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetFilter() types.YFilter {
	return ipv4LabeledUnicast.Filter
}

func (ipv4LabeledUnicast *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetSegmentPath() string {
	return "ipv4-labeled-unicast"
}

func (ipv4LabeledUnicast *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: ipv4LabeledUnicast.GetSegmentPath()}
	return entityPath
}

func (ipv4LabeledUnicast *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "prefix-limit" {
		return &ipv4LabeledUnicast.PrefixLimit
	}
	return nil
}

func (ipv4LabeledUnicast *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["prefix-limit"] = &ipv4LabeledUnicast.PrefixLimit

	return children
}

func (ipv4LabeledUnicast *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast) SetValue(value_path string, value string) {
}

func (ipv4LabeledUnicast *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetBundleName() string {
	return "ydktest"
}

func (ipv4LabeledUnicast *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetYangName() string {
	return "ipv4LabeledUnicast"
}

func (ipv4LabeledUnicast *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (ipv4LabeledUnicast *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (ipv4LabeledUnicast *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast) SetParent(parent types.Entity) {
	ipv4LabeledUnicast.parent = parent
}

func (ipv4LabeledUnicast *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetParent() types.Entity {
	return ipv4LabeledUnicast.parent
}

func (ipv4LabeledUnicast *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config
	State  Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) HasDataOrFilter() bool {
	return prefixLimit.Config.HasDataOrFilter() ||
		prefixLimit.State.HasDataOrFilter()
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetFilter() types.YFilter {
	return prefixLimit.Filter
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetSegmentPath() string {
	return "prefix-limit"
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixLimit.GetSegmentPath()}
	return entityPath
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &prefixLimit.Config
	}
	if child_yang_name == "state" {
		return &prefixLimit.State
	}
	return nil
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &prefixLimit.Config
	children["state"] = &prefixLimit.State

	return children
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) SetValue(value_path string, value string) {
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetBundleName() string {
	return "ydktest"
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetYangName() string {
	return "prefixLimit"
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) SetParent(parent types.Entity) {
	prefixLimit.parent = parent
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetParent() types.Entity {
	return prefixLimit.parent
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetParentYangName() string {
	return "ipv4-labeled-unicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) HasDataOrFilter() bool {
	return config.MaxPrefixes != nil ||
		config.RestartTimer != nil ||
		config.ShutdownThresholdPct != nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaxPrefixes != nil {
		switch config.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if config.RestartTimer != nil {
		switch config.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if config.ShutdownThresholdPct != nil {
		switch config.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		config.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		config.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		config.ShutdownThresholdPct = value
	}
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) HasDataOrFilter() bool {
	return state.MaxPrefixes != nil ||
		state.RestartTimer != nil ||
		state.ShutdownThresholdPct != nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaxPrefixes != nil {
		switch state.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if state.RestartTimer != nil {
		switch state.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if state.ShutdownThresholdPct != nil {
		switch state.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		state.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		state.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		state.ShutdownThresholdPct = value
	}
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast struct {
	parent types.Entity
	Filter types.YFilter

	PrefixLimit Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
}

func (ipv6LabeledUnicast *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast) HasDataOrFilter() bool {
	return ipv6LabeledUnicast.PrefixLimit.HasDataOrFilter()
}

func (ipv6LabeledUnicast *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetFilter() types.YFilter {
	return ipv6LabeledUnicast.Filter
}

func (ipv6LabeledUnicast *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetSegmentPath() string {
	return "ipv6-labeled-unicast"
}

func (ipv6LabeledUnicast *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: ipv6LabeledUnicast.GetSegmentPath()}
	return entityPath
}

func (ipv6LabeledUnicast *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "prefix-limit" {
		return &ipv6LabeledUnicast.PrefixLimit
	}
	return nil
}

func (ipv6LabeledUnicast *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["prefix-limit"] = &ipv6LabeledUnicast.PrefixLimit

	return children
}

func (ipv6LabeledUnicast *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast) SetValue(value_path string, value string) {
}

func (ipv6LabeledUnicast *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetBundleName() string {
	return "ydktest"
}

func (ipv6LabeledUnicast *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetYangName() string {
	return "ipv6LabeledUnicast"
}

func (ipv6LabeledUnicast *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (ipv6LabeledUnicast *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (ipv6LabeledUnicast *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast) SetParent(parent types.Entity) {
	ipv6LabeledUnicast.parent = parent
}

func (ipv6LabeledUnicast *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetParent() types.Entity {
	return ipv6LabeledUnicast.parent
}

func (ipv6LabeledUnicast *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config
	State  Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) HasDataOrFilter() bool {
	return prefixLimit.Config.HasDataOrFilter() ||
		prefixLimit.State.HasDataOrFilter()
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetFilter() types.YFilter {
	return prefixLimit.Filter
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetSegmentPath() string {
	return "prefix-limit"
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixLimit.GetSegmentPath()}
	return entityPath
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &prefixLimit.Config
	}
	if child_yang_name == "state" {
		return &prefixLimit.State
	}
	return nil
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &prefixLimit.Config
	children["state"] = &prefixLimit.State

	return children
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) SetValue(value_path string, value string) {
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetBundleName() string {
	return "ydktest"
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetYangName() string {
	return "prefixLimit"
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) SetParent(parent types.Entity) {
	prefixLimit.parent = parent
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetParent() types.Entity {
	return prefixLimit.parent
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetParentYangName() string {
	return "ipv6-labeled-unicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) HasDataOrFilter() bool {
	return config.MaxPrefixes != nil ||
		config.RestartTimer != nil ||
		config.ShutdownThresholdPct != nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaxPrefixes != nil {
		switch config.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if config.RestartTimer != nil {
		switch config.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if config.ShutdownThresholdPct != nil {
		switch config.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		config.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		config.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		config.ShutdownThresholdPct = value
	}
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) HasDataOrFilter() bool {
	return state.MaxPrefixes != nil ||
		state.RestartTimer != nil ||
		state.ShutdownThresholdPct != nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaxPrefixes != nil {
		switch state.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if state.RestartTimer != nil {
		switch state.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if state.ShutdownThresholdPct != nil {
		switch state.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		state.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		state.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		state.ShutdownThresholdPct = value
	}
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast struct {
	parent types.Entity
	Filter types.YFilter

	PrefixLimit Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
}

func (l3VpnIpv4Unicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast) HasDataOrFilter() bool {
	return l3VpnIpv4Unicast.PrefixLimit.HasDataOrFilter()
}

func (l3VpnIpv4Unicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetFilter() types.YFilter {
	return l3VpnIpv4Unicast.Filter
}

func (l3VpnIpv4Unicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetSegmentPath() string {
	return "l3vpn-ipv4-unicast"
}

func (l3VpnIpv4Unicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: l3VpnIpv4Unicast.GetSegmentPath()}
	return entityPath
}

func (l3VpnIpv4Unicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "prefix-limit" {
		return &l3VpnIpv4Unicast.PrefixLimit
	}
	return nil
}

func (l3VpnIpv4Unicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["prefix-limit"] = &l3VpnIpv4Unicast.PrefixLimit

	return children
}

func (l3VpnIpv4Unicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast) SetValue(value_path string, value string) {
}

func (l3VpnIpv4Unicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetBundleName() string {
	return "ydktest"
}

func (l3VpnIpv4Unicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetYangName() string {
	return "l3VpnIpv4Unicast"
}

func (l3VpnIpv4Unicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (l3VpnIpv4Unicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (l3VpnIpv4Unicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast) SetParent(parent types.Entity) {
	l3VpnIpv4Unicast.parent = parent
}

func (l3VpnIpv4Unicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetParent() types.Entity {
	return l3VpnIpv4Unicast.parent
}

func (l3VpnIpv4Unicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config
	State  Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) HasDataOrFilter() bool {
	return prefixLimit.Config.HasDataOrFilter() ||
		prefixLimit.State.HasDataOrFilter()
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetFilter() types.YFilter {
	return prefixLimit.Filter
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetSegmentPath() string {
	return "prefix-limit"
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixLimit.GetSegmentPath()}
	return entityPath
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &prefixLimit.Config
	}
	if child_yang_name == "state" {
		return &prefixLimit.State
	}
	return nil
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &prefixLimit.Config
	children["state"] = &prefixLimit.State

	return children
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) SetValue(value_path string, value string) {
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetBundleName() string {
	return "ydktest"
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetYangName() string {
	return "prefixLimit"
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) SetParent(parent types.Entity) {
	prefixLimit.parent = parent
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetParent() types.Entity {
	return prefixLimit.parent
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetParentYangName() string {
	return "l3vpn-ipv4-unicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) HasDataOrFilter() bool {
	return config.MaxPrefixes != nil ||
		config.RestartTimer != nil ||
		config.ShutdownThresholdPct != nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaxPrefixes != nil {
		switch config.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if config.RestartTimer != nil {
		switch config.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if config.ShutdownThresholdPct != nil {
		switch config.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		config.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		config.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		config.ShutdownThresholdPct = value
	}
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) HasDataOrFilter() bool {
	return state.MaxPrefixes != nil ||
		state.RestartTimer != nil ||
		state.ShutdownThresholdPct != nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaxPrefixes != nil {
		switch state.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if state.RestartTimer != nil {
		switch state.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if state.ShutdownThresholdPct != nil {
		switch state.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		state.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		state.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		state.ShutdownThresholdPct = value
	}
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast struct {
	parent types.Entity
	Filter types.YFilter

	PrefixLimit Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
}

func (l3VpnIpv6Unicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast) HasDataOrFilter() bool {
	return l3VpnIpv6Unicast.PrefixLimit.HasDataOrFilter()
}

func (l3VpnIpv6Unicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetFilter() types.YFilter {
	return l3VpnIpv6Unicast.Filter
}

func (l3VpnIpv6Unicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetSegmentPath() string {
	return "l3vpn-ipv6-unicast"
}

func (l3VpnIpv6Unicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: l3VpnIpv6Unicast.GetSegmentPath()}
	return entityPath
}

func (l3VpnIpv6Unicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "prefix-limit" {
		return &l3VpnIpv6Unicast.PrefixLimit
	}
	return nil
}

func (l3VpnIpv6Unicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["prefix-limit"] = &l3VpnIpv6Unicast.PrefixLimit

	return children
}

func (l3VpnIpv6Unicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast) SetValue(value_path string, value string) {
}

func (l3VpnIpv6Unicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetBundleName() string {
	return "ydktest"
}

func (l3VpnIpv6Unicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetYangName() string {
	return "l3VpnIpv6Unicast"
}

func (l3VpnIpv6Unicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (l3VpnIpv6Unicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (l3VpnIpv6Unicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast) SetParent(parent types.Entity) {
	l3VpnIpv6Unicast.parent = parent
}

func (l3VpnIpv6Unicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetParent() types.Entity {
	return l3VpnIpv6Unicast.parent
}

func (l3VpnIpv6Unicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config
	State  Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) HasDataOrFilter() bool {
	return prefixLimit.Config.HasDataOrFilter() ||
		prefixLimit.State.HasDataOrFilter()
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetFilter() types.YFilter {
	return prefixLimit.Filter
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetSegmentPath() string {
	return "prefix-limit"
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixLimit.GetSegmentPath()}
	return entityPath
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &prefixLimit.Config
	}
	if child_yang_name == "state" {
		return &prefixLimit.State
	}
	return nil
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &prefixLimit.Config
	children["state"] = &prefixLimit.State

	return children
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) SetValue(value_path string, value string) {
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetBundleName() string {
	return "ydktest"
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetYangName() string {
	return "prefixLimit"
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) SetParent(parent types.Entity) {
	prefixLimit.parent = parent
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetParent() types.Entity {
	return prefixLimit.parent
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetParentYangName() string {
	return "l3vpn-ipv6-unicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) HasDataOrFilter() bool {
	return config.MaxPrefixes != nil ||
		config.RestartTimer != nil ||
		config.ShutdownThresholdPct != nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaxPrefixes != nil {
		switch config.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if config.RestartTimer != nil {
		switch config.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if config.ShutdownThresholdPct != nil {
		switch config.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		config.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		config.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		config.ShutdownThresholdPct = value
	}
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) HasDataOrFilter() bool {
	return state.MaxPrefixes != nil ||
		state.RestartTimer != nil ||
		state.ShutdownThresholdPct != nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaxPrefixes != nil {
		switch state.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if state.RestartTimer != nil {
		switch state.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if state.ShutdownThresholdPct != nil {
		switch state.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		state.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		state.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		state.ShutdownThresholdPct = value
	}
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast struct {
	parent types.Entity
	Filter types.YFilter

	PrefixLimit Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit
}

func (l3VpnIpv4Multicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast) HasDataOrFilter() bool {
	return l3VpnIpv4Multicast.PrefixLimit.HasDataOrFilter()
}

func (l3VpnIpv4Multicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetFilter() types.YFilter {
	return l3VpnIpv4Multicast.Filter
}

func (l3VpnIpv4Multicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetSegmentPath() string {
	return "l3vpn-ipv4-multicast"
}

func (l3VpnIpv4Multicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: l3VpnIpv4Multicast.GetSegmentPath()}
	return entityPath
}

func (l3VpnIpv4Multicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "prefix-limit" {
		return &l3VpnIpv4Multicast.PrefixLimit
	}
	return nil
}

func (l3VpnIpv4Multicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["prefix-limit"] = &l3VpnIpv4Multicast.PrefixLimit

	return children
}

func (l3VpnIpv4Multicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast) SetValue(value_path string, value string) {
}

func (l3VpnIpv4Multicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetBundleName() string {
	return "ydktest"
}

func (l3VpnIpv4Multicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetYangName() string {
	return "l3VpnIpv4Multicast"
}

func (l3VpnIpv4Multicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (l3VpnIpv4Multicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (l3VpnIpv4Multicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast) SetParent(parent types.Entity) {
	l3VpnIpv4Multicast.parent = parent
}

func (l3VpnIpv4Multicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetParent() types.Entity {
	return l3VpnIpv4Multicast.parent
}

func (l3VpnIpv4Multicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config
	State  Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) HasDataOrFilter() bool {
	return prefixLimit.Config.HasDataOrFilter() ||
		prefixLimit.State.HasDataOrFilter()
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetFilter() types.YFilter {
	return prefixLimit.Filter
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetSegmentPath() string {
	return "prefix-limit"
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixLimit.GetSegmentPath()}
	return entityPath
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &prefixLimit.Config
	}
	if child_yang_name == "state" {
		return &prefixLimit.State
	}
	return nil
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &prefixLimit.Config
	children["state"] = &prefixLimit.State

	return children
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) SetValue(value_path string, value string) {
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetBundleName() string {
	return "ydktest"
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetYangName() string {
	return "prefixLimit"
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) SetParent(parent types.Entity) {
	prefixLimit.parent = parent
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetParent() types.Entity {
	return prefixLimit.parent
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetParentYangName() string {
	return "l3vpn-ipv4-multicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) HasDataOrFilter() bool {
	return config.MaxPrefixes != nil ||
		config.RestartTimer != nil ||
		config.ShutdownThresholdPct != nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaxPrefixes != nil {
		switch config.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if config.RestartTimer != nil {
		switch config.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if config.ShutdownThresholdPct != nil {
		switch config.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		config.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		config.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		config.ShutdownThresholdPct = value
	}
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) HasDataOrFilter() bool {
	return state.MaxPrefixes != nil ||
		state.RestartTimer != nil ||
		state.ShutdownThresholdPct != nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaxPrefixes != nil {
		switch state.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if state.RestartTimer != nil {
		switch state.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if state.ShutdownThresholdPct != nil {
		switch state.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		state.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		state.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		state.ShutdownThresholdPct = value
	}
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast struct {
	parent types.Entity
	Filter types.YFilter

	PrefixLimit Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit
}

func (l3VpnIpv6Multicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast) HasDataOrFilter() bool {
	return l3VpnIpv6Multicast.PrefixLimit.HasDataOrFilter()
}

func (l3VpnIpv6Multicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetFilter() types.YFilter {
	return l3VpnIpv6Multicast.Filter
}

func (l3VpnIpv6Multicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetSegmentPath() string {
	return "l3vpn-ipv6-multicast"
}

func (l3VpnIpv6Multicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: l3VpnIpv6Multicast.GetSegmentPath()}
	return entityPath
}

func (l3VpnIpv6Multicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "prefix-limit" {
		return &l3VpnIpv6Multicast.PrefixLimit
	}
	return nil
}

func (l3VpnIpv6Multicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["prefix-limit"] = &l3VpnIpv6Multicast.PrefixLimit

	return children
}

func (l3VpnIpv6Multicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast) SetValue(value_path string, value string) {
}

func (l3VpnIpv6Multicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetBundleName() string {
	return "ydktest"
}

func (l3VpnIpv6Multicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetYangName() string {
	return "l3VpnIpv6Multicast"
}

func (l3VpnIpv6Multicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (l3VpnIpv6Multicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (l3VpnIpv6Multicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast) SetParent(parent types.Entity) {
	l3VpnIpv6Multicast.parent = parent
}

func (l3VpnIpv6Multicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetParent() types.Entity {
	return l3VpnIpv6Multicast.parent
}

func (l3VpnIpv6Multicast *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config
	State  Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) HasDataOrFilter() bool {
	return prefixLimit.Config.HasDataOrFilter() ||
		prefixLimit.State.HasDataOrFilter()
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetFilter() types.YFilter {
	return prefixLimit.Filter
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetSegmentPath() string {
	return "prefix-limit"
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixLimit.GetSegmentPath()}
	return entityPath
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &prefixLimit.Config
	}
	if child_yang_name == "state" {
		return &prefixLimit.State
	}
	return nil
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &prefixLimit.Config
	children["state"] = &prefixLimit.State

	return children
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) SetValue(value_path string, value string) {
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetBundleName() string {
	return "ydktest"
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetYangName() string {
	return "prefixLimit"
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) SetParent(parent types.Entity) {
	prefixLimit.parent = parent
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetParent() types.Entity {
	return prefixLimit.parent
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetParentYangName() string {
	return "l3vpn-ipv6-multicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) HasDataOrFilter() bool {
	return config.MaxPrefixes != nil ||
		config.RestartTimer != nil ||
		config.ShutdownThresholdPct != nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaxPrefixes != nil {
		switch config.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if config.RestartTimer != nil {
		switch config.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if config.ShutdownThresholdPct != nil {
		switch config.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		config.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		config.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		config.ShutdownThresholdPct = value
	}
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) HasDataOrFilter() bool {
	return state.MaxPrefixes != nil ||
		state.RestartTimer != nil ||
		state.ShutdownThresholdPct != nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaxPrefixes != nil {
		switch state.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if state.RestartTimer != nil {
		switch state.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if state.ShutdownThresholdPct != nil {
		switch state.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		state.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		state.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		state.ShutdownThresholdPct = value
	}
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls struct {
	parent types.Entity
	Filter types.YFilter

	PrefixLimit Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit
}

func (l2VpnVpls *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls) HasDataOrFilter() bool {
	return l2VpnVpls.PrefixLimit.HasDataOrFilter()
}

func (l2VpnVpls *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls) GetFilter() types.YFilter {
	return l2VpnVpls.Filter
}

func (l2VpnVpls *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls) GetSegmentPath() string {
	return "l2vpn-vpls"
}

func (l2VpnVpls *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: l2VpnVpls.GetSegmentPath()}
	return entityPath
}

func (l2VpnVpls *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "prefix-limit" {
		return &l2VpnVpls.PrefixLimit
	}
	return nil
}

func (l2VpnVpls *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["prefix-limit"] = &l2VpnVpls.PrefixLimit

	return children
}

func (l2VpnVpls *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls) SetValue(value_path string, value string) {
}

func (l2VpnVpls *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls) GetBundleName() string {
	return "ydktest"
}

func (l2VpnVpls *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls) GetYangName() string {
	return "l2VpnVpls"
}

func (l2VpnVpls *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (l2VpnVpls *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (l2VpnVpls *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls) SetParent(parent types.Entity) {
	l2VpnVpls.parent = parent
}

func (l2VpnVpls *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls) GetParent() types.Entity {
	return l2VpnVpls.parent
}

func (l2VpnVpls *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config
	State  Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) HasDataOrFilter() bool {
	return prefixLimit.Config.HasDataOrFilter() ||
		prefixLimit.State.HasDataOrFilter()
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetFilter() types.YFilter {
	return prefixLimit.Filter
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetSegmentPath() string {
	return "prefix-limit"
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixLimit.GetSegmentPath()}
	return entityPath
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &prefixLimit.Config
	}
	if child_yang_name == "state" {
		return &prefixLimit.State
	}
	return nil
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &prefixLimit.Config
	children["state"] = &prefixLimit.State

	return children
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) SetValue(value_path string, value string) {
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetBundleName() string {
	return "ydktest"
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetYangName() string {
	return "prefixLimit"
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) SetParent(parent types.Entity) {
	prefixLimit.parent = parent
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetParent() types.Entity {
	return prefixLimit.parent
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetParentYangName() string {
	return "l2vpn-vpls"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) HasDataOrFilter() bool {
	return config.MaxPrefixes != nil ||
		config.RestartTimer != nil ||
		config.ShutdownThresholdPct != nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaxPrefixes != nil {
		switch config.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if config.RestartTimer != nil {
		switch config.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if config.ShutdownThresholdPct != nil {
		switch config.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		config.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		config.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		config.ShutdownThresholdPct = value
	}
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) HasDataOrFilter() bool {
	return state.MaxPrefixes != nil ||
		state.RestartTimer != nil ||
		state.ShutdownThresholdPct != nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaxPrefixes != nil {
		switch state.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if state.RestartTimer != nil {
		switch state.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if state.ShutdownThresholdPct != nil {
		switch state.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		state.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		state.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		state.ShutdownThresholdPct = value
	}
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn struct {
	parent types.Entity
	Filter types.YFilter

	PrefixLimit Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit
}

func (l2VpnEvpn *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn) HasDataOrFilter() bool {
	return l2VpnEvpn.PrefixLimit.HasDataOrFilter()
}

func (l2VpnEvpn *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn) GetFilter() types.YFilter {
	return l2VpnEvpn.Filter
}

func (l2VpnEvpn *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn) GetSegmentPath() string {
	return "l2vpn-evpn"
}

func (l2VpnEvpn *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: l2VpnEvpn.GetSegmentPath()}
	return entityPath
}

func (l2VpnEvpn *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "prefix-limit" {
		return &l2VpnEvpn.PrefixLimit
	}
	return nil
}

func (l2VpnEvpn *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["prefix-limit"] = &l2VpnEvpn.PrefixLimit

	return children
}

func (l2VpnEvpn *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn) SetValue(value_path string, value string) {
}

func (l2VpnEvpn *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn) GetBundleName() string {
	return "ydktest"
}

func (l2VpnEvpn *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn) GetYangName() string {
	return "l2VpnEvpn"
}

func (l2VpnEvpn *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (l2VpnEvpn *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (l2VpnEvpn *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn) SetParent(parent types.Entity) {
	l2VpnEvpn.parent = parent
}

func (l2VpnEvpn *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn) GetParent() types.Entity {
	return l2VpnEvpn.parent
}

func (l2VpnEvpn *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config
	State  Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) HasDataOrFilter() bool {
	return prefixLimit.Config.HasDataOrFilter() ||
		prefixLimit.State.HasDataOrFilter()
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetFilter() types.YFilter {
	return prefixLimit.Filter
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetSegmentPath() string {
	return "prefix-limit"
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixLimit.GetSegmentPath()}
	return entityPath
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &prefixLimit.Config
	}
	if child_yang_name == "state" {
		return &prefixLimit.State
	}
	return nil
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &prefixLimit.Config
	children["state"] = &prefixLimit.State

	return children
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) SetValue(value_path string, value string) {
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetBundleName() string {
	return "ydktest"
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetYangName() string {
	return "prefixLimit"
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) SetParent(parent types.Entity) {
	prefixLimit.parent = parent
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetParent() types.Entity {
	return prefixLimit.parent
}

func (prefixLimit *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetParentYangName() string {
	return "l2vpn-evpn"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) HasDataOrFilter() bool {
	return config.MaxPrefixes != nil ||
		config.RestartTimer != nil ||
		config.ShutdownThresholdPct != nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaxPrefixes != nil {
		switch config.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if config.RestartTimer != nil {
		switch config.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if config.ShutdownThresholdPct != nil {
		switch config.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		config.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		config.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		config.ShutdownThresholdPct = value
	}
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) HasDataOrFilter() bool {
	return state.MaxPrefixes != nil ||
		state.RestartTimer != nil ||
		state.ShutdownThresholdPct != nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaxPrefixes != nil {
		switch state.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if state.RestartTimer != nil {
		switch state.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if state.ShutdownThresholdPct != nil {
		switch state.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		state.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		state.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		state.ShutdownThresholdPct = value
	}
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Global_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_ApplyPolicy
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_ApplyPolicy struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Global_ApplyPolicy_Config
	State  Bgp_Global_ApplyPolicy_State
}

func (applyPolicy *Bgp_Global_ApplyPolicy) HasDataOrFilter() bool {
	return applyPolicy.Config.HasDataOrFilter() ||
		applyPolicy.State.HasDataOrFilter()
}

func (applyPolicy *Bgp_Global_ApplyPolicy) GetFilter() types.YFilter {
	return applyPolicy.Filter
}

func (applyPolicy *Bgp_Global_ApplyPolicy) GetSegmentPath() string {
	return "apply-policy"
}

func (applyPolicy *Bgp_Global_ApplyPolicy) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: applyPolicy.GetSegmentPath()}
	return entityPath
}

func (applyPolicy *Bgp_Global_ApplyPolicy) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &applyPolicy.Config
	}
	if child_yang_name == "state" {
		return &applyPolicy.State
	}
	return nil
}

func (applyPolicy *Bgp_Global_ApplyPolicy) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &applyPolicy.Config
	children["state"] = &applyPolicy.State

	return children
}

func (applyPolicy *Bgp_Global_ApplyPolicy) SetValue(value_path string, value string) {
}

func (applyPolicy *Bgp_Global_ApplyPolicy) GetBundleName() string {
	return "ydktest"
}

func (applyPolicy *Bgp_Global_ApplyPolicy) GetYangName() string {
	return "applyPolicy"
}

func (applyPolicy *Bgp_Global_ApplyPolicy) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (applyPolicy *Bgp_Global_ApplyPolicy) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (applyPolicy *Bgp_Global_ApplyPolicy) SetParent(parent types.Entity) {
	applyPolicy.parent = parent
}

func (applyPolicy *Bgp_Global_ApplyPolicy) GetParent() types.Entity {
	return applyPolicy.parent
}

func (applyPolicy *Bgp_Global_ApplyPolicy) GetParentYangName() string {
	return "global"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_ApplyPolicy_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_ApplyPolicy_Config struct {
	parent types.Entity
	Filter types.YFilter

	DefaultExportPolicy interface{} // enumeration
	DefaultImportPolicy interface{} // enumeration
	ExportPolicy        []interface{}
	ImportPolicy        []interface{}
}

func (config *Bgp_Global_ApplyPolicy_Config) HasDataOrFilter() bool {
	for _, leaf := range config.ExportPolicy {
		if leaf != nil {
			return true
		}
	}
	for _, leaf := range config.ImportPolicy {
		if leaf != nil {
			return true
		}
	}
	return config.DefaultExportPolicy != nil ||
		config.DefaultImportPolicy != nil
}

func (config *Bgp_Global_ApplyPolicy_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Global_ApplyPolicy_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Global_ApplyPolicy_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.DefaultExportPolicy != nil {
		switch config.DefaultExportPolicy.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.DefaultExportPolicy.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.DefaultExportPolicy)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "default-export-policy", Data: leafData})
		}
	}

	if config.DefaultImportPolicy != nil {
		switch config.DefaultImportPolicy.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.DefaultImportPolicy.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.DefaultImportPolicy)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "default-import-policy", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Global_ApplyPolicy_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Global_ApplyPolicy_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Global_ApplyPolicy_Config) SetValue(value_path string, value string) {
	if value_path == "default-export-policy" {
		config.DefaultExportPolicy = value
	}
	if value_path == "default-import-policy" {
		config.DefaultImportPolicy = value
	}
	if value_path == "export-policy" {
		config.ExportPolicy = append(config.ExportPolicy, value)
	}
	if value_path == "import-policy" {
		config.ImportPolicy = append(config.ImportPolicy, value)
	}
}

func (config *Bgp_Global_ApplyPolicy_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Global_ApplyPolicy_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Global_ApplyPolicy_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Global_ApplyPolicy_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Global_ApplyPolicy_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Global_ApplyPolicy_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Global_ApplyPolicy_Config) GetParentYangName() string {
	return "apply-policy"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Global_ApplyPolicy_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Global_ApplyPolicy_State struct {
	parent types.Entity
	Filter types.YFilter

	DefaultExportPolicy interface{} // enumeration
	DefaultImportPolicy interface{} // enumeration
	ExportPolicy        []interface{}
	ImportPolicy        []interface{}
}

func (state *Bgp_Global_ApplyPolicy_State) HasDataOrFilter() bool {
	for _, leaf := range state.ExportPolicy {
		if leaf != nil {
			return true
		}
	}
	for _, leaf := range state.ImportPolicy {
		if leaf != nil {
			return true
		}
	}
	return state.DefaultExportPolicy != nil ||
		state.DefaultImportPolicy != nil
}

func (state *Bgp_Global_ApplyPolicy_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Global_ApplyPolicy_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Global_ApplyPolicy_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.DefaultExportPolicy != nil {
		switch state.DefaultExportPolicy.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.DefaultExportPolicy.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.DefaultExportPolicy)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "default-export-policy", Data: leafData})
		}
	}

	if state.DefaultImportPolicy != nil {
		switch state.DefaultImportPolicy.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.DefaultImportPolicy.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.DefaultImportPolicy)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "default-import-policy", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Global_ApplyPolicy_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Global_ApplyPolicy_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Global_ApplyPolicy_State) SetValue(value_path string, value string) {
	if value_path == "default-export-policy" {
		state.DefaultExportPolicy = value
	}
	if value_path == "default-import-policy" {
		state.DefaultImportPolicy = value
	}
	if value_path == "export-policy" {
		state.ExportPolicy = append(state.ExportPolicy, value)
	}
	if value_path == "import-policy" {
		state.ImportPolicy = append(state.ImportPolicy, value)
	}
}

func (state *Bgp_Global_ApplyPolicy_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Global_ApplyPolicy_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Global_ApplyPolicy_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Global_ApplyPolicy_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Global_ApplyPolicy_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Global_ApplyPolicy_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Global_ApplyPolicy_State) GetParentYangName() string {
	return "apply-policy"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors struct {
	parent types.Entity
	Filter types.YFilter

	Neighbor []Bgp_Neighbors_Neighbor
}

func (neighbors *Bgp_Neighbors) HasDataOrFilter() bool {
	for _, child := range neighbors.Neighbor {
		if child.HasDataOrFilter() {
			return true
		}
	}
	return false
}

func (neighbors *Bgp_Neighbors) GetFilter() types.YFilter {
	return neighbors.Filter
}

func (neighbors *Bgp_Neighbors) GetSegmentPath() string {
	return "neighbors"
}

func (neighbors *Bgp_Neighbors) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: neighbors.GetSegmentPath()}
	return entityPath
}

func (neighbors *Bgp_Neighbors) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "neighbor" {
		for _, c := range neighbors.Neighbor {
			if neighbors.GetSegmentPath() == segment_path {
				return &c
			}
		}
		child := Bgp_Neighbors_Neighbor{}
		neighbors.Neighbor = append(neighbors.Neighbor, child)
		return &neighbors.Neighbor[len(neighbors.Neighbor)-1]
	}
	return nil
}

func (neighbors *Bgp_Neighbors) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	for i := range neighbors.Neighbor {
		children[neighbors.Neighbor[i].GetSegmentPath()] = &neighbors.Neighbor[i]
	}

	return children
}

func (neighbors *Bgp_Neighbors) SetValue(value_path string, value string) {
}

func (neighbors *Bgp_Neighbors) GetBundleName() string {
	return "ydktest"
}

func (neighbors *Bgp_Neighbors) GetYangName() string {
	return "neighbors"
}

func (neighbors *Bgp_Neighbors) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (neighbors *Bgp_Neighbors) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (neighbors *Bgp_Neighbors) SetParent(parent types.Entity) {
	neighbors.parent = parent
}

func (neighbors *Bgp_Neighbors) GetParent() types.Entity {
	return neighbors.parent
}

func (neighbors *Bgp_Neighbors) GetParentYangName() string {
	return "bgp"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor struct {
	parent types.Entity
	Filter types.YFilter

	NeighborAddress  interface{} // str
	AddPaths         Bgp_Neighbors_Neighbor_AddPaths
	AfiSafis         Bgp_Neighbors_Neighbor_AfiSafis
	ApplyPolicy      Bgp_Neighbors_Neighbor_ApplyPolicy
	AsPathOptions    Bgp_Neighbors_Neighbor_AsPathOptions
	Config           Bgp_Neighbors_Neighbor_Config
	EbgpMultihop     Bgp_Neighbors_Neighbor_EbgpMultihop
	ErrorHandling    Bgp_Neighbors_Neighbor_ErrorHandling
	GracefulRestart  Bgp_Neighbors_Neighbor_GracefulRestart
	LoggingOptions   Bgp_Neighbors_Neighbor_LoggingOptions
	RouteReflector   Bgp_Neighbors_Neighbor_RouteReflector
	State            Bgp_Neighbors_Neighbor_State
	Timers           Bgp_Neighbors_Neighbor_Timers
	Transport        Bgp_Neighbors_Neighbor_Transport
	UseMultiplePaths Bgp_Neighbors_Neighbor_UseMultiplePaths
}

func (neighbor *Bgp_Neighbors_Neighbor) HasDataOrFilter() bool {
	return neighbor.NeighborAddress != nil ||
		neighbor.AddPaths.HasDataOrFilter() ||
		neighbor.AfiSafis.HasDataOrFilter() ||
		neighbor.ApplyPolicy.HasDataOrFilter() ||
		neighbor.AsPathOptions.HasDataOrFilter() ||
		neighbor.Config.HasDataOrFilter() ||
		neighbor.EbgpMultihop.HasDataOrFilter() ||
		neighbor.ErrorHandling.HasDataOrFilter() ||
		neighbor.GracefulRestart.HasDataOrFilter() ||
		neighbor.LoggingOptions.HasDataOrFilter() ||
		neighbor.RouteReflector.HasDataOrFilter() ||
		neighbor.State.HasDataOrFilter() ||
		neighbor.Timers.HasDataOrFilter() ||
		neighbor.Transport.HasDataOrFilter() ||
		neighbor.UseMultiplePaths.HasDataOrFilter()
}

func (neighbor *Bgp_Neighbors_Neighbor) GetFilter() types.YFilter {
	return neighbor.Filter
}

func (neighbor *Bgp_Neighbors_Neighbor) GetSegmentPath() string {
	return "neighbor" + "[neighbor-address=\"" + fmt.Sprintf("%v", neighbor.NeighborAddress) + "\"]"
}

func (neighbor *Bgp_Neighbors_Neighbor) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: neighbor.GetSegmentPath()}
	var leafData types.LeafData

	if neighbor.NeighborAddress != nil {
		switch neighbor.NeighborAddress.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: neighbor.NeighborAddress.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", neighbor.NeighborAddress)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "neighbor-address", Data: leafData})
		}
	}

	return entityPath
}

func (neighbor *Bgp_Neighbors_Neighbor) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "add-paths" {
		return &neighbor.AddPaths
	}
	if child_yang_name == "afi-safis" {
		return &neighbor.AfiSafis
	}
	if child_yang_name == "apply-policy" {
		return &neighbor.ApplyPolicy
	}
	if child_yang_name == "as-path-options" {
		return &neighbor.AsPathOptions
	}
	if child_yang_name == "config" {
		return &neighbor.Config
	}
	if child_yang_name == "ebgp-multihop" {
		return &neighbor.EbgpMultihop
	}
	if child_yang_name == "error-handling" {
		return &neighbor.ErrorHandling
	}
	if child_yang_name == "graceful-restart" {
		return &neighbor.GracefulRestart
	}
	if child_yang_name == "logging-options" {
		return &neighbor.LoggingOptions
	}
	if child_yang_name == "route-reflector" {
		return &neighbor.RouteReflector
	}
	if child_yang_name == "state" {
		return &neighbor.State
	}
	if child_yang_name == "timers" {
		return &neighbor.Timers
	}
	if child_yang_name == "transport" {
		return &neighbor.Transport
	}
	if child_yang_name == "use-multiple-paths" {
		return &neighbor.UseMultiplePaths
	}
	return nil
}

func (neighbor *Bgp_Neighbors_Neighbor) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["add-paths"] = &neighbor.AddPaths
	children["afi-safis"] = &neighbor.AfiSafis
	children["apply-policy"] = &neighbor.ApplyPolicy
	children["as-path-options"] = &neighbor.AsPathOptions
	children["config"] = &neighbor.Config
	children["ebgp-multihop"] = &neighbor.EbgpMultihop
	children["error-handling"] = &neighbor.ErrorHandling
	children["graceful-restart"] = &neighbor.GracefulRestart
	children["logging-options"] = &neighbor.LoggingOptions
	children["route-reflector"] = &neighbor.RouteReflector
	children["state"] = &neighbor.State
	children["timers"] = &neighbor.Timers
	children["transport"] = &neighbor.Transport
	children["use-multiple-paths"] = &neighbor.UseMultiplePaths

	return children
}

func (neighbor *Bgp_Neighbors_Neighbor) SetValue(value_path string, value string) {
	if value_path == "neighbor-address" {
		neighbor.NeighborAddress = value
	}
}

func (neighbor *Bgp_Neighbors_Neighbor) GetBundleName() string {
	return "ydktest"
}

func (neighbor *Bgp_Neighbors_Neighbor) GetYangName() string {
	return "neighbor"
}

func (neighbor *Bgp_Neighbors_Neighbor) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (neighbor *Bgp_Neighbors_Neighbor) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (neighbor *Bgp_Neighbors_Neighbor) SetParent(parent types.Entity) {
	neighbor.parent = parent
}

func (neighbor *Bgp_Neighbors_Neighbor) GetParent() types.Entity {
	return neighbor.parent
}

func (neighbor *Bgp_Neighbors_Neighbor) GetParentYangName() string {
	return "neighbors"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_Config struct {
	parent types.Entity
	Filter types.YFilter

	AuthPassword     interface{} // str
	Description      interface{} // str
	Enabled          interface{} // boolean
	LocalAs          interface{} // uint32
	NeighborAddress  interface{} // str
	PeerAs           interface{} // uint32
	PeerGroup        interface{} // str
	PeerType         interface{} // enumeration
	RemovePrivateAs  interface{} // identityref
	RouteFlapDamping interface{} // boolean
	SendCommunity    interface{} // enumeration
}

func (config *Bgp_Neighbors_Neighbor_Config) HasDataOrFilter() bool {
	return config.AuthPassword != nil ||
		config.Description != nil ||
		config.Enabled != nil ||
		config.LocalAs != nil ||
		config.NeighborAddress != nil ||
		config.PeerAs != nil ||
		config.PeerGroup != nil ||
		config.PeerType != nil ||
		config.RemovePrivateAs != nil ||
		config.RouteFlapDamping != nil ||
		config.SendCommunity != nil
}

func (config *Bgp_Neighbors_Neighbor_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Neighbors_Neighbor_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.AuthPassword != nil {
		switch config.AuthPassword.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.AuthPassword.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.AuthPassword)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "auth-password", Data: leafData})
		}
	}

	if config.Description != nil {
		switch config.Description.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.Description.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.Description)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "description", Data: leafData})
		}
	}

	if config.Enabled != nil {
		switch config.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	if config.LocalAs != nil {
		switch config.LocalAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.LocalAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.LocalAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "local-as", Data: leafData})
		}
	}

	if config.NeighborAddress != nil {
		switch config.NeighborAddress.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.NeighborAddress.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.NeighborAddress)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "neighbor-address", Data: leafData})
		}
	}

	if config.PeerAs != nil {
		switch config.PeerAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.PeerAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.PeerAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "peer-as", Data: leafData})
		}
	}

	if config.PeerGroup != nil {
		switch config.PeerGroup.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.PeerGroup.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.PeerGroup)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "peer-group", Data: leafData})
		}
	}

	if config.PeerType != nil {
		switch config.PeerType.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.PeerType.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.PeerType)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "peer-type", Data: leafData})
		}
	}

	if config.RemovePrivateAs != nil {
		switch config.RemovePrivateAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RemovePrivateAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RemovePrivateAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "remove-private-as", Data: leafData})
		}
	}

	if config.RouteFlapDamping != nil {
		switch config.RouteFlapDamping.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RouteFlapDamping.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RouteFlapDamping)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "route-flap-damping", Data: leafData})
		}
	}

	if config.SendCommunity != nil {
		switch config.SendCommunity.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.SendCommunity.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.SendCommunity)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "send-community", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Neighbors_Neighbor_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Neighbors_Neighbor_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Neighbors_Neighbor_Config) SetValue(value_path string, value string) {
	if value_path == "auth-password" {
		config.AuthPassword = value
	}
	if value_path == "description" {
		config.Description = value
	}
	if value_path == "enabled" {
		config.Enabled = value
	}
	if value_path == "local-as" {
		config.LocalAs = value
	}
	if value_path == "neighbor-address" {
		config.NeighborAddress = value
	}
	if value_path == "peer-as" {
		config.PeerAs = value
	}
	if value_path == "peer-group" {
		config.PeerGroup = value
	}
	if value_path == "peer-type" {
		config.PeerType = value
	}
	if value_path == "remove-private-as" {
		config.RemovePrivateAs = value
	}
	if value_path == "route-flap-damping" {
		config.RouteFlapDamping = value
	}
	if value_path == "send-community" {
		config.SendCommunity = value
	}
}

func (config *Bgp_Neighbors_Neighbor_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Neighbors_Neighbor_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Neighbors_Neighbor_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Neighbors_Neighbor_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Neighbors_Neighbor_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Neighbors_Neighbor_Config) GetParentYangName() string {
	return "neighbor"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_State struct {
	parent types.Entity
	Filter types.YFilter

	AuthPassword           interface{} // str
	Description            interface{} // str
	Enabled                interface{} // boolean
	EstablishedTransitions interface{} // uint64
	LastEstablished        interface{} // uint64
	LocalAs                interface{} // uint32
	NeighborAddress        interface{} // str
	PeerAs                 interface{} // uint32
	PeerGroup              interface{} // str
	PeerType               interface{} // enumeration
	RemovePrivateAs        interface{} // identityref
	RouteFlapDamping       interface{} // boolean
	SendCommunity          interface{} // enumeration
	SessionState           interface{} // enumeration
	SupportedCapabilities  []interface{}
	Messages               Bgp_Neighbors_Neighbor_State_Messages
	Queues                 Bgp_Neighbors_Neighbor_State_Queues
}

func (state *Bgp_Neighbors_Neighbor_State) HasDataOrFilter() bool {
	for _, leaf := range state.SupportedCapabilities {
		if leaf != nil {
			return true
		}
	}
	return state.AuthPassword != nil ||
		state.Description != nil ||
		state.Enabled != nil ||
		state.EstablishedTransitions != nil ||
		state.LastEstablished != nil ||
		state.LocalAs != nil ||
		state.NeighborAddress != nil ||
		state.PeerAs != nil ||
		state.PeerGroup != nil ||
		state.PeerType != nil ||
		state.RemovePrivateAs != nil ||
		state.RouteFlapDamping != nil ||
		state.SendCommunity != nil ||
		state.SessionState != nil ||
		state.Messages.HasDataOrFilter() ||
		state.Queues.HasDataOrFilter()
}

func (state *Bgp_Neighbors_Neighbor_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Neighbors_Neighbor_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.AuthPassword != nil {
		switch state.AuthPassword.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.AuthPassword.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.AuthPassword)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "auth-password", Data: leafData})
		}
	}

	if state.Description != nil {
		switch state.Description.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.Description.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.Description)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "description", Data: leafData})
		}
	}

	if state.Enabled != nil {
		switch state.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	if state.EstablishedTransitions != nil {
		switch state.EstablishedTransitions.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.EstablishedTransitions.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.EstablishedTransitions)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "established-transitions", Data: leafData})
		}
	}

	if state.LastEstablished != nil {
		switch state.LastEstablished.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.LastEstablished.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.LastEstablished)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "last-established", Data: leafData})
		}
	}

	if state.LocalAs != nil {
		switch state.LocalAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.LocalAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.LocalAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "local-as", Data: leafData})
		}
	}

	if state.NeighborAddress != nil {
		switch state.NeighborAddress.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.NeighborAddress.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.NeighborAddress)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "neighbor-address", Data: leafData})
		}
	}

	if state.PeerAs != nil {
		switch state.PeerAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.PeerAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.PeerAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "peer-as", Data: leafData})
		}
	}

	if state.PeerGroup != nil {
		switch state.PeerGroup.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.PeerGroup.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.PeerGroup)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "peer-group", Data: leafData})
		}
	}

	if state.PeerType != nil {
		switch state.PeerType.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.PeerType.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.PeerType)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "peer-type", Data: leafData})
		}
	}

	if state.RemovePrivateAs != nil {
		switch state.RemovePrivateAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RemovePrivateAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RemovePrivateAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "remove-private-as", Data: leafData})
		}
	}

	if state.RouteFlapDamping != nil {
		switch state.RouteFlapDamping.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RouteFlapDamping.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RouteFlapDamping)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "route-flap-damping", Data: leafData})
		}
	}

	if state.SendCommunity != nil {
		switch state.SendCommunity.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.SendCommunity.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.SendCommunity)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "send-community", Data: leafData})
		}
	}

	if state.SessionState != nil {
		switch state.SessionState.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.SessionState.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.SessionState)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "session-state", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Neighbors_Neighbor_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "messages" {
		return &state.Messages
	}
	if child_yang_name == "queues" {
		return &state.Queues
	}
	return nil
}

func (state *Bgp_Neighbors_Neighbor_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["messages"] = &state.Messages
	children["queues"] = &state.Queues

	return children
}

func (state *Bgp_Neighbors_Neighbor_State) SetValue(value_path string, value string) {
	if value_path == "auth-password" {
		state.AuthPassword = value
	}
	if value_path == "description" {
		state.Description = value
	}
	if value_path == "enabled" {
		state.Enabled = value
	}
	if value_path == "established-transitions" {
		state.EstablishedTransitions = value
	}
	if value_path == "last-established" {
		state.LastEstablished = value
	}
	if value_path == "local-as" {
		state.LocalAs = value
	}
	if value_path == "neighbor-address" {
		state.NeighborAddress = value
	}
	if value_path == "peer-as" {
		state.PeerAs = value
	}
	if value_path == "peer-group" {
		state.PeerGroup = value
	}
	if value_path == "peer-type" {
		state.PeerType = value
	}
	if value_path == "remove-private-as" {
		state.RemovePrivateAs = value
	}
	if value_path == "route-flap-damping" {
		state.RouteFlapDamping = value
	}
	if value_path == "send-community" {
		state.SendCommunity = value
	}
	if value_path == "session-state" {
		state.SessionState = value
	}
	if value_path == "supported-capabilities" {
		state.SupportedCapabilities = append(state.SupportedCapabilities, value)
	}
}

func (state *Bgp_Neighbors_Neighbor_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Neighbors_Neighbor_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Neighbors_Neighbor_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Neighbors_Neighbor_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Neighbors_Neighbor_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Neighbors_Neighbor_State) GetParentYangName() string {
	return "neighbor"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_State_Messages
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_State_Messages struct {
	parent types.Entity
	Filter types.YFilter

	Received Bgp_Neighbors_Neighbor_State_Messages_Received
	Sent     Bgp_Neighbors_Neighbor_State_Messages_Sent
}

func (messages *Bgp_Neighbors_Neighbor_State_Messages) HasDataOrFilter() bool {
	return messages.Received.HasDataOrFilter() ||
		messages.Sent.HasDataOrFilter()
}

func (messages *Bgp_Neighbors_Neighbor_State_Messages) GetFilter() types.YFilter {
	return messages.Filter
}

func (messages *Bgp_Neighbors_Neighbor_State_Messages) GetSegmentPath() string {
	return "messages"
}

func (messages *Bgp_Neighbors_Neighbor_State_Messages) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: messages.GetSegmentPath()}
	return entityPath
}

func (messages *Bgp_Neighbors_Neighbor_State_Messages) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "received" {
		return &messages.Received
	}
	if child_yang_name == "sent" {
		return &messages.Sent
	}
	return nil
}

func (messages *Bgp_Neighbors_Neighbor_State_Messages) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["received"] = &messages.Received
	children["sent"] = &messages.Sent

	return children
}

func (messages *Bgp_Neighbors_Neighbor_State_Messages) SetValue(value_path string, value string) {
}

func (messages *Bgp_Neighbors_Neighbor_State_Messages) GetBundleName() string {
	return "ydktest"
}

func (messages *Bgp_Neighbors_Neighbor_State_Messages) GetYangName() string {
	return "messages"
}

func (messages *Bgp_Neighbors_Neighbor_State_Messages) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (messages *Bgp_Neighbors_Neighbor_State_Messages) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (messages *Bgp_Neighbors_Neighbor_State_Messages) SetParent(parent types.Entity) {
	messages.parent = parent
}

func (messages *Bgp_Neighbors_Neighbor_State_Messages) GetParent() types.Entity {
	return messages.parent
}

func (messages *Bgp_Neighbors_Neighbor_State_Messages) GetParentYangName() string {
	return "state"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_State_Messages_Sent
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_State_Messages_Sent struct {
	parent types.Entity
	Filter types.YFilter

	Notification interface{} // uint64
	Update       interface{} // uint64
}

func (sent *Bgp_Neighbors_Neighbor_State_Messages_Sent) HasDataOrFilter() bool {
	return sent.Notification != nil ||
		sent.Update != nil
}

func (sent *Bgp_Neighbors_Neighbor_State_Messages_Sent) GetFilter() types.YFilter {
	return sent.Filter
}

func (sent *Bgp_Neighbors_Neighbor_State_Messages_Sent) GetSegmentPath() string {
	return "sent"
}

func (sent *Bgp_Neighbors_Neighbor_State_Messages_Sent) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: sent.GetSegmentPath()}
	var leafData types.LeafData

	if sent.Notification != nil {
		switch sent.Notification.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: sent.Notification.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", sent.Notification)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "NOTIFICATION", Data: leafData})
		}
	}

	if sent.Update != nil {
		switch sent.Update.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: sent.Update.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", sent.Update)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "UPDATE", Data: leafData})
		}
	}

	return entityPath
}

func (sent *Bgp_Neighbors_Neighbor_State_Messages_Sent) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (sent *Bgp_Neighbors_Neighbor_State_Messages_Sent) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (sent *Bgp_Neighbors_Neighbor_State_Messages_Sent) SetValue(value_path string, value string) {
	if value_path == "NOTIFICATION" {
		sent.Notification = value
	}
	if value_path == "UPDATE" {
		sent.Update = value
	}
}

func (sent *Bgp_Neighbors_Neighbor_State_Messages_Sent) GetBundleName() string {
	return "ydktest"
}

func (sent *Bgp_Neighbors_Neighbor_State_Messages_Sent) GetYangName() string {
	return "sent"
}

func (sent *Bgp_Neighbors_Neighbor_State_Messages_Sent) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (sent *Bgp_Neighbors_Neighbor_State_Messages_Sent) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (sent *Bgp_Neighbors_Neighbor_State_Messages_Sent) SetParent(parent types.Entity) {
	sent.parent = parent
}

func (sent *Bgp_Neighbors_Neighbor_State_Messages_Sent) GetParent() types.Entity {
	return sent.parent
}

func (sent *Bgp_Neighbors_Neighbor_State_Messages_Sent) GetParentYangName() string {
	return "messages"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_State_Messages_Received
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_State_Messages_Received struct {
	parent types.Entity
	Filter types.YFilter

	Notification interface{} // uint64
	Update       interface{} // uint64
}

func (received *Bgp_Neighbors_Neighbor_State_Messages_Received) HasDataOrFilter() bool {
	return received.Notification != nil ||
		received.Update != nil
}

func (received *Bgp_Neighbors_Neighbor_State_Messages_Received) GetFilter() types.YFilter {
	return received.Filter
}

func (received *Bgp_Neighbors_Neighbor_State_Messages_Received) GetSegmentPath() string {
	return "received"
}

func (received *Bgp_Neighbors_Neighbor_State_Messages_Received) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: received.GetSegmentPath()}
	var leafData types.LeafData

	if received.Notification != nil {
		switch received.Notification.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: received.Notification.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", received.Notification)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "NOTIFICATION", Data: leafData})
		}
	}

	if received.Update != nil {
		switch received.Update.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: received.Update.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", received.Update)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "UPDATE", Data: leafData})
		}
	}

	return entityPath
}

func (received *Bgp_Neighbors_Neighbor_State_Messages_Received) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (received *Bgp_Neighbors_Neighbor_State_Messages_Received) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (received *Bgp_Neighbors_Neighbor_State_Messages_Received) SetValue(value_path string, value string) {
	if value_path == "NOTIFICATION" {
		received.Notification = value
	}
	if value_path == "UPDATE" {
		received.Update = value
	}
}

func (received *Bgp_Neighbors_Neighbor_State_Messages_Received) GetBundleName() string {
	return "ydktest"
}

func (received *Bgp_Neighbors_Neighbor_State_Messages_Received) GetYangName() string {
	return "received"
}

func (received *Bgp_Neighbors_Neighbor_State_Messages_Received) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (received *Bgp_Neighbors_Neighbor_State_Messages_Received) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (received *Bgp_Neighbors_Neighbor_State_Messages_Received) SetParent(parent types.Entity) {
	received.parent = parent
}

func (received *Bgp_Neighbors_Neighbor_State_Messages_Received) GetParent() types.Entity {
	return received.parent
}

func (received *Bgp_Neighbors_Neighbor_State_Messages_Received) GetParentYangName() string {
	return "messages"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_State_Queues
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_State_Queues struct {
	parent types.Entity
	Filter types.YFilter

	Input  interface{} // uint32
	Output interface{} // uint32
}

func (queues *Bgp_Neighbors_Neighbor_State_Queues) HasDataOrFilter() bool {
	return queues.Input != nil ||
		queues.Output != nil
}

func (queues *Bgp_Neighbors_Neighbor_State_Queues) GetFilter() types.YFilter {
	return queues.Filter
}

func (queues *Bgp_Neighbors_Neighbor_State_Queues) GetSegmentPath() string {
	return "queues"
}

func (queues *Bgp_Neighbors_Neighbor_State_Queues) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: queues.GetSegmentPath()}
	var leafData types.LeafData

	if queues.Input != nil {
		switch queues.Input.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: queues.Input.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", queues.Input)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "input", Data: leafData})
		}
	}

	if queues.Output != nil {
		switch queues.Output.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: queues.Output.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", queues.Output)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "output", Data: leafData})
		}
	}

	return entityPath
}

func (queues *Bgp_Neighbors_Neighbor_State_Queues) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (queues *Bgp_Neighbors_Neighbor_State_Queues) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (queues *Bgp_Neighbors_Neighbor_State_Queues) SetValue(value_path string, value string) {
	if value_path == "input" {
		queues.Input = value
	}
	if value_path == "output" {
		queues.Output = value
	}
}

func (queues *Bgp_Neighbors_Neighbor_State_Queues) GetBundleName() string {
	return "ydktest"
}

func (queues *Bgp_Neighbors_Neighbor_State_Queues) GetYangName() string {
	return "queues"
}

func (queues *Bgp_Neighbors_Neighbor_State_Queues) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (queues *Bgp_Neighbors_Neighbor_State_Queues) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (queues *Bgp_Neighbors_Neighbor_State_Queues) SetParent(parent types.Entity) {
	queues.parent = parent
}

func (queues *Bgp_Neighbors_Neighbor_State_Queues) GetParent() types.Entity {
	return queues.parent
}

func (queues *Bgp_Neighbors_Neighbor_State_Queues) GetParentYangName() string {
	return "state"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_Timers
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_Timers struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Neighbors_Neighbor_Timers_Config
	State  Bgp_Neighbors_Neighbor_Timers_State
}

func (timers *Bgp_Neighbors_Neighbor_Timers) HasDataOrFilter() bool {
	return timers.Config.HasDataOrFilter() ||
		timers.State.HasDataOrFilter()
}

func (timers *Bgp_Neighbors_Neighbor_Timers) GetFilter() types.YFilter {
	return timers.Filter
}

func (timers *Bgp_Neighbors_Neighbor_Timers) GetSegmentPath() string {
	return "timers"
}

func (timers *Bgp_Neighbors_Neighbor_Timers) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: timers.GetSegmentPath()}
	return entityPath
}

func (timers *Bgp_Neighbors_Neighbor_Timers) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &timers.Config
	}
	if child_yang_name == "state" {
		return &timers.State
	}
	return nil
}

func (timers *Bgp_Neighbors_Neighbor_Timers) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &timers.Config
	children["state"] = &timers.State

	return children
}

func (timers *Bgp_Neighbors_Neighbor_Timers) SetValue(value_path string, value string) {
}

func (timers *Bgp_Neighbors_Neighbor_Timers) GetBundleName() string {
	return "ydktest"
}

func (timers *Bgp_Neighbors_Neighbor_Timers) GetYangName() string {
	return "timers"
}

func (timers *Bgp_Neighbors_Neighbor_Timers) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (timers *Bgp_Neighbors_Neighbor_Timers) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (timers *Bgp_Neighbors_Neighbor_Timers) SetParent(parent types.Entity) {
	timers.parent = parent
}

func (timers *Bgp_Neighbors_Neighbor_Timers) GetParent() types.Entity {
	return timers.parent
}

func (timers *Bgp_Neighbors_Neighbor_Timers) GetParentYangName() string {
	return "neighbor"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_Timers_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_Timers_Config struct {
	parent types.Entity
	Filter types.YFilter

	ConnectRetry                 interface{} // str
	HoldTime                     interface{} // str
	KeepaliveInterval            interface{} // str
	MinimumAdvertisementInterval interface{} // str
}

func (config *Bgp_Neighbors_Neighbor_Timers_Config) HasDataOrFilter() bool {
	return config.ConnectRetry != nil ||
		config.HoldTime != nil ||
		config.KeepaliveInterval != nil ||
		config.MinimumAdvertisementInterval != nil
}

func (config *Bgp_Neighbors_Neighbor_Timers_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Neighbors_Neighbor_Timers_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_Timers_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.ConnectRetry != nil {
		switch config.ConnectRetry.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ConnectRetry.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ConnectRetry)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "connect-retry", Data: leafData})
		}
	}

	if config.HoldTime != nil {
		switch config.HoldTime.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.HoldTime.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.HoldTime)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "hold-time", Data: leafData})
		}
	}

	if config.KeepaliveInterval != nil {
		switch config.KeepaliveInterval.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.KeepaliveInterval.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.KeepaliveInterval)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "keepalive-interval", Data: leafData})
		}
	}

	if config.MinimumAdvertisementInterval != nil {
		switch config.MinimumAdvertisementInterval.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MinimumAdvertisementInterval.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MinimumAdvertisementInterval)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "minimum-advertisement-interval", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Neighbors_Neighbor_Timers_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Neighbors_Neighbor_Timers_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Neighbors_Neighbor_Timers_Config) SetValue(value_path string, value string) {
	if value_path == "connect-retry" {
		config.ConnectRetry = value
	}
	if value_path == "hold-time" {
		config.HoldTime = value
	}
	if value_path == "keepalive-interval" {
		config.KeepaliveInterval = value
	}
	if value_path == "minimum-advertisement-interval" {
		config.MinimumAdvertisementInterval = value
	}
}

func (config *Bgp_Neighbors_Neighbor_Timers_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Neighbors_Neighbor_Timers_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_Timers_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Neighbors_Neighbor_Timers_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Neighbors_Neighbor_Timers_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Neighbors_Neighbor_Timers_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Neighbors_Neighbor_Timers_Config) GetParentYangName() string {
	return "timers"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_Timers_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_Timers_State struct {
	parent types.Entity
	Filter types.YFilter

	ConnectRetry                 interface{} // str
	HoldTime                     interface{} // str
	KeepaliveInterval            interface{} // str
	MinimumAdvertisementInterval interface{} // str
	NegotiatedHoldTime           interface{} // str
}

func (state *Bgp_Neighbors_Neighbor_Timers_State) HasDataOrFilter() bool {
	return state.ConnectRetry != nil ||
		state.HoldTime != nil ||
		state.KeepaliveInterval != nil ||
		state.MinimumAdvertisementInterval != nil ||
		state.NegotiatedHoldTime != nil
}

func (state *Bgp_Neighbors_Neighbor_Timers_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Neighbors_Neighbor_Timers_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_Timers_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.ConnectRetry != nil {
		switch state.ConnectRetry.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ConnectRetry.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ConnectRetry)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "connect-retry", Data: leafData})
		}
	}

	if state.HoldTime != nil {
		switch state.HoldTime.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.HoldTime.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.HoldTime)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "hold-time", Data: leafData})
		}
	}

	if state.KeepaliveInterval != nil {
		switch state.KeepaliveInterval.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.KeepaliveInterval.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.KeepaliveInterval)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "keepalive-interval", Data: leafData})
		}
	}

	if state.MinimumAdvertisementInterval != nil {
		switch state.MinimumAdvertisementInterval.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MinimumAdvertisementInterval.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MinimumAdvertisementInterval)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "minimum-advertisement-interval", Data: leafData})
		}
	}

	if state.NegotiatedHoldTime != nil {
		switch state.NegotiatedHoldTime.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.NegotiatedHoldTime.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.NegotiatedHoldTime)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "negotiated-hold-time", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Neighbors_Neighbor_Timers_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Neighbors_Neighbor_Timers_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Neighbors_Neighbor_Timers_State) SetValue(value_path string, value string) {
	if value_path == "connect-retry" {
		state.ConnectRetry = value
	}
	if value_path == "hold-time" {
		state.HoldTime = value
	}
	if value_path == "keepalive-interval" {
		state.KeepaliveInterval = value
	}
	if value_path == "minimum-advertisement-interval" {
		state.MinimumAdvertisementInterval = value
	}
	if value_path == "negotiated-hold-time" {
		state.NegotiatedHoldTime = value
	}
}

func (state *Bgp_Neighbors_Neighbor_Timers_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Neighbors_Neighbor_Timers_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_Timers_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Neighbors_Neighbor_Timers_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Neighbors_Neighbor_Timers_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Neighbors_Neighbor_Timers_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Neighbors_Neighbor_Timers_State) GetParentYangName() string {
	return "timers"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_Transport
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_Transport struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Neighbors_Neighbor_Transport_Config
	State  Bgp_Neighbors_Neighbor_Transport_State
}

func (transport *Bgp_Neighbors_Neighbor_Transport) HasDataOrFilter() bool {
	return transport.Config.HasDataOrFilter() ||
		transport.State.HasDataOrFilter()
}

func (transport *Bgp_Neighbors_Neighbor_Transport) GetFilter() types.YFilter {
	return transport.Filter
}

func (transport *Bgp_Neighbors_Neighbor_Transport) GetSegmentPath() string {
	return "transport"
}

func (transport *Bgp_Neighbors_Neighbor_Transport) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: transport.GetSegmentPath()}
	return entityPath
}

func (transport *Bgp_Neighbors_Neighbor_Transport) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &transport.Config
	}
	if child_yang_name == "state" {
		return &transport.State
	}
	return nil
}

func (transport *Bgp_Neighbors_Neighbor_Transport) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &transport.Config
	children["state"] = &transport.State

	return children
}

func (transport *Bgp_Neighbors_Neighbor_Transport) SetValue(value_path string, value string) {
}

func (transport *Bgp_Neighbors_Neighbor_Transport) GetBundleName() string {
	return "ydktest"
}

func (transport *Bgp_Neighbors_Neighbor_Transport) GetYangName() string {
	return "transport"
}

func (transport *Bgp_Neighbors_Neighbor_Transport) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (transport *Bgp_Neighbors_Neighbor_Transport) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (transport *Bgp_Neighbors_Neighbor_Transport) SetParent(parent types.Entity) {
	transport.parent = parent
}

func (transport *Bgp_Neighbors_Neighbor_Transport) GetParent() types.Entity {
	return transport.parent
}

func (transport *Bgp_Neighbors_Neighbor_Transport) GetParentYangName() string {
	return "neighbor"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_Transport_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_Transport_Config struct {
	parent types.Entity
	Filter types.YFilter

	LocalAddress interface{} // str
	MtuDiscovery interface{} // boolean
	PassiveMode  interface{} // boolean
	TcpMss       interface{} // uint16
}

func (config *Bgp_Neighbors_Neighbor_Transport_Config) HasDataOrFilter() bool {
	return config.LocalAddress != nil ||
		config.MtuDiscovery != nil ||
		config.PassiveMode != nil ||
		config.TcpMss != nil
}

func (config *Bgp_Neighbors_Neighbor_Transport_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Neighbors_Neighbor_Transport_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_Transport_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.LocalAddress != nil {
		switch config.LocalAddress.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.LocalAddress.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.LocalAddress)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "local-address", Data: leafData})
		}
	}

	if config.MtuDiscovery != nil {
		switch config.MtuDiscovery.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MtuDiscovery.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MtuDiscovery)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "mtu-discovery", Data: leafData})
		}
	}

	if config.PassiveMode != nil {
		switch config.PassiveMode.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.PassiveMode.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.PassiveMode)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "passive-mode", Data: leafData})
		}
	}

	if config.TcpMss != nil {
		switch config.TcpMss.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.TcpMss.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.TcpMss)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "tcp-mss", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Neighbors_Neighbor_Transport_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Neighbors_Neighbor_Transport_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Neighbors_Neighbor_Transport_Config) SetValue(value_path string, value string) {
	if value_path == "local-address" {
		config.LocalAddress = value
	}
	if value_path == "mtu-discovery" {
		config.MtuDiscovery = value
	}
	if value_path == "passive-mode" {
		config.PassiveMode = value
	}
	if value_path == "tcp-mss" {
		config.TcpMss = value
	}
}

func (config *Bgp_Neighbors_Neighbor_Transport_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Neighbors_Neighbor_Transport_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_Transport_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Neighbors_Neighbor_Transport_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Neighbors_Neighbor_Transport_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Neighbors_Neighbor_Transport_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Neighbors_Neighbor_Transport_Config) GetParentYangName() string {
	return "transport"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_Transport_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_Transport_State struct {
	parent types.Entity
	Filter types.YFilter

	LocalAddress  interface{} // str
	LocalPort     interface{} // uint16
	MtuDiscovery  interface{} // boolean
	PassiveMode   interface{} // boolean
	RemoteAddress interface{} // str
	RemotePort    interface{} // uint16
	TcpMss        interface{} // uint16
}

func (state *Bgp_Neighbors_Neighbor_Transport_State) HasDataOrFilter() bool {
	return state.LocalAddress != nil ||
		state.LocalPort != nil ||
		state.MtuDiscovery != nil ||
		state.PassiveMode != nil ||
		state.RemoteAddress != nil ||
		state.RemotePort != nil ||
		state.TcpMss != nil
}

func (state *Bgp_Neighbors_Neighbor_Transport_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Neighbors_Neighbor_Transport_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_Transport_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.LocalAddress != nil {
		switch state.LocalAddress.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.LocalAddress.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.LocalAddress)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "local-address", Data: leafData})
		}
	}

	if state.LocalPort != nil {
		switch state.LocalPort.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.LocalPort.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.LocalPort)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "local-port", Data: leafData})
		}
	}

	if state.MtuDiscovery != nil {
		switch state.MtuDiscovery.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MtuDiscovery.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MtuDiscovery)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "mtu-discovery", Data: leafData})
		}
	}

	if state.PassiveMode != nil {
		switch state.PassiveMode.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.PassiveMode.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.PassiveMode)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "passive-mode", Data: leafData})
		}
	}

	if state.RemoteAddress != nil {
		switch state.RemoteAddress.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RemoteAddress.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RemoteAddress)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "remote-address", Data: leafData})
		}
	}

	if state.RemotePort != nil {
		switch state.RemotePort.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RemotePort.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RemotePort)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "remote-port", Data: leafData})
		}
	}

	if state.TcpMss != nil {
		switch state.TcpMss.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.TcpMss.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.TcpMss)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "tcp-mss", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Neighbors_Neighbor_Transport_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Neighbors_Neighbor_Transport_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Neighbors_Neighbor_Transport_State) SetValue(value_path string, value string) {
	if value_path == "local-address" {
		state.LocalAddress = value
	}
	if value_path == "local-port" {
		state.LocalPort = value
	}
	if value_path == "mtu-discovery" {
		state.MtuDiscovery = value
	}
	if value_path == "passive-mode" {
		state.PassiveMode = value
	}
	if value_path == "remote-address" {
		state.RemoteAddress = value
	}
	if value_path == "remote-port" {
		state.RemotePort = value
	}
	if value_path == "tcp-mss" {
		state.TcpMss = value
	}
}

func (state *Bgp_Neighbors_Neighbor_Transport_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Neighbors_Neighbor_Transport_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_Transport_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Neighbors_Neighbor_Transport_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Neighbors_Neighbor_Transport_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Neighbors_Neighbor_Transport_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Neighbors_Neighbor_Transport_State) GetParentYangName() string {
	return "transport"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_ErrorHandling
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_ErrorHandling struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Neighbors_Neighbor_ErrorHandling_Config
	State  Bgp_Neighbors_Neighbor_ErrorHandling_State
}

func (errorHandling *Bgp_Neighbors_Neighbor_ErrorHandling) HasDataOrFilter() bool {
	return errorHandling.Config.HasDataOrFilter() ||
		errorHandling.State.HasDataOrFilter()
}

func (errorHandling *Bgp_Neighbors_Neighbor_ErrorHandling) GetFilter() types.YFilter {
	return errorHandling.Filter
}

func (errorHandling *Bgp_Neighbors_Neighbor_ErrorHandling) GetSegmentPath() string {
	return "error-handling"
}

func (errorHandling *Bgp_Neighbors_Neighbor_ErrorHandling) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: errorHandling.GetSegmentPath()}
	return entityPath
}

func (errorHandling *Bgp_Neighbors_Neighbor_ErrorHandling) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &errorHandling.Config
	}
	if child_yang_name == "state" {
		return &errorHandling.State
	}
	return nil
}

func (errorHandling *Bgp_Neighbors_Neighbor_ErrorHandling) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &errorHandling.Config
	children["state"] = &errorHandling.State

	return children
}

func (errorHandling *Bgp_Neighbors_Neighbor_ErrorHandling) SetValue(value_path string, value string) {
}

func (errorHandling *Bgp_Neighbors_Neighbor_ErrorHandling) GetBundleName() string {
	return "ydktest"
}

func (errorHandling *Bgp_Neighbors_Neighbor_ErrorHandling) GetYangName() string {
	return "errorHandling"
}

func (errorHandling *Bgp_Neighbors_Neighbor_ErrorHandling) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (errorHandling *Bgp_Neighbors_Neighbor_ErrorHandling) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (errorHandling *Bgp_Neighbors_Neighbor_ErrorHandling) SetParent(parent types.Entity) {
	errorHandling.parent = parent
}

func (errorHandling *Bgp_Neighbors_Neighbor_ErrorHandling) GetParent() types.Entity {
	return errorHandling.parent
}

func (errorHandling *Bgp_Neighbors_Neighbor_ErrorHandling) GetParentYangName() string {
	return "neighbor"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_ErrorHandling_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_ErrorHandling_Config struct {
	parent types.Entity
	Filter types.YFilter

	TreatAsWithdraw interface{} // boolean
}

func (config *Bgp_Neighbors_Neighbor_ErrorHandling_Config) HasDataOrFilter() bool {
	return config.TreatAsWithdraw != nil
}

func (config *Bgp_Neighbors_Neighbor_ErrorHandling_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Neighbors_Neighbor_ErrorHandling_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_ErrorHandling_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.TreatAsWithdraw != nil {
		switch config.TreatAsWithdraw.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.TreatAsWithdraw.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.TreatAsWithdraw)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "treat-as-withdraw", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Neighbors_Neighbor_ErrorHandling_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Neighbors_Neighbor_ErrorHandling_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Neighbors_Neighbor_ErrorHandling_Config) SetValue(value_path string, value string) {
	if value_path == "treat-as-withdraw" {
		config.TreatAsWithdraw = value
	}
}

func (config *Bgp_Neighbors_Neighbor_ErrorHandling_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Neighbors_Neighbor_ErrorHandling_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_ErrorHandling_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Neighbors_Neighbor_ErrorHandling_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Neighbors_Neighbor_ErrorHandling_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Neighbors_Neighbor_ErrorHandling_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Neighbors_Neighbor_ErrorHandling_Config) GetParentYangName() string {
	return "error-handling"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_ErrorHandling_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_ErrorHandling_State struct {
	parent types.Entity
	Filter types.YFilter

	ErroneousUpdateMessages interface{} // uint32
	TreatAsWithdraw         interface{} // boolean
}

func (state *Bgp_Neighbors_Neighbor_ErrorHandling_State) HasDataOrFilter() bool {
	return state.ErroneousUpdateMessages != nil ||
		state.TreatAsWithdraw != nil
}

func (state *Bgp_Neighbors_Neighbor_ErrorHandling_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Neighbors_Neighbor_ErrorHandling_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_ErrorHandling_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.ErroneousUpdateMessages != nil {
		switch state.ErroneousUpdateMessages.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ErroneousUpdateMessages.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ErroneousUpdateMessages)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "erroneous-update-messages", Data: leafData})
		}
	}

	if state.TreatAsWithdraw != nil {
		switch state.TreatAsWithdraw.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.TreatAsWithdraw.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.TreatAsWithdraw)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "treat-as-withdraw", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Neighbors_Neighbor_ErrorHandling_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Neighbors_Neighbor_ErrorHandling_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Neighbors_Neighbor_ErrorHandling_State) SetValue(value_path string, value string) {
	if value_path == "erroneous-update-messages" {
		state.ErroneousUpdateMessages = value
	}
	if value_path == "treat-as-withdraw" {
		state.TreatAsWithdraw = value
	}
}

func (state *Bgp_Neighbors_Neighbor_ErrorHandling_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Neighbors_Neighbor_ErrorHandling_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_ErrorHandling_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Neighbors_Neighbor_ErrorHandling_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Neighbors_Neighbor_ErrorHandling_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Neighbors_Neighbor_ErrorHandling_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Neighbors_Neighbor_ErrorHandling_State) GetParentYangName() string {
	return "error-handling"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_GracefulRestart
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_GracefulRestart struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Neighbors_Neighbor_GracefulRestart_Config
	State  Bgp_Neighbors_Neighbor_GracefulRestart_State
}

func (gracefulRestart *Bgp_Neighbors_Neighbor_GracefulRestart) HasDataOrFilter() bool {
	return gracefulRestart.Config.HasDataOrFilter() ||
		gracefulRestart.State.HasDataOrFilter()
}

func (gracefulRestart *Bgp_Neighbors_Neighbor_GracefulRestart) GetFilter() types.YFilter {
	return gracefulRestart.Filter
}

func (gracefulRestart *Bgp_Neighbors_Neighbor_GracefulRestart) GetSegmentPath() string {
	return "graceful-restart"
}

func (gracefulRestart *Bgp_Neighbors_Neighbor_GracefulRestart) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: gracefulRestart.GetSegmentPath()}
	return entityPath
}

func (gracefulRestart *Bgp_Neighbors_Neighbor_GracefulRestart) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &gracefulRestart.Config
	}
	if child_yang_name == "state" {
		return &gracefulRestart.State
	}
	return nil
}

func (gracefulRestart *Bgp_Neighbors_Neighbor_GracefulRestart) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &gracefulRestart.Config
	children["state"] = &gracefulRestart.State

	return children
}

func (gracefulRestart *Bgp_Neighbors_Neighbor_GracefulRestart) SetValue(value_path string, value string) {
}

func (gracefulRestart *Bgp_Neighbors_Neighbor_GracefulRestart) GetBundleName() string {
	return "ydktest"
}

func (gracefulRestart *Bgp_Neighbors_Neighbor_GracefulRestart) GetYangName() string {
	return "gracefulRestart"
}

func (gracefulRestart *Bgp_Neighbors_Neighbor_GracefulRestart) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (gracefulRestart *Bgp_Neighbors_Neighbor_GracefulRestart) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (gracefulRestart *Bgp_Neighbors_Neighbor_GracefulRestart) SetParent(parent types.Entity) {
	gracefulRestart.parent = parent
}

func (gracefulRestart *Bgp_Neighbors_Neighbor_GracefulRestart) GetParent() types.Entity {
	return gracefulRestart.parent
}

func (gracefulRestart *Bgp_Neighbors_Neighbor_GracefulRestart) GetParentYangName() string {
	return "neighbor"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_GracefulRestart_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_GracefulRestart_Config struct {
	parent types.Entity
	Filter types.YFilter

	Enabled         interface{} // boolean
	HelperOnly      interface{} // boolean
	RestartTime     interface{} // uint16
	StaleRoutesTime interface{} // str
}

func (config *Bgp_Neighbors_Neighbor_GracefulRestart_Config) HasDataOrFilter() bool {
	return config.Enabled != nil ||
		config.HelperOnly != nil ||
		config.RestartTime != nil ||
		config.StaleRoutesTime != nil
}

func (config *Bgp_Neighbors_Neighbor_GracefulRestart_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Neighbors_Neighbor_GracefulRestart_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_GracefulRestart_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.Enabled != nil {
		switch config.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	if config.HelperOnly != nil {
		switch config.HelperOnly.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.HelperOnly.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.HelperOnly)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "helper-only", Data: leafData})
		}
	}

	if config.RestartTime != nil {
		switch config.RestartTime.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTime.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTime)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-time", Data: leafData})
		}
	}

	if config.StaleRoutesTime != nil {
		switch config.StaleRoutesTime.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.StaleRoutesTime.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.StaleRoutesTime)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "stale-routes-time", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Neighbors_Neighbor_GracefulRestart_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Neighbors_Neighbor_GracefulRestart_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Neighbors_Neighbor_GracefulRestart_Config) SetValue(value_path string, value string) {
	if value_path == "enabled" {
		config.Enabled = value
	}
	if value_path == "helper-only" {
		config.HelperOnly = value
	}
	if value_path == "restart-time" {
		config.RestartTime = value
	}
	if value_path == "stale-routes-time" {
		config.StaleRoutesTime = value
	}
}

func (config *Bgp_Neighbors_Neighbor_GracefulRestart_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Neighbors_Neighbor_GracefulRestart_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_GracefulRestart_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Neighbors_Neighbor_GracefulRestart_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Neighbors_Neighbor_GracefulRestart_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Neighbors_Neighbor_GracefulRestart_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Neighbors_Neighbor_GracefulRestart_Config) GetParentYangName() string {
	return "graceful-restart"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_GracefulRestart_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_GracefulRestart_State struct {
	parent types.Entity
	Filter types.YFilter

	Enabled         interface{} // boolean
	HelperOnly      interface{} // boolean
	LocalRestarting interface{} // boolean
	Mode            interface{} // enumeration
	PeerRestartTime interface{} // uint16
	PeerRestarting  interface{} // boolean
	RestartTime     interface{} // uint16
	StaleRoutesTime interface{} // str
}

func (state *Bgp_Neighbors_Neighbor_GracefulRestart_State) HasDataOrFilter() bool {
	return state.Enabled != nil ||
		state.HelperOnly != nil ||
		state.LocalRestarting != nil ||
		state.Mode != nil ||
		state.PeerRestartTime != nil ||
		state.PeerRestarting != nil ||
		state.RestartTime != nil ||
		state.StaleRoutesTime != nil
}

func (state *Bgp_Neighbors_Neighbor_GracefulRestart_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Neighbors_Neighbor_GracefulRestart_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_GracefulRestart_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.Enabled != nil {
		switch state.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	if state.HelperOnly != nil {
		switch state.HelperOnly.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.HelperOnly.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.HelperOnly)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "helper-only", Data: leafData})
		}
	}

	if state.LocalRestarting != nil {
		switch state.LocalRestarting.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.LocalRestarting.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.LocalRestarting)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "local-restarting", Data: leafData})
		}
	}

	if state.Mode != nil {
		switch state.Mode.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.Mode.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.Mode)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "mode", Data: leafData})
		}
	}

	if state.PeerRestartTime != nil {
		switch state.PeerRestartTime.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.PeerRestartTime.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.PeerRestartTime)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "peer-restart-time", Data: leafData})
		}
	}

	if state.PeerRestarting != nil {
		switch state.PeerRestarting.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.PeerRestarting.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.PeerRestarting)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "peer-restarting", Data: leafData})
		}
	}

	if state.RestartTime != nil {
		switch state.RestartTime.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTime.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTime)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-time", Data: leafData})
		}
	}

	if state.StaleRoutesTime != nil {
		switch state.StaleRoutesTime.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.StaleRoutesTime.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.StaleRoutesTime)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "stale-routes-time", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Neighbors_Neighbor_GracefulRestart_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Neighbors_Neighbor_GracefulRestart_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Neighbors_Neighbor_GracefulRestart_State) SetValue(value_path string, value string) {
	if value_path == "enabled" {
		state.Enabled = value
	}
	if value_path == "helper-only" {
		state.HelperOnly = value
	}
	if value_path == "local-restarting" {
		state.LocalRestarting = value
	}
	if value_path == "mode" {
		state.Mode = value
	}
	if value_path == "peer-restart-time" {
		state.PeerRestartTime = value
	}
	if value_path == "peer-restarting" {
		state.PeerRestarting = value
	}
	if value_path == "restart-time" {
		state.RestartTime = value
	}
	if value_path == "stale-routes-time" {
		state.StaleRoutesTime = value
	}
}

func (state *Bgp_Neighbors_Neighbor_GracefulRestart_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Neighbors_Neighbor_GracefulRestart_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_GracefulRestart_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Neighbors_Neighbor_GracefulRestart_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Neighbors_Neighbor_GracefulRestart_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Neighbors_Neighbor_GracefulRestart_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Neighbors_Neighbor_GracefulRestart_State) GetParentYangName() string {
	return "graceful-restart"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_LoggingOptions
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_LoggingOptions struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Neighbors_Neighbor_LoggingOptions_Config
	State  Bgp_Neighbors_Neighbor_LoggingOptions_State
}

func (loggingOptions *Bgp_Neighbors_Neighbor_LoggingOptions) HasDataOrFilter() bool {
	return loggingOptions.Config.HasDataOrFilter() ||
		loggingOptions.State.HasDataOrFilter()
}

func (loggingOptions *Bgp_Neighbors_Neighbor_LoggingOptions) GetFilter() types.YFilter {
	return loggingOptions.Filter
}

func (loggingOptions *Bgp_Neighbors_Neighbor_LoggingOptions) GetSegmentPath() string {
	return "logging-options"
}

func (loggingOptions *Bgp_Neighbors_Neighbor_LoggingOptions) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: loggingOptions.GetSegmentPath()}
	return entityPath
}

func (loggingOptions *Bgp_Neighbors_Neighbor_LoggingOptions) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &loggingOptions.Config
	}
	if child_yang_name == "state" {
		return &loggingOptions.State
	}
	return nil
}

func (loggingOptions *Bgp_Neighbors_Neighbor_LoggingOptions) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &loggingOptions.Config
	children["state"] = &loggingOptions.State

	return children
}

func (loggingOptions *Bgp_Neighbors_Neighbor_LoggingOptions) SetValue(value_path string, value string) {
}

func (loggingOptions *Bgp_Neighbors_Neighbor_LoggingOptions) GetBundleName() string {
	return "ydktest"
}

func (loggingOptions *Bgp_Neighbors_Neighbor_LoggingOptions) GetYangName() string {
	return "loggingOptions"
}

func (loggingOptions *Bgp_Neighbors_Neighbor_LoggingOptions) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (loggingOptions *Bgp_Neighbors_Neighbor_LoggingOptions) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (loggingOptions *Bgp_Neighbors_Neighbor_LoggingOptions) SetParent(parent types.Entity) {
	loggingOptions.parent = parent
}

func (loggingOptions *Bgp_Neighbors_Neighbor_LoggingOptions) GetParent() types.Entity {
	return loggingOptions.parent
}

func (loggingOptions *Bgp_Neighbors_Neighbor_LoggingOptions) GetParentYangName() string {
	return "neighbor"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_LoggingOptions_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_LoggingOptions_Config struct {
	parent types.Entity
	Filter types.YFilter

	LogNeighborStateChanges interface{} // boolean
}

func (config *Bgp_Neighbors_Neighbor_LoggingOptions_Config) HasDataOrFilter() bool {
	return config.LogNeighborStateChanges != nil
}

func (config *Bgp_Neighbors_Neighbor_LoggingOptions_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Neighbors_Neighbor_LoggingOptions_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_LoggingOptions_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.LogNeighborStateChanges != nil {
		switch config.LogNeighborStateChanges.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.LogNeighborStateChanges.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.LogNeighborStateChanges)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "log-neighbor-state-changes", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Neighbors_Neighbor_LoggingOptions_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Neighbors_Neighbor_LoggingOptions_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Neighbors_Neighbor_LoggingOptions_Config) SetValue(value_path string, value string) {
	if value_path == "log-neighbor-state-changes" {
		config.LogNeighborStateChanges = value
	}
}

func (config *Bgp_Neighbors_Neighbor_LoggingOptions_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Neighbors_Neighbor_LoggingOptions_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_LoggingOptions_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Neighbors_Neighbor_LoggingOptions_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Neighbors_Neighbor_LoggingOptions_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Neighbors_Neighbor_LoggingOptions_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Neighbors_Neighbor_LoggingOptions_Config) GetParentYangName() string {
	return "logging-options"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_LoggingOptions_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_LoggingOptions_State struct {
	parent types.Entity
	Filter types.YFilter

	LogNeighborStateChanges interface{} // boolean
}

func (state *Bgp_Neighbors_Neighbor_LoggingOptions_State) HasDataOrFilter() bool {
	return state.LogNeighborStateChanges != nil
}

func (state *Bgp_Neighbors_Neighbor_LoggingOptions_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Neighbors_Neighbor_LoggingOptions_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_LoggingOptions_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.LogNeighborStateChanges != nil {
		switch state.LogNeighborStateChanges.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.LogNeighborStateChanges.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.LogNeighborStateChanges)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "log-neighbor-state-changes", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Neighbors_Neighbor_LoggingOptions_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Neighbors_Neighbor_LoggingOptions_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Neighbors_Neighbor_LoggingOptions_State) SetValue(value_path string, value string) {
	if value_path == "log-neighbor-state-changes" {
		state.LogNeighborStateChanges = value
	}
}

func (state *Bgp_Neighbors_Neighbor_LoggingOptions_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Neighbors_Neighbor_LoggingOptions_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_LoggingOptions_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Neighbors_Neighbor_LoggingOptions_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Neighbors_Neighbor_LoggingOptions_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Neighbors_Neighbor_LoggingOptions_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Neighbors_Neighbor_LoggingOptions_State) GetParentYangName() string {
	return "logging-options"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_EbgpMultihop
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_EbgpMultihop struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Neighbors_Neighbor_EbgpMultihop_Config
	State  Bgp_Neighbors_Neighbor_EbgpMultihop_State
}

func (ebgpMultihop *Bgp_Neighbors_Neighbor_EbgpMultihop) HasDataOrFilter() bool {
	return ebgpMultihop.Config.HasDataOrFilter() ||
		ebgpMultihop.State.HasDataOrFilter()
}

func (ebgpMultihop *Bgp_Neighbors_Neighbor_EbgpMultihop) GetFilter() types.YFilter {
	return ebgpMultihop.Filter
}

func (ebgpMultihop *Bgp_Neighbors_Neighbor_EbgpMultihop) GetSegmentPath() string {
	return "ebgp-multihop"
}

func (ebgpMultihop *Bgp_Neighbors_Neighbor_EbgpMultihop) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: ebgpMultihop.GetSegmentPath()}
	return entityPath
}

func (ebgpMultihop *Bgp_Neighbors_Neighbor_EbgpMultihop) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &ebgpMultihop.Config
	}
	if child_yang_name == "state" {
		return &ebgpMultihop.State
	}
	return nil
}

func (ebgpMultihop *Bgp_Neighbors_Neighbor_EbgpMultihop) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &ebgpMultihop.Config
	children["state"] = &ebgpMultihop.State

	return children
}

func (ebgpMultihop *Bgp_Neighbors_Neighbor_EbgpMultihop) SetValue(value_path string, value string) {
}

func (ebgpMultihop *Bgp_Neighbors_Neighbor_EbgpMultihop) GetBundleName() string {
	return "ydktest"
}

func (ebgpMultihop *Bgp_Neighbors_Neighbor_EbgpMultihop) GetYangName() string {
	return "ebgpMultihop"
}

func (ebgpMultihop *Bgp_Neighbors_Neighbor_EbgpMultihop) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (ebgpMultihop *Bgp_Neighbors_Neighbor_EbgpMultihop) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (ebgpMultihop *Bgp_Neighbors_Neighbor_EbgpMultihop) SetParent(parent types.Entity) {
	ebgpMultihop.parent = parent
}

func (ebgpMultihop *Bgp_Neighbors_Neighbor_EbgpMultihop) GetParent() types.Entity {
	return ebgpMultihop.parent
}

func (ebgpMultihop *Bgp_Neighbors_Neighbor_EbgpMultihop) GetParentYangName() string {
	return "neighbor"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_EbgpMultihop_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_EbgpMultihop_Config struct {
	parent types.Entity
	Filter types.YFilter

	Enabled     interface{} // boolean
	MultihopTtl interface{} // uint8
}

func (config *Bgp_Neighbors_Neighbor_EbgpMultihop_Config) HasDataOrFilter() bool {
	return config.Enabled != nil ||
		config.MultihopTtl != nil
}

func (config *Bgp_Neighbors_Neighbor_EbgpMultihop_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Neighbors_Neighbor_EbgpMultihop_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_EbgpMultihop_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.Enabled != nil {
		switch config.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	if config.MultihopTtl != nil {
		switch config.MultihopTtl.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MultihopTtl.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MultihopTtl)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "multihop-ttl", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Neighbors_Neighbor_EbgpMultihop_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Neighbors_Neighbor_EbgpMultihop_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Neighbors_Neighbor_EbgpMultihop_Config) SetValue(value_path string, value string) {
	if value_path == "enabled" {
		config.Enabled = value
	}
	if value_path == "multihop-ttl" {
		config.MultihopTtl = value
	}
}

func (config *Bgp_Neighbors_Neighbor_EbgpMultihop_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Neighbors_Neighbor_EbgpMultihop_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_EbgpMultihop_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Neighbors_Neighbor_EbgpMultihop_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Neighbors_Neighbor_EbgpMultihop_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Neighbors_Neighbor_EbgpMultihop_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Neighbors_Neighbor_EbgpMultihop_Config) GetParentYangName() string {
	return "ebgp-multihop"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_EbgpMultihop_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_EbgpMultihop_State struct {
	parent types.Entity
	Filter types.YFilter

	Enabled     interface{} // boolean
	MultihopTtl interface{} // uint8
}

func (state *Bgp_Neighbors_Neighbor_EbgpMultihop_State) HasDataOrFilter() bool {
	return state.Enabled != nil ||
		state.MultihopTtl != nil
}

func (state *Bgp_Neighbors_Neighbor_EbgpMultihop_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Neighbors_Neighbor_EbgpMultihop_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_EbgpMultihop_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.Enabled != nil {
		switch state.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	if state.MultihopTtl != nil {
		switch state.MultihopTtl.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MultihopTtl.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MultihopTtl)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "multihop-ttl", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Neighbors_Neighbor_EbgpMultihop_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Neighbors_Neighbor_EbgpMultihop_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Neighbors_Neighbor_EbgpMultihop_State) SetValue(value_path string, value string) {
	if value_path == "enabled" {
		state.Enabled = value
	}
	if value_path == "multihop-ttl" {
		state.MultihopTtl = value
	}
}

func (state *Bgp_Neighbors_Neighbor_EbgpMultihop_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Neighbors_Neighbor_EbgpMultihop_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_EbgpMultihop_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Neighbors_Neighbor_EbgpMultihop_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Neighbors_Neighbor_EbgpMultihop_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Neighbors_Neighbor_EbgpMultihop_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Neighbors_Neighbor_EbgpMultihop_State) GetParentYangName() string {
	return "ebgp-multihop"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_RouteReflector
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_RouteReflector struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Neighbors_Neighbor_RouteReflector_Config
	State  Bgp_Neighbors_Neighbor_RouteReflector_State
}

func (routeReflector *Bgp_Neighbors_Neighbor_RouteReflector) HasDataOrFilter() bool {
	return routeReflector.Config.HasDataOrFilter() ||
		routeReflector.State.HasDataOrFilter()
}

func (routeReflector *Bgp_Neighbors_Neighbor_RouteReflector) GetFilter() types.YFilter {
	return routeReflector.Filter
}

func (routeReflector *Bgp_Neighbors_Neighbor_RouteReflector) GetSegmentPath() string {
	return "route-reflector"
}

func (routeReflector *Bgp_Neighbors_Neighbor_RouteReflector) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: routeReflector.GetSegmentPath()}
	return entityPath
}

func (routeReflector *Bgp_Neighbors_Neighbor_RouteReflector) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &routeReflector.Config
	}
	if child_yang_name == "state" {
		return &routeReflector.State
	}
	return nil
}

func (routeReflector *Bgp_Neighbors_Neighbor_RouteReflector) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &routeReflector.Config
	children["state"] = &routeReflector.State

	return children
}

func (routeReflector *Bgp_Neighbors_Neighbor_RouteReflector) SetValue(value_path string, value string) {
}

func (routeReflector *Bgp_Neighbors_Neighbor_RouteReflector) GetBundleName() string {
	return "ydktest"
}

func (routeReflector *Bgp_Neighbors_Neighbor_RouteReflector) GetYangName() string {
	return "routeReflector"
}

func (routeReflector *Bgp_Neighbors_Neighbor_RouteReflector) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (routeReflector *Bgp_Neighbors_Neighbor_RouteReflector) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (routeReflector *Bgp_Neighbors_Neighbor_RouteReflector) SetParent(parent types.Entity) {
	routeReflector.parent = parent
}

func (routeReflector *Bgp_Neighbors_Neighbor_RouteReflector) GetParent() types.Entity {
	return routeReflector.parent
}

func (routeReflector *Bgp_Neighbors_Neighbor_RouteReflector) GetParentYangName() string {
	return "neighbor"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_RouteReflector_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_RouteReflector_Config struct {
	parent types.Entity
	Filter types.YFilter

	RouteReflectorClient    interface{} // boolean
	RouteReflectorClusterId interface{} // str
}

func (config *Bgp_Neighbors_Neighbor_RouteReflector_Config) HasDataOrFilter() bool {
	return config.RouteReflectorClient != nil ||
		config.RouteReflectorClusterId != nil
}

func (config *Bgp_Neighbors_Neighbor_RouteReflector_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Neighbors_Neighbor_RouteReflector_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_RouteReflector_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.RouteReflectorClient != nil {
		switch config.RouteReflectorClient.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RouteReflectorClient.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RouteReflectorClient)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "route-reflector-client", Data: leafData})
		}
	}

	if config.RouteReflectorClusterId != nil {
		switch config.RouteReflectorClusterId.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RouteReflectorClusterId.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RouteReflectorClusterId)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "route-reflector-cluster-id", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Neighbors_Neighbor_RouteReflector_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Neighbors_Neighbor_RouteReflector_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Neighbors_Neighbor_RouteReflector_Config) SetValue(value_path string, value string) {
	if value_path == "route-reflector-client" {
		config.RouteReflectorClient = value
	}
	if value_path == "route-reflector-cluster-id" {
		config.RouteReflectorClusterId = value
	}
}

func (config *Bgp_Neighbors_Neighbor_RouteReflector_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Neighbors_Neighbor_RouteReflector_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_RouteReflector_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Neighbors_Neighbor_RouteReflector_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Neighbors_Neighbor_RouteReflector_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Neighbors_Neighbor_RouteReflector_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Neighbors_Neighbor_RouteReflector_Config) GetParentYangName() string {
	return "route-reflector"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_RouteReflector_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_RouteReflector_State struct {
	parent types.Entity
	Filter types.YFilter

	RouteReflectorClient    interface{} // boolean
	RouteReflectorClusterId interface{} // str
}

func (state *Bgp_Neighbors_Neighbor_RouteReflector_State) HasDataOrFilter() bool {
	return state.RouteReflectorClient != nil ||
		state.RouteReflectorClusterId != nil
}

func (state *Bgp_Neighbors_Neighbor_RouteReflector_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Neighbors_Neighbor_RouteReflector_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_RouteReflector_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.RouteReflectorClient != nil {
		switch state.RouteReflectorClient.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RouteReflectorClient.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RouteReflectorClient)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "route-reflector-client", Data: leafData})
		}
	}

	if state.RouteReflectorClusterId != nil {
		switch state.RouteReflectorClusterId.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RouteReflectorClusterId.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RouteReflectorClusterId)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "route-reflector-cluster-id", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Neighbors_Neighbor_RouteReflector_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Neighbors_Neighbor_RouteReflector_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Neighbors_Neighbor_RouteReflector_State) SetValue(value_path string, value string) {
	if value_path == "route-reflector-client" {
		state.RouteReflectorClient = value
	}
	if value_path == "route-reflector-cluster-id" {
		state.RouteReflectorClusterId = value
	}
}

func (state *Bgp_Neighbors_Neighbor_RouteReflector_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Neighbors_Neighbor_RouteReflector_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_RouteReflector_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Neighbors_Neighbor_RouteReflector_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Neighbors_Neighbor_RouteReflector_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Neighbors_Neighbor_RouteReflector_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Neighbors_Neighbor_RouteReflector_State) GetParentYangName() string {
	return "route-reflector"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AsPathOptions
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AsPathOptions struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Neighbors_Neighbor_AsPathOptions_Config
	State  Bgp_Neighbors_Neighbor_AsPathOptions_State
}

func (asPathOptions *Bgp_Neighbors_Neighbor_AsPathOptions) HasDataOrFilter() bool {
	return asPathOptions.Config.HasDataOrFilter() ||
		asPathOptions.State.HasDataOrFilter()
}

func (asPathOptions *Bgp_Neighbors_Neighbor_AsPathOptions) GetFilter() types.YFilter {
	return asPathOptions.Filter
}

func (asPathOptions *Bgp_Neighbors_Neighbor_AsPathOptions) GetSegmentPath() string {
	return "as-path-options"
}

func (asPathOptions *Bgp_Neighbors_Neighbor_AsPathOptions) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: asPathOptions.GetSegmentPath()}
	return entityPath
}

func (asPathOptions *Bgp_Neighbors_Neighbor_AsPathOptions) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &asPathOptions.Config
	}
	if child_yang_name == "state" {
		return &asPathOptions.State
	}
	return nil
}

func (asPathOptions *Bgp_Neighbors_Neighbor_AsPathOptions) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &asPathOptions.Config
	children["state"] = &asPathOptions.State

	return children
}

func (asPathOptions *Bgp_Neighbors_Neighbor_AsPathOptions) SetValue(value_path string, value string) {
}

func (asPathOptions *Bgp_Neighbors_Neighbor_AsPathOptions) GetBundleName() string {
	return "ydktest"
}

func (asPathOptions *Bgp_Neighbors_Neighbor_AsPathOptions) GetYangName() string {
	return "asPathOptions"
}

func (asPathOptions *Bgp_Neighbors_Neighbor_AsPathOptions) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (asPathOptions *Bgp_Neighbors_Neighbor_AsPathOptions) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (asPathOptions *Bgp_Neighbors_Neighbor_AsPathOptions) SetParent(parent types.Entity) {
	asPathOptions.parent = parent
}

func (asPathOptions *Bgp_Neighbors_Neighbor_AsPathOptions) GetParent() types.Entity {
	return asPathOptions.parent
}

func (asPathOptions *Bgp_Neighbors_Neighbor_AsPathOptions) GetParentYangName() string {
	return "neighbor"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AsPathOptions_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AsPathOptions_Config struct {
	parent types.Entity
	Filter types.YFilter

	AllowOwnAs    interface{} // uint8
	ReplacePeerAs interface{} // boolean
}

func (config *Bgp_Neighbors_Neighbor_AsPathOptions_Config) HasDataOrFilter() bool {
	return config.AllowOwnAs != nil ||
		config.ReplacePeerAs != nil
}

func (config *Bgp_Neighbors_Neighbor_AsPathOptions_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Neighbors_Neighbor_AsPathOptions_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AsPathOptions_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.AllowOwnAs != nil {
		switch config.AllowOwnAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.AllowOwnAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.AllowOwnAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "allow-own-as", Data: leafData})
		}
	}

	if config.ReplacePeerAs != nil {
		switch config.ReplacePeerAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ReplacePeerAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ReplacePeerAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "replace-peer-as", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Neighbors_Neighbor_AsPathOptions_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Neighbors_Neighbor_AsPathOptions_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Neighbors_Neighbor_AsPathOptions_Config) SetValue(value_path string, value string) {
	if value_path == "allow-own-as" {
		config.AllowOwnAs = value
	}
	if value_path == "replace-peer-as" {
		config.ReplacePeerAs = value
	}
}

func (config *Bgp_Neighbors_Neighbor_AsPathOptions_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Neighbors_Neighbor_AsPathOptions_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AsPathOptions_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Neighbors_Neighbor_AsPathOptions_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Neighbors_Neighbor_AsPathOptions_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Neighbors_Neighbor_AsPathOptions_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Neighbors_Neighbor_AsPathOptions_Config) GetParentYangName() string {
	return "as-path-options"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AsPathOptions_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AsPathOptions_State struct {
	parent types.Entity
	Filter types.YFilter

	AllowOwnAs    interface{} // uint8
	ReplacePeerAs interface{} // boolean
}

func (state *Bgp_Neighbors_Neighbor_AsPathOptions_State) HasDataOrFilter() bool {
	return state.AllowOwnAs != nil ||
		state.ReplacePeerAs != nil
}

func (state *Bgp_Neighbors_Neighbor_AsPathOptions_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Neighbors_Neighbor_AsPathOptions_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AsPathOptions_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.AllowOwnAs != nil {
		switch state.AllowOwnAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.AllowOwnAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.AllowOwnAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "allow-own-as", Data: leafData})
		}
	}

	if state.ReplacePeerAs != nil {
		switch state.ReplacePeerAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ReplacePeerAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ReplacePeerAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "replace-peer-as", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Neighbors_Neighbor_AsPathOptions_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Neighbors_Neighbor_AsPathOptions_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Neighbors_Neighbor_AsPathOptions_State) SetValue(value_path string, value string) {
	if value_path == "allow-own-as" {
		state.AllowOwnAs = value
	}
	if value_path == "replace-peer-as" {
		state.ReplacePeerAs = value
	}
}

func (state *Bgp_Neighbors_Neighbor_AsPathOptions_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Neighbors_Neighbor_AsPathOptions_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AsPathOptions_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Neighbors_Neighbor_AsPathOptions_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Neighbors_Neighbor_AsPathOptions_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Neighbors_Neighbor_AsPathOptions_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Neighbors_Neighbor_AsPathOptions_State) GetParentYangName() string {
	return "as-path-options"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AddPaths
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AddPaths struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Neighbors_Neighbor_AddPaths_Config
	State  Bgp_Neighbors_Neighbor_AddPaths_State
}

func (addPaths *Bgp_Neighbors_Neighbor_AddPaths) HasDataOrFilter() bool {
	return addPaths.Config.HasDataOrFilter() ||
		addPaths.State.HasDataOrFilter()
}

func (addPaths *Bgp_Neighbors_Neighbor_AddPaths) GetFilter() types.YFilter {
	return addPaths.Filter
}

func (addPaths *Bgp_Neighbors_Neighbor_AddPaths) GetSegmentPath() string {
	return "add-paths"
}

func (addPaths *Bgp_Neighbors_Neighbor_AddPaths) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: addPaths.GetSegmentPath()}
	return entityPath
}

func (addPaths *Bgp_Neighbors_Neighbor_AddPaths) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &addPaths.Config
	}
	if child_yang_name == "state" {
		return &addPaths.State
	}
	return nil
}

func (addPaths *Bgp_Neighbors_Neighbor_AddPaths) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &addPaths.Config
	children["state"] = &addPaths.State

	return children
}

func (addPaths *Bgp_Neighbors_Neighbor_AddPaths) SetValue(value_path string, value string) {
}

func (addPaths *Bgp_Neighbors_Neighbor_AddPaths) GetBundleName() string {
	return "ydktest"
}

func (addPaths *Bgp_Neighbors_Neighbor_AddPaths) GetYangName() string {
	return "addPaths"
}

func (addPaths *Bgp_Neighbors_Neighbor_AddPaths) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (addPaths *Bgp_Neighbors_Neighbor_AddPaths) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (addPaths *Bgp_Neighbors_Neighbor_AddPaths) SetParent(parent types.Entity) {
	addPaths.parent = parent
}

func (addPaths *Bgp_Neighbors_Neighbor_AddPaths) GetParent() types.Entity {
	return addPaths.parent
}

func (addPaths *Bgp_Neighbors_Neighbor_AddPaths) GetParentYangName() string {
	return "neighbor"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AddPaths_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AddPaths_Config struct {
	parent types.Entity
	Filter types.YFilter

	EligiblePrefixPolicy interface{} // str
	Receive              interface{} // boolean
	SendMax              interface{} // uint8
}

func (config *Bgp_Neighbors_Neighbor_AddPaths_Config) HasDataOrFilter() bool {
	return config.EligiblePrefixPolicy != nil ||
		config.Receive != nil ||
		config.SendMax != nil
}

func (config *Bgp_Neighbors_Neighbor_AddPaths_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Neighbors_Neighbor_AddPaths_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AddPaths_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.EligiblePrefixPolicy != nil {
		switch config.EligiblePrefixPolicy.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.EligiblePrefixPolicy.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.EligiblePrefixPolicy)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "eligible-prefix-policy", Data: leafData})
		}
	}

	if config.Receive != nil {
		switch config.Receive.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.Receive.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.Receive)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "receive", Data: leafData})
		}
	}

	if config.SendMax != nil {
		switch config.SendMax.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.SendMax.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.SendMax)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "send-max", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Neighbors_Neighbor_AddPaths_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Neighbors_Neighbor_AddPaths_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Neighbors_Neighbor_AddPaths_Config) SetValue(value_path string, value string) {
	if value_path == "eligible-prefix-policy" {
		config.EligiblePrefixPolicy = value
	}
	if value_path == "receive" {
		config.Receive = value
	}
	if value_path == "send-max" {
		config.SendMax = value
	}
}

func (config *Bgp_Neighbors_Neighbor_AddPaths_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Neighbors_Neighbor_AddPaths_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AddPaths_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Neighbors_Neighbor_AddPaths_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Neighbors_Neighbor_AddPaths_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Neighbors_Neighbor_AddPaths_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Neighbors_Neighbor_AddPaths_Config) GetParentYangName() string {
	return "add-paths"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AddPaths_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AddPaths_State struct {
	parent types.Entity
	Filter types.YFilter

	EligiblePrefixPolicy interface{} // str
	Receive              interface{} // boolean
	SendMax              interface{} // uint8
}

func (state *Bgp_Neighbors_Neighbor_AddPaths_State) HasDataOrFilter() bool {
	return state.EligiblePrefixPolicy != nil ||
		state.Receive != nil ||
		state.SendMax != nil
}

func (state *Bgp_Neighbors_Neighbor_AddPaths_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Neighbors_Neighbor_AddPaths_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AddPaths_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.EligiblePrefixPolicy != nil {
		switch state.EligiblePrefixPolicy.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.EligiblePrefixPolicy.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.EligiblePrefixPolicy)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "eligible-prefix-policy", Data: leafData})
		}
	}

	if state.Receive != nil {
		switch state.Receive.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.Receive.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.Receive)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "receive", Data: leafData})
		}
	}

	if state.SendMax != nil {
		switch state.SendMax.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.SendMax.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.SendMax)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "send-max", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Neighbors_Neighbor_AddPaths_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Neighbors_Neighbor_AddPaths_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Neighbors_Neighbor_AddPaths_State) SetValue(value_path string, value string) {
	if value_path == "eligible-prefix-policy" {
		state.EligiblePrefixPolicy = value
	}
	if value_path == "receive" {
		state.Receive = value
	}
	if value_path == "send-max" {
		state.SendMax = value
	}
}

func (state *Bgp_Neighbors_Neighbor_AddPaths_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Neighbors_Neighbor_AddPaths_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AddPaths_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Neighbors_Neighbor_AddPaths_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Neighbors_Neighbor_AddPaths_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Neighbors_Neighbor_AddPaths_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Neighbors_Neighbor_AddPaths_State) GetParentYangName() string {
	return "add-paths"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_UseMultiplePaths
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_UseMultiplePaths struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Neighbors_Neighbor_UseMultiplePaths_Config
	Ebgp   Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp
	State  Bgp_Neighbors_Neighbor_UseMultiplePaths_State
}

func (useMultiplePaths *Bgp_Neighbors_Neighbor_UseMultiplePaths) HasDataOrFilter() bool {
	return useMultiplePaths.Config.HasDataOrFilter() ||
		useMultiplePaths.Ebgp.HasDataOrFilter() ||
		useMultiplePaths.State.HasDataOrFilter()
}

func (useMultiplePaths *Bgp_Neighbors_Neighbor_UseMultiplePaths) GetFilter() types.YFilter {
	return useMultiplePaths.Filter
}

func (useMultiplePaths *Bgp_Neighbors_Neighbor_UseMultiplePaths) GetSegmentPath() string {
	return "use-multiple-paths"
}

func (useMultiplePaths *Bgp_Neighbors_Neighbor_UseMultiplePaths) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: useMultiplePaths.GetSegmentPath()}
	return entityPath
}

func (useMultiplePaths *Bgp_Neighbors_Neighbor_UseMultiplePaths) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &useMultiplePaths.Config
	}
	if child_yang_name == "ebgp" {
		return &useMultiplePaths.Ebgp
	}
	if child_yang_name == "state" {
		return &useMultiplePaths.State
	}
	return nil
}

func (useMultiplePaths *Bgp_Neighbors_Neighbor_UseMultiplePaths) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &useMultiplePaths.Config
	children["ebgp"] = &useMultiplePaths.Ebgp
	children["state"] = &useMultiplePaths.State

	return children
}

func (useMultiplePaths *Bgp_Neighbors_Neighbor_UseMultiplePaths) SetValue(value_path string, value string) {
}

func (useMultiplePaths *Bgp_Neighbors_Neighbor_UseMultiplePaths) GetBundleName() string {
	return "ydktest"
}

func (useMultiplePaths *Bgp_Neighbors_Neighbor_UseMultiplePaths) GetYangName() string {
	return "useMultiplePaths"
}

func (useMultiplePaths *Bgp_Neighbors_Neighbor_UseMultiplePaths) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (useMultiplePaths *Bgp_Neighbors_Neighbor_UseMultiplePaths) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (useMultiplePaths *Bgp_Neighbors_Neighbor_UseMultiplePaths) SetParent(parent types.Entity) {
	useMultiplePaths.parent = parent
}

func (useMultiplePaths *Bgp_Neighbors_Neighbor_UseMultiplePaths) GetParent() types.Entity {
	return useMultiplePaths.parent
}

func (useMultiplePaths *Bgp_Neighbors_Neighbor_UseMultiplePaths) GetParentYangName() string {
	return "neighbor"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_UseMultiplePaths_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_UseMultiplePaths_Config struct {
	parent types.Entity
	Filter types.YFilter

	Enabled interface{} // boolean
}

func (config *Bgp_Neighbors_Neighbor_UseMultiplePaths_Config) HasDataOrFilter() bool {
	return config.Enabled != nil
}

func (config *Bgp_Neighbors_Neighbor_UseMultiplePaths_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Neighbors_Neighbor_UseMultiplePaths_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_UseMultiplePaths_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.Enabled != nil {
		switch config.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Neighbors_Neighbor_UseMultiplePaths_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Neighbors_Neighbor_UseMultiplePaths_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Neighbors_Neighbor_UseMultiplePaths_Config) SetValue(value_path string, value string) {
	if value_path == "enabled" {
		config.Enabled = value
	}
}

func (config *Bgp_Neighbors_Neighbor_UseMultiplePaths_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Neighbors_Neighbor_UseMultiplePaths_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_UseMultiplePaths_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Neighbors_Neighbor_UseMultiplePaths_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Neighbors_Neighbor_UseMultiplePaths_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Neighbors_Neighbor_UseMultiplePaths_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Neighbors_Neighbor_UseMultiplePaths_Config) GetParentYangName() string {
	return "use-multiple-paths"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_UseMultiplePaths_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_UseMultiplePaths_State struct {
	parent types.Entity
	Filter types.YFilter

	Enabled interface{} // boolean
}

func (state *Bgp_Neighbors_Neighbor_UseMultiplePaths_State) HasDataOrFilter() bool {
	return state.Enabled != nil
}

func (state *Bgp_Neighbors_Neighbor_UseMultiplePaths_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Neighbors_Neighbor_UseMultiplePaths_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_UseMultiplePaths_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.Enabled != nil {
		switch state.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Neighbors_Neighbor_UseMultiplePaths_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Neighbors_Neighbor_UseMultiplePaths_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Neighbors_Neighbor_UseMultiplePaths_State) SetValue(value_path string, value string) {
	if value_path == "enabled" {
		state.Enabled = value
	}
}

func (state *Bgp_Neighbors_Neighbor_UseMultiplePaths_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Neighbors_Neighbor_UseMultiplePaths_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_UseMultiplePaths_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Neighbors_Neighbor_UseMultiplePaths_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Neighbors_Neighbor_UseMultiplePaths_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Neighbors_Neighbor_UseMultiplePaths_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Neighbors_Neighbor_UseMultiplePaths_State) GetParentYangName() string {
	return "use-multiple-paths"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config
	State  Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State
}

func (ebgp *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp) HasDataOrFilter() bool {
	return ebgp.Config.HasDataOrFilter() ||
		ebgp.State.HasDataOrFilter()
}

func (ebgp *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp) GetFilter() types.YFilter {
	return ebgp.Filter
}

func (ebgp *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp) GetSegmentPath() string {
	return "ebgp"
}

func (ebgp *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: ebgp.GetSegmentPath()}
	return entityPath
}

func (ebgp *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &ebgp.Config
	}
	if child_yang_name == "state" {
		return &ebgp.State
	}
	return nil
}

func (ebgp *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &ebgp.Config
	children["state"] = &ebgp.State

	return children
}

func (ebgp *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp) SetValue(value_path string, value string) {
}

func (ebgp *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp) GetBundleName() string {
	return "ydktest"
}

func (ebgp *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp) GetYangName() string {
	return "ebgp"
}

func (ebgp *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (ebgp *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (ebgp *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp) SetParent(parent types.Entity) {
	ebgp.parent = parent
}

func (ebgp *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp) GetParent() types.Entity {
	return ebgp.parent
}

func (ebgp *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp) GetParentYangName() string {
	return "use-multiple-paths"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config struct {
	parent types.Entity
	Filter types.YFilter

	AllowMultipleAs interface{} // boolean
}

func (config *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config) HasDataOrFilter() bool {
	return config.AllowMultipleAs != nil
}

func (config *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.AllowMultipleAs != nil {
		switch config.AllowMultipleAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.AllowMultipleAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.AllowMultipleAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "allow-multiple-as", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config) SetValue(value_path string, value string) {
	if value_path == "allow-multiple-as" {
		config.AllowMultipleAs = value
	}
}

func (config *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_Config) GetParentYangName() string {
	return "ebgp"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State struct {
	parent types.Entity
	Filter types.YFilter

	AllowMultipleAs interface{} // boolean
}

func (state *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State) HasDataOrFilter() bool {
	return state.AllowMultipleAs != nil
}

func (state *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.AllowMultipleAs != nil {
		switch state.AllowMultipleAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.AllowMultipleAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.AllowMultipleAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "allow-multiple-as", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State) SetValue(value_path string, value string) {
	if value_path == "allow-multiple-as" {
		state.AllowMultipleAs = value
	}
}

func (state *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Neighbors_Neighbor_UseMultiplePaths_Ebgp_State) GetParentYangName() string {
	return "ebgp"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_ApplyPolicy
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_ApplyPolicy struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Neighbors_Neighbor_ApplyPolicy_Config
	State  Bgp_Neighbors_Neighbor_ApplyPolicy_State
}

func (applyPolicy *Bgp_Neighbors_Neighbor_ApplyPolicy) HasDataOrFilter() bool {
	return applyPolicy.Config.HasDataOrFilter() ||
		applyPolicy.State.HasDataOrFilter()
}

func (applyPolicy *Bgp_Neighbors_Neighbor_ApplyPolicy) GetFilter() types.YFilter {
	return applyPolicy.Filter
}

func (applyPolicy *Bgp_Neighbors_Neighbor_ApplyPolicy) GetSegmentPath() string {
	return "apply-policy"
}

func (applyPolicy *Bgp_Neighbors_Neighbor_ApplyPolicy) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: applyPolicy.GetSegmentPath()}
	return entityPath
}

func (applyPolicy *Bgp_Neighbors_Neighbor_ApplyPolicy) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &applyPolicy.Config
	}
	if child_yang_name == "state" {
		return &applyPolicy.State
	}
	return nil
}

func (applyPolicy *Bgp_Neighbors_Neighbor_ApplyPolicy) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &applyPolicy.Config
	children["state"] = &applyPolicy.State

	return children
}

func (applyPolicy *Bgp_Neighbors_Neighbor_ApplyPolicy) SetValue(value_path string, value string) {
}

func (applyPolicy *Bgp_Neighbors_Neighbor_ApplyPolicy) GetBundleName() string {
	return "ydktest"
}

func (applyPolicy *Bgp_Neighbors_Neighbor_ApplyPolicy) GetYangName() string {
	return "applyPolicy"
}

func (applyPolicy *Bgp_Neighbors_Neighbor_ApplyPolicy) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (applyPolicy *Bgp_Neighbors_Neighbor_ApplyPolicy) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (applyPolicy *Bgp_Neighbors_Neighbor_ApplyPolicy) SetParent(parent types.Entity) {
	applyPolicy.parent = parent
}

func (applyPolicy *Bgp_Neighbors_Neighbor_ApplyPolicy) GetParent() types.Entity {
	return applyPolicy.parent
}

func (applyPolicy *Bgp_Neighbors_Neighbor_ApplyPolicy) GetParentYangName() string {
	return "neighbor"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_ApplyPolicy_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_ApplyPolicy_Config struct {
	parent types.Entity
	Filter types.YFilter

	DefaultExportPolicy interface{} // enumeration
	DefaultImportPolicy interface{} // enumeration
	ExportPolicy        []interface{}
	ImportPolicy        []interface{}
}

func (config *Bgp_Neighbors_Neighbor_ApplyPolicy_Config) HasDataOrFilter() bool {
	for _, leaf := range config.ExportPolicy {
		if leaf != nil {
			return true
		}
	}
	for _, leaf := range config.ImportPolicy {
		if leaf != nil {
			return true
		}
	}
	return config.DefaultExportPolicy != nil ||
		config.DefaultImportPolicy != nil
}

func (config *Bgp_Neighbors_Neighbor_ApplyPolicy_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Neighbors_Neighbor_ApplyPolicy_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_ApplyPolicy_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.DefaultExportPolicy != nil {
		switch config.DefaultExportPolicy.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.DefaultExportPolicy.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.DefaultExportPolicy)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "default-export-policy", Data: leafData})
		}
	}

	if config.DefaultImportPolicy != nil {
		switch config.DefaultImportPolicy.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.DefaultImportPolicy.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.DefaultImportPolicy)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "default-import-policy", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Neighbors_Neighbor_ApplyPolicy_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Neighbors_Neighbor_ApplyPolicy_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Neighbors_Neighbor_ApplyPolicy_Config) SetValue(value_path string, value string) {
	if value_path == "default-export-policy" {
		config.DefaultExportPolicy = value
	}
	if value_path == "default-import-policy" {
		config.DefaultImportPolicy = value
	}
	if value_path == "export-policy" {
		config.ExportPolicy = append(config.ExportPolicy, value)
	}
	if value_path == "import-policy" {
		config.ImportPolicy = append(config.ImportPolicy, value)
	}
}

func (config *Bgp_Neighbors_Neighbor_ApplyPolicy_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Neighbors_Neighbor_ApplyPolicy_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_ApplyPolicy_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Neighbors_Neighbor_ApplyPolicy_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Neighbors_Neighbor_ApplyPolicy_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Neighbors_Neighbor_ApplyPolicy_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Neighbors_Neighbor_ApplyPolicy_Config) GetParentYangName() string {
	return "apply-policy"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_ApplyPolicy_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_ApplyPolicy_State struct {
	parent types.Entity
	Filter types.YFilter

	DefaultExportPolicy interface{} // enumeration
	DefaultImportPolicy interface{} // enumeration
	ExportPolicy        []interface{}
	ImportPolicy        []interface{}
}

func (state *Bgp_Neighbors_Neighbor_ApplyPolicy_State) HasDataOrFilter() bool {
	for _, leaf := range state.ExportPolicy {
		if leaf != nil {
			return true
		}
	}
	for _, leaf := range state.ImportPolicy {
		if leaf != nil {
			return true
		}
	}
	return state.DefaultExportPolicy != nil ||
		state.DefaultImportPolicy != nil
}

func (state *Bgp_Neighbors_Neighbor_ApplyPolicy_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Neighbors_Neighbor_ApplyPolicy_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_ApplyPolicy_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.DefaultExportPolicy != nil {
		switch state.DefaultExportPolicy.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.DefaultExportPolicy.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.DefaultExportPolicy)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "default-export-policy", Data: leafData})
		}
	}

	if state.DefaultImportPolicy != nil {
		switch state.DefaultImportPolicy.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.DefaultImportPolicy.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.DefaultImportPolicy)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "default-import-policy", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Neighbors_Neighbor_ApplyPolicy_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Neighbors_Neighbor_ApplyPolicy_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Neighbors_Neighbor_ApplyPolicy_State) SetValue(value_path string, value string) {
	if value_path == "default-export-policy" {
		state.DefaultExportPolicy = value
	}
	if value_path == "default-import-policy" {
		state.DefaultImportPolicy = value
	}
	if value_path == "export-policy" {
		state.ExportPolicy = append(state.ExportPolicy, value)
	}
	if value_path == "import-policy" {
		state.ImportPolicy = append(state.ImportPolicy, value)
	}
}

func (state *Bgp_Neighbors_Neighbor_ApplyPolicy_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Neighbors_Neighbor_ApplyPolicy_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_ApplyPolicy_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Neighbors_Neighbor_ApplyPolicy_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Neighbors_Neighbor_ApplyPolicy_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Neighbors_Neighbor_ApplyPolicy_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Neighbors_Neighbor_ApplyPolicy_State) GetParentYangName() string {
	return "apply-policy"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis struct {
	parent types.Entity
	Filter types.YFilter

	AfiSafi []Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi
}

func (afiSafis *Bgp_Neighbors_Neighbor_AfiSafis) HasDataOrFilter() bool {
	for _, child := range afiSafis.AfiSafi {
		if child.HasDataOrFilter() {
			return true
		}
	}
	return false
}

func (afiSafis *Bgp_Neighbors_Neighbor_AfiSafis) GetFilter() types.YFilter {
	return afiSafis.Filter
}

func (afiSafis *Bgp_Neighbors_Neighbor_AfiSafis) GetSegmentPath() string {
	return "afi-safis"
}

func (afiSafis *Bgp_Neighbors_Neighbor_AfiSafis) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: afiSafis.GetSegmentPath()}
	return entityPath
}

func (afiSafis *Bgp_Neighbors_Neighbor_AfiSafis) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "afi-safi" {
		for _, c := range afiSafis.AfiSafi {
			if afiSafis.GetSegmentPath() == segment_path {
				return &c
			}
		}
		child := Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi{}
		afiSafis.AfiSafi = append(afiSafis.AfiSafi, child)
		return &afiSafis.AfiSafi[len(afiSafis.AfiSafi)-1]
	}
	return nil
}

func (afiSafis *Bgp_Neighbors_Neighbor_AfiSafis) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	for i := range afiSafis.AfiSafi {
		children[afiSafis.AfiSafi[i].GetSegmentPath()] = &afiSafis.AfiSafi[i]
	}

	return children
}

func (afiSafis *Bgp_Neighbors_Neighbor_AfiSafis) SetValue(value_path string, value string) {
}

func (afiSafis *Bgp_Neighbors_Neighbor_AfiSafis) GetBundleName() string {
	return "ydktest"
}

func (afiSafis *Bgp_Neighbors_Neighbor_AfiSafis) GetYangName() string {
	return "afiSafis"
}

func (afiSafis *Bgp_Neighbors_Neighbor_AfiSafis) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (afiSafis *Bgp_Neighbors_Neighbor_AfiSafis) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (afiSafis *Bgp_Neighbors_Neighbor_AfiSafis) SetParent(parent types.Entity) {
	afiSafis.parent = parent
}

func (afiSafis *Bgp_Neighbors_Neighbor_AfiSafis) GetParent() types.Entity {
	return afiSafis.parent
}

func (afiSafis *Bgp_Neighbors_Neighbor_AfiSafis) GetParentYangName() string {
	return "neighbor"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi struct {
	parent types.Entity
	Filter types.YFilter

	AfiSafiName        interface{} // identityref
	ApplyPolicy        Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy
	Config             Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config
	GracefulRestart    Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart
	Ipv4LabeledUnicast Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast
	Ipv4Unicast        Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast
	Ipv6LabeledUnicast Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast
	Ipv6Unicast        Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast
	L2VpnEvpn          Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn
	L2VpnVpls          Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls
	L3VpnIpv4Multicast Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast
	L3VpnIpv4Unicast   Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast
	L3VpnIpv6Multicast Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast
	L3VpnIpv6Unicast   Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast
	State              Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State
	UseMultiplePaths   Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths
}

func (afiSafi *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) HasDataOrFilter() bool {
	return afiSafi.AfiSafiName != nil ||
		afiSafi.ApplyPolicy.HasDataOrFilter() ||
		afiSafi.Config.HasDataOrFilter() ||
		afiSafi.GracefulRestart.HasDataOrFilter() ||
		afiSafi.Ipv4LabeledUnicast.HasDataOrFilter() ||
		afiSafi.Ipv4Unicast.HasDataOrFilter() ||
		afiSafi.Ipv6LabeledUnicast.HasDataOrFilter() ||
		afiSafi.Ipv6Unicast.HasDataOrFilter() ||
		afiSafi.L2VpnEvpn.HasDataOrFilter() ||
		afiSafi.L2VpnVpls.HasDataOrFilter() ||
		afiSafi.L3VpnIpv4Multicast.HasDataOrFilter() ||
		afiSafi.L3VpnIpv4Unicast.HasDataOrFilter() ||
		afiSafi.L3VpnIpv6Multicast.HasDataOrFilter() ||
		afiSafi.L3VpnIpv6Unicast.HasDataOrFilter() ||
		afiSafi.State.HasDataOrFilter() ||
		afiSafi.UseMultiplePaths.HasDataOrFilter()
}

func (afiSafi *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetFilter() types.YFilter {
	return afiSafi.Filter
}

func (afiSafi *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetSegmentPath() string {
	return "afi-safi" + "[afi-safi-name=\"" + fmt.Sprintf("%v", afiSafi.AfiSafiName) + "\"]"
}

func (afiSafi *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: afiSafi.GetSegmentPath()}
	var leafData types.LeafData

	if afiSafi.AfiSafiName != nil {
		switch afiSafi.AfiSafiName.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: afiSafi.AfiSafiName.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", afiSafi.AfiSafiName)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "afi-safi-name", Data: leafData})
		}
	}

	return entityPath
}

func (afiSafi *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "apply-policy" {
		return &afiSafi.ApplyPolicy
	}
	if child_yang_name == "config" {
		return &afiSafi.Config
	}
	if child_yang_name == "graceful-restart" {
		return &afiSafi.GracefulRestart
	}
	if child_yang_name == "ipv4-labeled-unicast" {
		return &afiSafi.Ipv4LabeledUnicast
	}
	if child_yang_name == "ipv4-unicast" {
		return &afiSafi.Ipv4Unicast
	}
	if child_yang_name == "ipv6-labeled-unicast" {
		return &afiSafi.Ipv6LabeledUnicast
	}
	if child_yang_name == "ipv6-unicast" {
		return &afiSafi.Ipv6Unicast
	}
	if child_yang_name == "l2vpn-evpn" {
		return &afiSafi.L2VpnEvpn
	}
	if child_yang_name == "l2vpn-vpls" {
		return &afiSafi.L2VpnVpls
	}
	if child_yang_name == "l3vpn-ipv4-multicast" {
		return &afiSafi.L3VpnIpv4Multicast
	}
	if child_yang_name == "l3vpn-ipv4-unicast" {
		return &afiSafi.L3VpnIpv4Unicast
	}
	if child_yang_name == "l3vpn-ipv6-multicast" {
		return &afiSafi.L3VpnIpv6Multicast
	}
	if child_yang_name == "l3vpn-ipv6-unicast" {
		return &afiSafi.L3VpnIpv6Unicast
	}
	if child_yang_name == "state" {
		return &afiSafi.State
	}
	if child_yang_name == "use-multiple-paths" {
		return &afiSafi.UseMultiplePaths
	}
	return nil
}

func (afiSafi *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["apply-policy"] = &afiSafi.ApplyPolicy
	children["config"] = &afiSafi.Config
	children["graceful-restart"] = &afiSafi.GracefulRestart
	children["ipv4-labeled-unicast"] = &afiSafi.Ipv4LabeledUnicast
	children["ipv4-unicast"] = &afiSafi.Ipv4Unicast
	children["ipv6-labeled-unicast"] = &afiSafi.Ipv6LabeledUnicast
	children["ipv6-unicast"] = &afiSafi.Ipv6Unicast
	children["l2vpn-evpn"] = &afiSafi.L2VpnEvpn
	children["l2vpn-vpls"] = &afiSafi.L2VpnVpls
	children["l3vpn-ipv4-multicast"] = &afiSafi.L3VpnIpv4Multicast
	children["l3vpn-ipv4-unicast"] = &afiSafi.L3VpnIpv4Unicast
	children["l3vpn-ipv6-multicast"] = &afiSafi.L3VpnIpv6Multicast
	children["l3vpn-ipv6-unicast"] = &afiSafi.L3VpnIpv6Unicast
	children["state"] = &afiSafi.State
	children["use-multiple-paths"] = &afiSafi.UseMultiplePaths

	return children
}

func (afiSafi *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) SetValue(value_path string, value string) {
	if value_path == "afi-safi-name" {
		afiSafi.AfiSafiName = value
	}
}

func (afiSafi *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetBundleName() string {
	return "ydktest"
}

func (afiSafi *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetYangName() string {
	return "afiSafi"
}

func (afiSafi *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (afiSafi *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (afiSafi *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) SetParent(parent types.Entity) {
	afiSafi.parent = parent
}

func (afiSafi *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetParent() types.Entity {
	return afiSafi.parent
}

func (afiSafi *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi) GetParentYangName() string {
	return "afi-safis"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config struct {
	parent types.Entity
	Filter types.YFilter

	AfiSafiName interface{} // identityref
	Enabled     interface{} // boolean
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config) HasDataOrFilter() bool {
	return config.AfiSafiName != nil ||
		config.Enabled != nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.AfiSafiName != nil {
		switch config.AfiSafiName.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.AfiSafiName.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.AfiSafiName)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "afi-safi-name", Data: leafData})
		}
	}

	if config.Enabled != nil {
		switch config.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config) SetValue(value_path string, value string) {
	if value_path == "afi-safi-name" {
		config.AfiSafiName = value
	}
	if value_path == "enabled" {
		config.Enabled = value
	}
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Config) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State struct {
	parent types.Entity
	Filter types.YFilter

	Active      interface{} // boolean
	AfiSafiName interface{} // identityref
	Enabled     interface{} // boolean
	Prefixes    Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State) HasDataOrFilter() bool {
	return state.Active != nil ||
		state.AfiSafiName != nil ||
		state.Enabled != nil ||
		state.Prefixes.HasDataOrFilter()
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.Active != nil {
		switch state.Active.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.Active.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.Active)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "active", Data: leafData})
		}
	}

	if state.AfiSafiName != nil {
		switch state.AfiSafiName.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.AfiSafiName.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.AfiSafiName)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "afi-safi-name", Data: leafData})
		}
	}

	if state.Enabled != nil {
		switch state.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "prefixes" {
		return &state.Prefixes
	}
	return nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["prefixes"] = &state.Prefixes

	return children
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State) SetValue(value_path string, value string) {
	if value_path == "active" {
		state.Active = value
	}
	if value_path == "afi-safi-name" {
		state.AfiSafiName = value
	}
	if value_path == "enabled" {
		state.Enabled = value
	}
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes struct {
	parent types.Entity
	Filter types.YFilter

	Installed interface{} // uint32
	Received  interface{} // uint32
	Sent      interface{} // uint32
}

func (prefixes *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes) HasDataOrFilter() bool {
	return prefixes.Installed != nil ||
		prefixes.Received != nil ||
		prefixes.Sent != nil
}

func (prefixes *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes) GetFilter() types.YFilter {
	return prefixes.Filter
}

func (prefixes *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes) GetSegmentPath() string {
	return "prefixes"
}

func (prefixes *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixes.GetSegmentPath()}
	var leafData types.LeafData

	if prefixes.Installed != nil {
		switch prefixes.Installed.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: prefixes.Installed.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", prefixes.Installed)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "installed", Data: leafData})
		}
	}

	if prefixes.Received != nil {
		switch prefixes.Received.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: prefixes.Received.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", prefixes.Received)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "received", Data: leafData})
		}
	}

	if prefixes.Sent != nil {
		switch prefixes.Sent.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: prefixes.Sent.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", prefixes.Sent)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "sent", Data: leafData})
		}
	}

	return entityPath
}

func (prefixes *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (prefixes *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (prefixes *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes) SetValue(value_path string, value string) {
	if value_path == "installed" {
		prefixes.Installed = value
	}
	if value_path == "received" {
		prefixes.Received = value
	}
	if value_path == "sent" {
		prefixes.Sent = value
	}
}

func (prefixes *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes) GetBundleName() string {
	return "ydktest"
}

func (prefixes *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes) GetYangName() string {
	return "prefixes"
}

func (prefixes *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixes *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixes *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes) SetParent(parent types.Entity) {
	prefixes.parent = parent
}

func (prefixes *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes) GetParent() types.Entity {
	return prefixes.parent
}

func (prefixes *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_State_Prefixes) GetParentYangName() string {
	return "state"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config
	State  Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State
}

func (gracefulRestart *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart) HasDataOrFilter() bool {
	return gracefulRestart.Config.HasDataOrFilter() ||
		gracefulRestart.State.HasDataOrFilter()
}

func (gracefulRestart *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart) GetFilter() types.YFilter {
	return gracefulRestart.Filter
}

func (gracefulRestart *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart) GetSegmentPath() string {
	return "graceful-restart"
}

func (gracefulRestart *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: gracefulRestart.GetSegmentPath()}
	return entityPath
}

func (gracefulRestart *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &gracefulRestart.Config
	}
	if child_yang_name == "state" {
		return &gracefulRestart.State
	}
	return nil
}

func (gracefulRestart *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &gracefulRestart.Config
	children["state"] = &gracefulRestart.State

	return children
}

func (gracefulRestart *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart) SetValue(value_path string, value string) {
}

func (gracefulRestart *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart) GetBundleName() string {
	return "ydktest"
}

func (gracefulRestart *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart) GetYangName() string {
	return "gracefulRestart"
}

func (gracefulRestart *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (gracefulRestart *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (gracefulRestart *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart) SetParent(parent types.Entity) {
	gracefulRestart.parent = parent
}

func (gracefulRestart *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart) GetParent() types.Entity {
	return gracefulRestart.parent
}

func (gracefulRestart *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config struct {
	parent types.Entity
	Filter types.YFilter

	Enabled interface{} // boolean
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config) HasDataOrFilter() bool {
	return config.Enabled != nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.Enabled != nil {
		switch config.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config) SetValue(value_path string, value string) {
	if value_path == "enabled" {
		config.Enabled = value
	}
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_Config) GetParentYangName() string {
	return "graceful-restart"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State struct {
	parent types.Entity
	Filter types.YFilter

	Advertised interface{} // boolean
	Enabled    interface{} // boolean
	Received   interface{} // boolean
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State) HasDataOrFilter() bool {
	return state.Advertised != nil ||
		state.Enabled != nil ||
		state.Received != nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.Advertised != nil {
		switch state.Advertised.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.Advertised.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.Advertised)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "advertised", Data: leafData})
		}
	}

	if state.Enabled != nil {
		switch state.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	if state.Received != nil {
		switch state.Received.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.Received.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.Received)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "received", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State) SetValue(value_path string, value string) {
	if value_path == "advertised" {
		state.Advertised = value
	}
	if value_path == "enabled" {
		state.Enabled = value
	}
	if value_path == "received" {
		state.Received = value
	}
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_GracefulRestart_State) GetParentYangName() string {
	return "graceful-restart"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config
	State  Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State
}

func (applyPolicy *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy) HasDataOrFilter() bool {
	return applyPolicy.Config.HasDataOrFilter() ||
		applyPolicy.State.HasDataOrFilter()
}

func (applyPolicy *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy) GetFilter() types.YFilter {
	return applyPolicy.Filter
}

func (applyPolicy *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy) GetSegmentPath() string {
	return "apply-policy"
}

func (applyPolicy *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: applyPolicy.GetSegmentPath()}
	return entityPath
}

func (applyPolicy *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &applyPolicy.Config
	}
	if child_yang_name == "state" {
		return &applyPolicy.State
	}
	return nil
}

func (applyPolicy *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &applyPolicy.Config
	children["state"] = &applyPolicy.State

	return children
}

func (applyPolicy *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy) SetValue(value_path string, value string) {
}

func (applyPolicy *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy) GetBundleName() string {
	return "ydktest"
}

func (applyPolicy *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy) GetYangName() string {
	return "applyPolicy"
}

func (applyPolicy *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (applyPolicy *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (applyPolicy *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy) SetParent(parent types.Entity) {
	applyPolicy.parent = parent
}

func (applyPolicy *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy) GetParent() types.Entity {
	return applyPolicy.parent
}

func (applyPolicy *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config struct {
	parent types.Entity
	Filter types.YFilter

	DefaultExportPolicy interface{} // enumeration
	DefaultImportPolicy interface{} // enumeration
	ExportPolicy        []interface{}
	ImportPolicy        []interface{}
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config) HasDataOrFilter() bool {
	for _, leaf := range config.ExportPolicy {
		if leaf != nil {
			return true
		}
	}
	for _, leaf := range config.ImportPolicy {
		if leaf != nil {
			return true
		}
	}
	return config.DefaultExportPolicy != nil ||
		config.DefaultImportPolicy != nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.DefaultExportPolicy != nil {
		switch config.DefaultExportPolicy.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.DefaultExportPolicy.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.DefaultExportPolicy)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "default-export-policy", Data: leafData})
		}
	}

	if config.DefaultImportPolicy != nil {
		switch config.DefaultImportPolicy.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.DefaultImportPolicy.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.DefaultImportPolicy)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "default-import-policy", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config) SetValue(value_path string, value string) {
	if value_path == "default-export-policy" {
		config.DefaultExportPolicy = value
	}
	if value_path == "default-import-policy" {
		config.DefaultImportPolicy = value
	}
	if value_path == "export-policy" {
		config.ExportPolicy = append(config.ExportPolicy, value)
	}
	if value_path == "import-policy" {
		config.ImportPolicy = append(config.ImportPolicy, value)
	}
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_Config) GetParentYangName() string {
	return "apply-policy"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State struct {
	parent types.Entity
	Filter types.YFilter

	DefaultExportPolicy interface{} // enumeration
	DefaultImportPolicy interface{} // enumeration
	ExportPolicy        []interface{}
	ImportPolicy        []interface{}
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State) HasDataOrFilter() bool {
	for _, leaf := range state.ExportPolicy {
		if leaf != nil {
			return true
		}
	}
	for _, leaf := range state.ImportPolicy {
		if leaf != nil {
			return true
		}
	}
	return state.DefaultExportPolicy != nil ||
		state.DefaultImportPolicy != nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.DefaultExportPolicy != nil {
		switch state.DefaultExportPolicy.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.DefaultExportPolicy.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.DefaultExportPolicy)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "default-export-policy", Data: leafData})
		}
	}

	if state.DefaultImportPolicy != nil {
		switch state.DefaultImportPolicy.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.DefaultImportPolicy.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.DefaultImportPolicy)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "default-import-policy", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State) SetValue(value_path string, value string) {
	if value_path == "default-export-policy" {
		state.DefaultExportPolicy = value
	}
	if value_path == "default-import-policy" {
		state.DefaultImportPolicy = value
	}
	if value_path == "export-policy" {
		state.ExportPolicy = append(state.ExportPolicy, value)
	}
	if value_path == "import-policy" {
		state.ImportPolicy = append(state.ImportPolicy, value)
	}
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_ApplyPolicy_State) GetParentYangName() string {
	return "apply-policy"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast struct {
	parent types.Entity
	Filter types.YFilter

	Config      Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config
	PrefixLimit Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit
	State       Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State
}

func (ipv4Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast) HasDataOrFilter() bool {
	return ipv4Unicast.Config.HasDataOrFilter() ||
		ipv4Unicast.PrefixLimit.HasDataOrFilter() ||
		ipv4Unicast.State.HasDataOrFilter()
}

func (ipv4Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast) GetFilter() types.YFilter {
	return ipv4Unicast.Filter
}

func (ipv4Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast) GetSegmentPath() string {
	return "ipv4-unicast"
}

func (ipv4Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: ipv4Unicast.GetSegmentPath()}
	return entityPath
}

func (ipv4Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &ipv4Unicast.Config
	}
	if child_yang_name == "prefix-limit" {
		return &ipv4Unicast.PrefixLimit
	}
	if child_yang_name == "state" {
		return &ipv4Unicast.State
	}
	return nil
}

func (ipv4Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &ipv4Unicast.Config
	children["prefix-limit"] = &ipv4Unicast.PrefixLimit
	children["state"] = &ipv4Unicast.State

	return children
}

func (ipv4Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast) SetValue(value_path string, value string) {
}

func (ipv4Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast) GetBundleName() string {
	return "ydktest"
}

func (ipv4Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast) GetYangName() string {
	return "ipv4Unicast"
}

func (ipv4Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (ipv4Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (ipv4Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast) SetParent(parent types.Entity) {
	ipv4Unicast.parent = parent
}

func (ipv4Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast) GetParent() types.Entity {
	return ipv4Unicast.parent
}

func (ipv4Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config
	State  Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) HasDataOrFilter() bool {
	return prefixLimit.Config.HasDataOrFilter() ||
		prefixLimit.State.HasDataOrFilter()
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetFilter() types.YFilter {
	return prefixLimit.Filter
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetSegmentPath() string {
	return "prefix-limit"
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixLimit.GetSegmentPath()}
	return entityPath
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &prefixLimit.Config
	}
	if child_yang_name == "state" {
		return &prefixLimit.State
	}
	return nil
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &prefixLimit.Config
	children["state"] = &prefixLimit.State

	return children
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) SetValue(value_path string, value string) {
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetBundleName() string {
	return "ydktest"
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetYangName() string {
	return "prefixLimit"
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) SetParent(parent types.Entity) {
	prefixLimit.parent = parent
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetParent() types.Entity {
	return prefixLimit.parent
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetParentYangName() string {
	return "ipv4-unicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) HasDataOrFilter() bool {
	return config.MaxPrefixes != nil ||
		config.RestartTimer != nil ||
		config.ShutdownThresholdPct != nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaxPrefixes != nil {
		switch config.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if config.RestartTimer != nil {
		switch config.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if config.ShutdownThresholdPct != nil {
		switch config.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		config.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		config.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		config.ShutdownThresholdPct = value
	}
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) HasDataOrFilter() bool {
	return state.MaxPrefixes != nil ||
		state.RestartTimer != nil ||
		state.ShutdownThresholdPct != nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaxPrefixes != nil {
		switch state.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if state.RestartTimer != nil {
		switch state.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if state.ShutdownThresholdPct != nil {
		switch state.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		state.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		state.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		state.ShutdownThresholdPct = value
	}
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config struct {
	parent types.Entity
	Filter types.YFilter

	SendDefaultRoute interface{} // boolean
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config) HasDataOrFilter() bool {
	return config.SendDefaultRoute != nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.SendDefaultRoute != nil {
		switch config.SendDefaultRoute.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.SendDefaultRoute.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.SendDefaultRoute)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "send-default-route", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config) SetValue(value_path string, value string) {
	if value_path == "send-default-route" {
		config.SendDefaultRoute = value
	}
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetParentYangName() string {
	return "ipv4-unicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State struct {
	parent types.Entity
	Filter types.YFilter

	SendDefaultRoute interface{} // boolean
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State) HasDataOrFilter() bool {
	return state.SendDefaultRoute != nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.SendDefaultRoute != nil {
		switch state.SendDefaultRoute.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.SendDefaultRoute.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.SendDefaultRoute)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "send-default-route", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State) SetValue(value_path string, value string) {
	if value_path == "send-default-route" {
		state.SendDefaultRoute = value
	}
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4Unicast_State) GetParentYangName() string {
	return "ipv4-unicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast struct {
	parent types.Entity
	Filter types.YFilter

	Config      Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config
	PrefixLimit Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit
	State       Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State
}

func (ipv6Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast) HasDataOrFilter() bool {
	return ipv6Unicast.Config.HasDataOrFilter() ||
		ipv6Unicast.PrefixLimit.HasDataOrFilter() ||
		ipv6Unicast.State.HasDataOrFilter()
}

func (ipv6Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast) GetFilter() types.YFilter {
	return ipv6Unicast.Filter
}

func (ipv6Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast) GetSegmentPath() string {
	return "ipv6-unicast"
}

func (ipv6Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: ipv6Unicast.GetSegmentPath()}
	return entityPath
}

func (ipv6Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &ipv6Unicast.Config
	}
	if child_yang_name == "prefix-limit" {
		return &ipv6Unicast.PrefixLimit
	}
	if child_yang_name == "state" {
		return &ipv6Unicast.State
	}
	return nil
}

func (ipv6Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &ipv6Unicast.Config
	children["prefix-limit"] = &ipv6Unicast.PrefixLimit
	children["state"] = &ipv6Unicast.State

	return children
}

func (ipv6Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast) SetValue(value_path string, value string) {
}

func (ipv6Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast) GetBundleName() string {
	return "ydktest"
}

func (ipv6Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast) GetYangName() string {
	return "ipv6Unicast"
}

func (ipv6Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (ipv6Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (ipv6Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast) SetParent(parent types.Entity) {
	ipv6Unicast.parent = parent
}

func (ipv6Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast) GetParent() types.Entity {
	return ipv6Unicast.parent
}

func (ipv6Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config
	State  Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) HasDataOrFilter() bool {
	return prefixLimit.Config.HasDataOrFilter() ||
		prefixLimit.State.HasDataOrFilter()
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetFilter() types.YFilter {
	return prefixLimit.Filter
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetSegmentPath() string {
	return "prefix-limit"
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixLimit.GetSegmentPath()}
	return entityPath
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &prefixLimit.Config
	}
	if child_yang_name == "state" {
		return &prefixLimit.State
	}
	return nil
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &prefixLimit.Config
	children["state"] = &prefixLimit.State

	return children
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) SetValue(value_path string, value string) {
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetBundleName() string {
	return "ydktest"
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetYangName() string {
	return "prefixLimit"
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) SetParent(parent types.Entity) {
	prefixLimit.parent = parent
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetParent() types.Entity {
	return prefixLimit.parent
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetParentYangName() string {
	return "ipv6-unicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) HasDataOrFilter() bool {
	return config.MaxPrefixes != nil ||
		config.RestartTimer != nil ||
		config.ShutdownThresholdPct != nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaxPrefixes != nil {
		switch config.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if config.RestartTimer != nil {
		switch config.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if config.ShutdownThresholdPct != nil {
		switch config.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		config.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		config.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		config.ShutdownThresholdPct = value
	}
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) HasDataOrFilter() bool {
	return state.MaxPrefixes != nil ||
		state.RestartTimer != nil ||
		state.ShutdownThresholdPct != nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaxPrefixes != nil {
		switch state.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if state.RestartTimer != nil {
		switch state.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if state.ShutdownThresholdPct != nil {
		switch state.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		state.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		state.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		state.ShutdownThresholdPct = value
	}
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config struct {
	parent types.Entity
	Filter types.YFilter

	SendDefaultRoute interface{} // boolean
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config) HasDataOrFilter() bool {
	return config.SendDefaultRoute != nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.SendDefaultRoute != nil {
		switch config.SendDefaultRoute.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.SendDefaultRoute.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.SendDefaultRoute)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "send-default-route", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config) SetValue(value_path string, value string) {
	if value_path == "send-default-route" {
		config.SendDefaultRoute = value
	}
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetParentYangName() string {
	return "ipv6-unicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State struct {
	parent types.Entity
	Filter types.YFilter

	SendDefaultRoute interface{} // boolean
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State) HasDataOrFilter() bool {
	return state.SendDefaultRoute != nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.SendDefaultRoute != nil {
		switch state.SendDefaultRoute.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.SendDefaultRoute.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.SendDefaultRoute)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "send-default-route", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State) SetValue(value_path string, value string) {
	if value_path == "send-default-route" {
		state.SendDefaultRoute = value
	}
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6Unicast_State) GetParentYangName() string {
	return "ipv6-unicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast struct {
	parent types.Entity
	Filter types.YFilter

	PrefixLimit Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
}

func (ipv4LabeledUnicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast) HasDataOrFilter() bool {
	return ipv4LabeledUnicast.PrefixLimit.HasDataOrFilter()
}

func (ipv4LabeledUnicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetFilter() types.YFilter {
	return ipv4LabeledUnicast.Filter
}

func (ipv4LabeledUnicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetSegmentPath() string {
	return "ipv4-labeled-unicast"
}

func (ipv4LabeledUnicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: ipv4LabeledUnicast.GetSegmentPath()}
	return entityPath
}

func (ipv4LabeledUnicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "prefix-limit" {
		return &ipv4LabeledUnicast.PrefixLimit
	}
	return nil
}

func (ipv4LabeledUnicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["prefix-limit"] = &ipv4LabeledUnicast.PrefixLimit

	return children
}

func (ipv4LabeledUnicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast) SetValue(value_path string, value string) {
}

func (ipv4LabeledUnicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetBundleName() string {
	return "ydktest"
}

func (ipv4LabeledUnicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetYangName() string {
	return "ipv4LabeledUnicast"
}

func (ipv4LabeledUnicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (ipv4LabeledUnicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (ipv4LabeledUnicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast) SetParent(parent types.Entity) {
	ipv4LabeledUnicast.parent = parent
}

func (ipv4LabeledUnicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetParent() types.Entity {
	return ipv4LabeledUnicast.parent
}

func (ipv4LabeledUnicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config
	State  Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) HasDataOrFilter() bool {
	return prefixLimit.Config.HasDataOrFilter() ||
		prefixLimit.State.HasDataOrFilter()
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetFilter() types.YFilter {
	return prefixLimit.Filter
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetSegmentPath() string {
	return "prefix-limit"
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixLimit.GetSegmentPath()}
	return entityPath
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &prefixLimit.Config
	}
	if child_yang_name == "state" {
		return &prefixLimit.State
	}
	return nil
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &prefixLimit.Config
	children["state"] = &prefixLimit.State

	return children
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) SetValue(value_path string, value string) {
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetBundleName() string {
	return "ydktest"
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetYangName() string {
	return "prefixLimit"
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) SetParent(parent types.Entity) {
	prefixLimit.parent = parent
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetParent() types.Entity {
	return prefixLimit.parent
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetParentYangName() string {
	return "ipv4-labeled-unicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) HasDataOrFilter() bool {
	return config.MaxPrefixes != nil ||
		config.RestartTimer != nil ||
		config.ShutdownThresholdPct != nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaxPrefixes != nil {
		switch config.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if config.RestartTimer != nil {
		switch config.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if config.ShutdownThresholdPct != nil {
		switch config.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		config.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		config.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		config.ShutdownThresholdPct = value
	}
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) HasDataOrFilter() bool {
	return state.MaxPrefixes != nil ||
		state.RestartTimer != nil ||
		state.ShutdownThresholdPct != nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaxPrefixes != nil {
		switch state.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if state.RestartTimer != nil {
		switch state.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if state.ShutdownThresholdPct != nil {
		switch state.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		state.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		state.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		state.ShutdownThresholdPct = value
	}
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast struct {
	parent types.Entity
	Filter types.YFilter

	PrefixLimit Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
}

func (ipv6LabeledUnicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast) HasDataOrFilter() bool {
	return ipv6LabeledUnicast.PrefixLimit.HasDataOrFilter()
}

func (ipv6LabeledUnicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetFilter() types.YFilter {
	return ipv6LabeledUnicast.Filter
}

func (ipv6LabeledUnicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetSegmentPath() string {
	return "ipv6-labeled-unicast"
}

func (ipv6LabeledUnicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: ipv6LabeledUnicast.GetSegmentPath()}
	return entityPath
}

func (ipv6LabeledUnicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "prefix-limit" {
		return &ipv6LabeledUnicast.PrefixLimit
	}
	return nil
}

func (ipv6LabeledUnicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["prefix-limit"] = &ipv6LabeledUnicast.PrefixLimit

	return children
}

func (ipv6LabeledUnicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast) SetValue(value_path string, value string) {
}

func (ipv6LabeledUnicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetBundleName() string {
	return "ydktest"
}

func (ipv6LabeledUnicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetYangName() string {
	return "ipv6LabeledUnicast"
}

func (ipv6LabeledUnicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (ipv6LabeledUnicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (ipv6LabeledUnicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast) SetParent(parent types.Entity) {
	ipv6LabeledUnicast.parent = parent
}

func (ipv6LabeledUnicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetParent() types.Entity {
	return ipv6LabeledUnicast.parent
}

func (ipv6LabeledUnicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config
	State  Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) HasDataOrFilter() bool {
	return prefixLimit.Config.HasDataOrFilter() ||
		prefixLimit.State.HasDataOrFilter()
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetFilter() types.YFilter {
	return prefixLimit.Filter
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetSegmentPath() string {
	return "prefix-limit"
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixLimit.GetSegmentPath()}
	return entityPath
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &prefixLimit.Config
	}
	if child_yang_name == "state" {
		return &prefixLimit.State
	}
	return nil
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &prefixLimit.Config
	children["state"] = &prefixLimit.State

	return children
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) SetValue(value_path string, value string) {
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetBundleName() string {
	return "ydktest"
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetYangName() string {
	return "prefixLimit"
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) SetParent(parent types.Entity) {
	prefixLimit.parent = parent
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetParent() types.Entity {
	return prefixLimit.parent
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetParentYangName() string {
	return "ipv6-labeled-unicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) HasDataOrFilter() bool {
	return config.MaxPrefixes != nil ||
		config.RestartTimer != nil ||
		config.ShutdownThresholdPct != nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaxPrefixes != nil {
		switch config.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if config.RestartTimer != nil {
		switch config.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if config.ShutdownThresholdPct != nil {
		switch config.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		config.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		config.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		config.ShutdownThresholdPct = value
	}
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) HasDataOrFilter() bool {
	return state.MaxPrefixes != nil ||
		state.RestartTimer != nil ||
		state.ShutdownThresholdPct != nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaxPrefixes != nil {
		switch state.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if state.RestartTimer != nil {
		switch state.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if state.ShutdownThresholdPct != nil {
		switch state.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		state.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		state.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		state.ShutdownThresholdPct = value
	}
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast struct {
	parent types.Entity
	Filter types.YFilter

	PrefixLimit Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
}

func (l3VpnIpv4Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast) HasDataOrFilter() bool {
	return l3VpnIpv4Unicast.PrefixLimit.HasDataOrFilter()
}

func (l3VpnIpv4Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetFilter() types.YFilter {
	return l3VpnIpv4Unicast.Filter
}

func (l3VpnIpv4Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetSegmentPath() string {
	return "l3vpn-ipv4-unicast"
}

func (l3VpnIpv4Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: l3VpnIpv4Unicast.GetSegmentPath()}
	return entityPath
}

func (l3VpnIpv4Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "prefix-limit" {
		return &l3VpnIpv4Unicast.PrefixLimit
	}
	return nil
}

func (l3VpnIpv4Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["prefix-limit"] = &l3VpnIpv4Unicast.PrefixLimit

	return children
}

func (l3VpnIpv4Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast) SetValue(value_path string, value string) {
}

func (l3VpnIpv4Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetBundleName() string {
	return "ydktest"
}

func (l3VpnIpv4Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetYangName() string {
	return "l3VpnIpv4Unicast"
}

func (l3VpnIpv4Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (l3VpnIpv4Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (l3VpnIpv4Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast) SetParent(parent types.Entity) {
	l3VpnIpv4Unicast.parent = parent
}

func (l3VpnIpv4Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetParent() types.Entity {
	return l3VpnIpv4Unicast.parent
}

func (l3VpnIpv4Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config
	State  Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) HasDataOrFilter() bool {
	return prefixLimit.Config.HasDataOrFilter() ||
		prefixLimit.State.HasDataOrFilter()
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetFilter() types.YFilter {
	return prefixLimit.Filter
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetSegmentPath() string {
	return "prefix-limit"
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixLimit.GetSegmentPath()}
	return entityPath
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &prefixLimit.Config
	}
	if child_yang_name == "state" {
		return &prefixLimit.State
	}
	return nil
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &prefixLimit.Config
	children["state"] = &prefixLimit.State

	return children
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) SetValue(value_path string, value string) {
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetBundleName() string {
	return "ydktest"
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetYangName() string {
	return "prefixLimit"
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) SetParent(parent types.Entity) {
	prefixLimit.parent = parent
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetParent() types.Entity {
	return prefixLimit.parent
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetParentYangName() string {
	return "l3vpn-ipv4-unicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) HasDataOrFilter() bool {
	return config.MaxPrefixes != nil ||
		config.RestartTimer != nil ||
		config.ShutdownThresholdPct != nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaxPrefixes != nil {
		switch config.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if config.RestartTimer != nil {
		switch config.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if config.ShutdownThresholdPct != nil {
		switch config.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		config.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		config.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		config.ShutdownThresholdPct = value
	}
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) HasDataOrFilter() bool {
	return state.MaxPrefixes != nil ||
		state.RestartTimer != nil ||
		state.ShutdownThresholdPct != nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaxPrefixes != nil {
		switch state.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if state.RestartTimer != nil {
		switch state.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if state.ShutdownThresholdPct != nil {
		switch state.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		state.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		state.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		state.ShutdownThresholdPct = value
	}
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast struct {
	parent types.Entity
	Filter types.YFilter

	PrefixLimit Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
}

func (l3VpnIpv6Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast) HasDataOrFilter() bool {
	return l3VpnIpv6Unicast.PrefixLimit.HasDataOrFilter()
}

func (l3VpnIpv6Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetFilter() types.YFilter {
	return l3VpnIpv6Unicast.Filter
}

func (l3VpnIpv6Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetSegmentPath() string {
	return "l3vpn-ipv6-unicast"
}

func (l3VpnIpv6Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: l3VpnIpv6Unicast.GetSegmentPath()}
	return entityPath
}

func (l3VpnIpv6Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "prefix-limit" {
		return &l3VpnIpv6Unicast.PrefixLimit
	}
	return nil
}

func (l3VpnIpv6Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["prefix-limit"] = &l3VpnIpv6Unicast.PrefixLimit

	return children
}

func (l3VpnIpv6Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast) SetValue(value_path string, value string) {
}

func (l3VpnIpv6Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetBundleName() string {
	return "ydktest"
}

func (l3VpnIpv6Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetYangName() string {
	return "l3VpnIpv6Unicast"
}

func (l3VpnIpv6Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (l3VpnIpv6Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (l3VpnIpv6Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast) SetParent(parent types.Entity) {
	l3VpnIpv6Unicast.parent = parent
}

func (l3VpnIpv6Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetParent() types.Entity {
	return l3VpnIpv6Unicast.parent
}

func (l3VpnIpv6Unicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config
	State  Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) HasDataOrFilter() bool {
	return prefixLimit.Config.HasDataOrFilter() ||
		prefixLimit.State.HasDataOrFilter()
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetFilter() types.YFilter {
	return prefixLimit.Filter
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetSegmentPath() string {
	return "prefix-limit"
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixLimit.GetSegmentPath()}
	return entityPath
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &prefixLimit.Config
	}
	if child_yang_name == "state" {
		return &prefixLimit.State
	}
	return nil
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &prefixLimit.Config
	children["state"] = &prefixLimit.State

	return children
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) SetValue(value_path string, value string) {
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetBundleName() string {
	return "ydktest"
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetYangName() string {
	return "prefixLimit"
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) SetParent(parent types.Entity) {
	prefixLimit.parent = parent
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetParent() types.Entity {
	return prefixLimit.parent
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetParentYangName() string {
	return "l3vpn-ipv6-unicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) HasDataOrFilter() bool {
	return config.MaxPrefixes != nil ||
		config.RestartTimer != nil ||
		config.ShutdownThresholdPct != nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaxPrefixes != nil {
		switch config.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if config.RestartTimer != nil {
		switch config.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if config.ShutdownThresholdPct != nil {
		switch config.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		config.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		config.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		config.ShutdownThresholdPct = value
	}
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) HasDataOrFilter() bool {
	return state.MaxPrefixes != nil ||
		state.RestartTimer != nil ||
		state.ShutdownThresholdPct != nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaxPrefixes != nil {
		switch state.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if state.RestartTimer != nil {
		switch state.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if state.ShutdownThresholdPct != nil {
		switch state.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		state.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		state.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		state.ShutdownThresholdPct = value
	}
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast struct {
	parent types.Entity
	Filter types.YFilter

	PrefixLimit Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit
}

func (l3VpnIpv4Multicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast) HasDataOrFilter() bool {
	return l3VpnIpv4Multicast.PrefixLimit.HasDataOrFilter()
}

func (l3VpnIpv4Multicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetFilter() types.YFilter {
	return l3VpnIpv4Multicast.Filter
}

func (l3VpnIpv4Multicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetSegmentPath() string {
	return "l3vpn-ipv4-multicast"
}

func (l3VpnIpv4Multicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: l3VpnIpv4Multicast.GetSegmentPath()}
	return entityPath
}

func (l3VpnIpv4Multicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "prefix-limit" {
		return &l3VpnIpv4Multicast.PrefixLimit
	}
	return nil
}

func (l3VpnIpv4Multicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["prefix-limit"] = &l3VpnIpv4Multicast.PrefixLimit

	return children
}

func (l3VpnIpv4Multicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast) SetValue(value_path string, value string) {
}

func (l3VpnIpv4Multicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetBundleName() string {
	return "ydktest"
}

func (l3VpnIpv4Multicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetYangName() string {
	return "l3VpnIpv4Multicast"
}

func (l3VpnIpv4Multicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (l3VpnIpv4Multicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (l3VpnIpv4Multicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast) SetParent(parent types.Entity) {
	l3VpnIpv4Multicast.parent = parent
}

func (l3VpnIpv4Multicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetParent() types.Entity {
	return l3VpnIpv4Multicast.parent
}

func (l3VpnIpv4Multicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config
	State  Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) HasDataOrFilter() bool {
	return prefixLimit.Config.HasDataOrFilter() ||
		prefixLimit.State.HasDataOrFilter()
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetFilter() types.YFilter {
	return prefixLimit.Filter
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetSegmentPath() string {
	return "prefix-limit"
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixLimit.GetSegmentPath()}
	return entityPath
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &prefixLimit.Config
	}
	if child_yang_name == "state" {
		return &prefixLimit.State
	}
	return nil
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &prefixLimit.Config
	children["state"] = &prefixLimit.State

	return children
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) SetValue(value_path string, value string) {
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetBundleName() string {
	return "ydktest"
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetYangName() string {
	return "prefixLimit"
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) SetParent(parent types.Entity) {
	prefixLimit.parent = parent
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetParent() types.Entity {
	return prefixLimit.parent
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetParentYangName() string {
	return "l3vpn-ipv4-multicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) HasDataOrFilter() bool {
	return config.MaxPrefixes != nil ||
		config.RestartTimer != nil ||
		config.ShutdownThresholdPct != nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaxPrefixes != nil {
		switch config.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if config.RestartTimer != nil {
		switch config.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if config.ShutdownThresholdPct != nil {
		switch config.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		config.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		config.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		config.ShutdownThresholdPct = value
	}
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) HasDataOrFilter() bool {
	return state.MaxPrefixes != nil ||
		state.RestartTimer != nil ||
		state.ShutdownThresholdPct != nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaxPrefixes != nil {
		switch state.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if state.RestartTimer != nil {
		switch state.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if state.ShutdownThresholdPct != nil {
		switch state.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		state.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		state.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		state.ShutdownThresholdPct = value
	}
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast struct {
	parent types.Entity
	Filter types.YFilter

	PrefixLimit Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit
}

func (l3VpnIpv6Multicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast) HasDataOrFilter() bool {
	return l3VpnIpv6Multicast.PrefixLimit.HasDataOrFilter()
}

func (l3VpnIpv6Multicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetFilter() types.YFilter {
	return l3VpnIpv6Multicast.Filter
}

func (l3VpnIpv6Multicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetSegmentPath() string {
	return "l3vpn-ipv6-multicast"
}

func (l3VpnIpv6Multicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: l3VpnIpv6Multicast.GetSegmentPath()}
	return entityPath
}

func (l3VpnIpv6Multicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "prefix-limit" {
		return &l3VpnIpv6Multicast.PrefixLimit
	}
	return nil
}

func (l3VpnIpv6Multicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["prefix-limit"] = &l3VpnIpv6Multicast.PrefixLimit

	return children
}

func (l3VpnIpv6Multicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast) SetValue(value_path string, value string) {
}

func (l3VpnIpv6Multicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetBundleName() string {
	return "ydktest"
}

func (l3VpnIpv6Multicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetYangName() string {
	return "l3VpnIpv6Multicast"
}

func (l3VpnIpv6Multicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (l3VpnIpv6Multicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (l3VpnIpv6Multicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast) SetParent(parent types.Entity) {
	l3VpnIpv6Multicast.parent = parent
}

func (l3VpnIpv6Multicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetParent() types.Entity {
	return l3VpnIpv6Multicast.parent
}

func (l3VpnIpv6Multicast *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config
	State  Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) HasDataOrFilter() bool {
	return prefixLimit.Config.HasDataOrFilter() ||
		prefixLimit.State.HasDataOrFilter()
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetFilter() types.YFilter {
	return prefixLimit.Filter
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetSegmentPath() string {
	return "prefix-limit"
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixLimit.GetSegmentPath()}
	return entityPath
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &prefixLimit.Config
	}
	if child_yang_name == "state" {
		return &prefixLimit.State
	}
	return nil
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &prefixLimit.Config
	children["state"] = &prefixLimit.State

	return children
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) SetValue(value_path string, value string) {
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetBundleName() string {
	return "ydktest"
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetYangName() string {
	return "prefixLimit"
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) SetParent(parent types.Entity) {
	prefixLimit.parent = parent
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetParent() types.Entity {
	return prefixLimit.parent
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetParentYangName() string {
	return "l3vpn-ipv6-multicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) HasDataOrFilter() bool {
	return config.MaxPrefixes != nil ||
		config.RestartTimer != nil ||
		config.ShutdownThresholdPct != nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaxPrefixes != nil {
		switch config.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if config.RestartTimer != nil {
		switch config.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if config.ShutdownThresholdPct != nil {
		switch config.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		config.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		config.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		config.ShutdownThresholdPct = value
	}
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) HasDataOrFilter() bool {
	return state.MaxPrefixes != nil ||
		state.RestartTimer != nil ||
		state.ShutdownThresholdPct != nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaxPrefixes != nil {
		switch state.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if state.RestartTimer != nil {
		switch state.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if state.ShutdownThresholdPct != nil {
		switch state.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		state.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		state.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		state.ShutdownThresholdPct = value
	}
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls struct {
	parent types.Entity
	Filter types.YFilter

	PrefixLimit Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit
}

func (l2VpnVpls *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls) HasDataOrFilter() bool {
	return l2VpnVpls.PrefixLimit.HasDataOrFilter()
}

func (l2VpnVpls *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls) GetFilter() types.YFilter {
	return l2VpnVpls.Filter
}

func (l2VpnVpls *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls) GetSegmentPath() string {
	return "l2vpn-vpls"
}

func (l2VpnVpls *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: l2VpnVpls.GetSegmentPath()}
	return entityPath
}

func (l2VpnVpls *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "prefix-limit" {
		return &l2VpnVpls.PrefixLimit
	}
	return nil
}

func (l2VpnVpls *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["prefix-limit"] = &l2VpnVpls.PrefixLimit

	return children
}

func (l2VpnVpls *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls) SetValue(value_path string, value string) {
}

func (l2VpnVpls *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls) GetBundleName() string {
	return "ydktest"
}

func (l2VpnVpls *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls) GetYangName() string {
	return "l2VpnVpls"
}

func (l2VpnVpls *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (l2VpnVpls *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (l2VpnVpls *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls) SetParent(parent types.Entity) {
	l2VpnVpls.parent = parent
}

func (l2VpnVpls *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls) GetParent() types.Entity {
	return l2VpnVpls.parent
}

func (l2VpnVpls *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config
	State  Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) HasDataOrFilter() bool {
	return prefixLimit.Config.HasDataOrFilter() ||
		prefixLimit.State.HasDataOrFilter()
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetFilter() types.YFilter {
	return prefixLimit.Filter
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetSegmentPath() string {
	return "prefix-limit"
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixLimit.GetSegmentPath()}
	return entityPath
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &prefixLimit.Config
	}
	if child_yang_name == "state" {
		return &prefixLimit.State
	}
	return nil
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &prefixLimit.Config
	children["state"] = &prefixLimit.State

	return children
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) SetValue(value_path string, value string) {
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetBundleName() string {
	return "ydktest"
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetYangName() string {
	return "prefixLimit"
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) SetParent(parent types.Entity) {
	prefixLimit.parent = parent
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetParent() types.Entity {
	return prefixLimit.parent
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetParentYangName() string {
	return "l2vpn-vpls"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) HasDataOrFilter() bool {
	return config.MaxPrefixes != nil ||
		config.RestartTimer != nil ||
		config.ShutdownThresholdPct != nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaxPrefixes != nil {
		switch config.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if config.RestartTimer != nil {
		switch config.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if config.ShutdownThresholdPct != nil {
		switch config.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		config.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		config.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		config.ShutdownThresholdPct = value
	}
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) HasDataOrFilter() bool {
	return state.MaxPrefixes != nil ||
		state.RestartTimer != nil ||
		state.ShutdownThresholdPct != nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaxPrefixes != nil {
		switch state.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if state.RestartTimer != nil {
		switch state.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if state.ShutdownThresholdPct != nil {
		switch state.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		state.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		state.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		state.ShutdownThresholdPct = value
	}
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn struct {
	parent types.Entity
	Filter types.YFilter

	PrefixLimit Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit
}

func (l2VpnEvpn *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn) HasDataOrFilter() bool {
	return l2VpnEvpn.PrefixLimit.HasDataOrFilter()
}

func (l2VpnEvpn *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn) GetFilter() types.YFilter {
	return l2VpnEvpn.Filter
}

func (l2VpnEvpn *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn) GetSegmentPath() string {
	return "l2vpn-evpn"
}

func (l2VpnEvpn *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: l2VpnEvpn.GetSegmentPath()}
	return entityPath
}

func (l2VpnEvpn *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "prefix-limit" {
		return &l2VpnEvpn.PrefixLimit
	}
	return nil
}

func (l2VpnEvpn *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["prefix-limit"] = &l2VpnEvpn.PrefixLimit

	return children
}

func (l2VpnEvpn *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn) SetValue(value_path string, value string) {
}

func (l2VpnEvpn *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn) GetBundleName() string {
	return "ydktest"
}

func (l2VpnEvpn *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn) GetYangName() string {
	return "l2VpnEvpn"
}

func (l2VpnEvpn *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (l2VpnEvpn *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (l2VpnEvpn *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn) SetParent(parent types.Entity) {
	l2VpnEvpn.parent = parent
}

func (l2VpnEvpn *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn) GetParent() types.Entity {
	return l2VpnEvpn.parent
}

func (l2VpnEvpn *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config
	State  Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) HasDataOrFilter() bool {
	return prefixLimit.Config.HasDataOrFilter() ||
		prefixLimit.State.HasDataOrFilter()
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetFilter() types.YFilter {
	return prefixLimit.Filter
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetSegmentPath() string {
	return "prefix-limit"
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixLimit.GetSegmentPath()}
	return entityPath
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &prefixLimit.Config
	}
	if child_yang_name == "state" {
		return &prefixLimit.State
	}
	return nil
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &prefixLimit.Config
	children["state"] = &prefixLimit.State

	return children
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) SetValue(value_path string, value string) {
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetBundleName() string {
	return "ydktest"
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetYangName() string {
	return "prefixLimit"
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) SetParent(parent types.Entity) {
	prefixLimit.parent = parent
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetParent() types.Entity {
	return prefixLimit.parent
}

func (prefixLimit *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetParentYangName() string {
	return "l2vpn-evpn"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) HasDataOrFilter() bool {
	return config.MaxPrefixes != nil ||
		config.RestartTimer != nil ||
		config.ShutdownThresholdPct != nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaxPrefixes != nil {
		switch config.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if config.RestartTimer != nil {
		switch config.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if config.ShutdownThresholdPct != nil {
		switch config.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		config.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		config.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		config.ShutdownThresholdPct = value
	}
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) HasDataOrFilter() bool {
	return state.MaxPrefixes != nil ||
		state.RestartTimer != nil ||
		state.ShutdownThresholdPct != nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaxPrefixes != nil {
		switch state.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if state.RestartTimer != nil {
		switch state.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if state.ShutdownThresholdPct != nil {
		switch state.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		state.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		state.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		state.ShutdownThresholdPct = value
	}
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config
	Ebgp   Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp
	State  Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State
}

func (useMultiplePaths *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths) HasDataOrFilter() bool {
	return useMultiplePaths.Config.HasDataOrFilter() ||
		useMultiplePaths.Ebgp.HasDataOrFilter() ||
		useMultiplePaths.State.HasDataOrFilter()
}

func (useMultiplePaths *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths) GetFilter() types.YFilter {
	return useMultiplePaths.Filter
}

func (useMultiplePaths *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths) GetSegmentPath() string {
	return "use-multiple-paths"
}

func (useMultiplePaths *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: useMultiplePaths.GetSegmentPath()}
	return entityPath
}

func (useMultiplePaths *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &useMultiplePaths.Config
	}
	if child_yang_name == "ebgp" {
		return &useMultiplePaths.Ebgp
	}
	if child_yang_name == "state" {
		return &useMultiplePaths.State
	}
	return nil
}

func (useMultiplePaths *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &useMultiplePaths.Config
	children["ebgp"] = &useMultiplePaths.Ebgp
	children["state"] = &useMultiplePaths.State

	return children
}

func (useMultiplePaths *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths) SetValue(value_path string, value string) {
}

func (useMultiplePaths *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths) GetBundleName() string {
	return "ydktest"
}

func (useMultiplePaths *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths) GetYangName() string {
	return "useMultiplePaths"
}

func (useMultiplePaths *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (useMultiplePaths *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (useMultiplePaths *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths) SetParent(parent types.Entity) {
	useMultiplePaths.parent = parent
}

func (useMultiplePaths *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths) GetParent() types.Entity {
	return useMultiplePaths.parent
}

func (useMultiplePaths *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config struct {
	parent types.Entity
	Filter types.YFilter

	Enabled interface{} // boolean
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config) HasDataOrFilter() bool {
	return config.Enabled != nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.Enabled != nil {
		switch config.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config) SetValue(value_path string, value string) {
	if value_path == "enabled" {
		config.Enabled = value
	}
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetParentYangName() string {
	return "use-multiple-paths"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State struct {
	parent types.Entity
	Filter types.YFilter

	Enabled interface{} // boolean
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State) HasDataOrFilter() bool {
	return state.Enabled != nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.Enabled != nil {
		switch state.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State) SetValue(value_path string, value string) {
	if value_path == "enabled" {
		state.Enabled = value
	}
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_State) GetParentYangName() string {
	return "use-multiple-paths"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config
	State  Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State
}

func (ebgp *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) HasDataOrFilter() bool {
	return ebgp.Config.HasDataOrFilter() ||
		ebgp.State.HasDataOrFilter()
}

func (ebgp *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetFilter() types.YFilter {
	return ebgp.Filter
}

func (ebgp *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetSegmentPath() string {
	return "ebgp"
}

func (ebgp *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: ebgp.GetSegmentPath()}
	return entityPath
}

func (ebgp *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &ebgp.Config
	}
	if child_yang_name == "state" {
		return &ebgp.State
	}
	return nil
}

func (ebgp *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &ebgp.Config
	children["state"] = &ebgp.State

	return children
}

func (ebgp *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) SetValue(value_path string, value string) {
}

func (ebgp *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetBundleName() string {
	return "ydktest"
}

func (ebgp *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetYangName() string {
	return "ebgp"
}

func (ebgp *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (ebgp *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (ebgp *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) SetParent(parent types.Entity) {
	ebgp.parent = parent
}

func (ebgp *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetParent() types.Entity {
	return ebgp.parent
}

func (ebgp *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetParentYangName() string {
	return "use-multiple-paths"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config struct {
	parent types.Entity
	Filter types.YFilter

	AllowMultipleAs interface{} // boolean
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) HasDataOrFilter() bool {
	return config.AllowMultipleAs != nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.AllowMultipleAs != nil {
		switch config.AllowMultipleAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.AllowMultipleAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.AllowMultipleAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "allow-multiple-as", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) SetValue(value_path string, value string) {
	if value_path == "allow-multiple-as" {
		config.AllowMultipleAs = value
	}
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetParentYangName() string {
	return "ebgp"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State
//////////////////////////////////////////////////////////////////////////
type Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State struct {
	parent types.Entity
	Filter types.YFilter

	AllowMultipleAs interface{} // boolean
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) HasDataOrFilter() bool {
	return state.AllowMultipleAs != nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.AllowMultipleAs != nil {
		switch state.AllowMultipleAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.AllowMultipleAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.AllowMultipleAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "allow-multiple-as", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) SetValue(value_path string, value string) {
	if value_path == "allow-multiple-as" {
		state.AllowMultipleAs = value
	}
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetYangName() string {
	return "state"
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_Neighbors_Neighbor_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetParentYangName() string {
	return "ebgp"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups struct {
	parent types.Entity
	Filter types.YFilter

	PeerGroup []Bgp_PeerGroups_PeerGroup
}

func (peerGroups *Bgp_PeerGroups) HasDataOrFilter() bool {
	for _, child := range peerGroups.PeerGroup {
		if child.HasDataOrFilter() {
			return true
		}
	}
	return false
}

func (peerGroups *Bgp_PeerGroups) GetFilter() types.YFilter {
	return peerGroups.Filter
}

func (peerGroups *Bgp_PeerGroups) GetSegmentPath() string {
	return "peer-groups"
}

func (peerGroups *Bgp_PeerGroups) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: peerGroups.GetSegmentPath()}
	return entityPath
}

func (peerGroups *Bgp_PeerGroups) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "peer-group" {
		for _, c := range peerGroups.PeerGroup {
			if peerGroups.GetSegmentPath() == segment_path {
				return &c
			}
		}
		child := Bgp_PeerGroups_PeerGroup{}
		peerGroups.PeerGroup = append(peerGroups.PeerGroup, child)
		return &peerGroups.PeerGroup[len(peerGroups.PeerGroup)-1]
	}
	return nil
}

func (peerGroups *Bgp_PeerGroups) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	for i := range peerGroups.PeerGroup {
		children[peerGroups.PeerGroup[i].GetSegmentPath()] = &peerGroups.PeerGroup[i]
	}

	return children
}

func (peerGroups *Bgp_PeerGroups) SetValue(value_path string, value string) {
}

func (peerGroups *Bgp_PeerGroups) GetBundleName() string {
	return "ydktest"
}

func (peerGroups *Bgp_PeerGroups) GetYangName() string {
	return "peerGroups"
}

func (peerGroups *Bgp_PeerGroups) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (peerGroups *Bgp_PeerGroups) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (peerGroups *Bgp_PeerGroups) SetParent(parent types.Entity) {
	peerGroups.parent = parent
}

func (peerGroups *Bgp_PeerGroups) GetParent() types.Entity {
	return peerGroups.parent
}

func (peerGroups *Bgp_PeerGroups) GetParentYangName() string {
	return "bgp"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup struct {
	parent types.Entity
	Filter types.YFilter

	PeerGroupName    interface{} // str
	AddPaths         Bgp_PeerGroups_PeerGroup_AddPaths
	AfiSafis         Bgp_PeerGroups_PeerGroup_AfiSafis
	ApplyPolicy      Bgp_PeerGroups_PeerGroup_ApplyPolicy
	AsPathOptions    Bgp_PeerGroups_PeerGroup_AsPathOptions
	Config           Bgp_PeerGroups_PeerGroup_Config
	EbgpMultihop     Bgp_PeerGroups_PeerGroup_EbgpMultihop
	ErrorHandling    Bgp_PeerGroups_PeerGroup_ErrorHandling
	GracefulRestart  Bgp_PeerGroups_PeerGroup_GracefulRestart
	LoggingOptions   Bgp_PeerGroups_PeerGroup_LoggingOptions
	RouteReflector   Bgp_PeerGroups_PeerGroup_RouteReflector
	State            Bgp_PeerGroups_PeerGroup_State
	Timers           Bgp_PeerGroups_PeerGroup_Timers
	Transport        Bgp_PeerGroups_PeerGroup_Transport
	UseMultiplePaths Bgp_PeerGroups_PeerGroup_UseMultiplePaths
}

func (peerGroup *Bgp_PeerGroups_PeerGroup) HasDataOrFilter() bool {
	return peerGroup.PeerGroupName != nil ||
		peerGroup.AddPaths.HasDataOrFilter() ||
		peerGroup.AfiSafis.HasDataOrFilter() ||
		peerGroup.ApplyPolicy.HasDataOrFilter() ||
		peerGroup.AsPathOptions.HasDataOrFilter() ||
		peerGroup.Config.HasDataOrFilter() ||
		peerGroup.EbgpMultihop.HasDataOrFilter() ||
		peerGroup.ErrorHandling.HasDataOrFilter() ||
		peerGroup.GracefulRestart.HasDataOrFilter() ||
		peerGroup.LoggingOptions.HasDataOrFilter() ||
		peerGroup.RouteReflector.HasDataOrFilter() ||
		peerGroup.State.HasDataOrFilter() ||
		peerGroup.Timers.HasDataOrFilter() ||
		peerGroup.Transport.HasDataOrFilter() ||
		peerGroup.UseMultiplePaths.HasDataOrFilter()
}

func (peerGroup *Bgp_PeerGroups_PeerGroup) GetFilter() types.YFilter {
	return peerGroup.Filter
}

func (peerGroup *Bgp_PeerGroups_PeerGroup) GetSegmentPath() string {
	return "peer-group" + "[peer-group-name=\"" + fmt.Sprintf("%v", peerGroup.PeerGroupName) + "\"]"
}

func (peerGroup *Bgp_PeerGroups_PeerGroup) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: peerGroup.GetSegmentPath()}
	var leafData types.LeafData

	if peerGroup.PeerGroupName != nil {
		switch peerGroup.PeerGroupName.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: peerGroup.PeerGroupName.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", peerGroup.PeerGroupName)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "peer-group-name", Data: leafData})
		}
	}

	return entityPath
}

func (peerGroup *Bgp_PeerGroups_PeerGroup) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "add-paths" {
		return &peerGroup.AddPaths
	}
	if child_yang_name == "afi-safis" {
		return &peerGroup.AfiSafis
	}
	if child_yang_name == "apply-policy" {
		return &peerGroup.ApplyPolicy
	}
	if child_yang_name == "as-path-options" {
		return &peerGroup.AsPathOptions
	}
	if child_yang_name == "config" {
		return &peerGroup.Config
	}
	if child_yang_name == "ebgp-multihop" {
		return &peerGroup.EbgpMultihop
	}
	if child_yang_name == "error-handling" {
		return &peerGroup.ErrorHandling
	}
	if child_yang_name == "graceful-restart" {
		return &peerGroup.GracefulRestart
	}
	if child_yang_name == "logging-options" {
		return &peerGroup.LoggingOptions
	}
	if child_yang_name == "route-reflector" {
		return &peerGroup.RouteReflector
	}
	if child_yang_name == "state" {
		return &peerGroup.State
	}
	if child_yang_name == "timers" {
		return &peerGroup.Timers
	}
	if child_yang_name == "transport" {
		return &peerGroup.Transport
	}
	if child_yang_name == "use-multiple-paths" {
		return &peerGroup.UseMultiplePaths
	}
	return nil
}

func (peerGroup *Bgp_PeerGroups_PeerGroup) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["add-paths"] = &peerGroup.AddPaths
	children["afi-safis"] = &peerGroup.AfiSafis
	children["apply-policy"] = &peerGroup.ApplyPolicy
	children["as-path-options"] = &peerGroup.AsPathOptions
	children["config"] = &peerGroup.Config
	children["ebgp-multihop"] = &peerGroup.EbgpMultihop
	children["error-handling"] = &peerGroup.ErrorHandling
	children["graceful-restart"] = &peerGroup.GracefulRestart
	children["logging-options"] = &peerGroup.LoggingOptions
	children["route-reflector"] = &peerGroup.RouteReflector
	children["state"] = &peerGroup.State
	children["timers"] = &peerGroup.Timers
	children["transport"] = &peerGroup.Transport
	children["use-multiple-paths"] = &peerGroup.UseMultiplePaths

	return children
}

func (peerGroup *Bgp_PeerGroups_PeerGroup) SetValue(value_path string, value string) {
	if value_path == "peer-group-name" {
		peerGroup.PeerGroupName = value
	}
}

func (peerGroup *Bgp_PeerGroups_PeerGroup) GetBundleName() string {
	return "ydktest"
}

func (peerGroup *Bgp_PeerGroups_PeerGroup) GetYangName() string {
	return "peerGroup"
}

func (peerGroup *Bgp_PeerGroups_PeerGroup) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (peerGroup *Bgp_PeerGroups_PeerGroup) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (peerGroup *Bgp_PeerGroups_PeerGroup) SetParent(parent types.Entity) {
	peerGroup.parent = parent
}

func (peerGroup *Bgp_PeerGroups_PeerGroup) GetParent() types.Entity {
	return peerGroup.parent
}

func (peerGroup *Bgp_PeerGroups_PeerGroup) GetParentYangName() string {
	return "peer-groups"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_Config struct {
	parent types.Entity
	Filter types.YFilter

	AuthPassword     interface{} // str
	Description      interface{} // str
	LocalAs          interface{} // uint32
	PeerAs           interface{} // uint32
	PeerGroupName    interface{} // str
	PeerType         interface{} // enumeration
	RemovePrivateAs  interface{} // identityref
	RouteFlapDamping interface{} // boolean
	SendCommunity    interface{} // enumeration
}

func (config *Bgp_PeerGroups_PeerGroup_Config) HasDataOrFilter() bool {
	return config.AuthPassword != nil ||
		config.Description != nil ||
		config.LocalAs != nil ||
		config.PeerAs != nil ||
		config.PeerGroupName != nil ||
		config.PeerType != nil ||
		config.RemovePrivateAs != nil ||
		config.RouteFlapDamping != nil ||
		config.SendCommunity != nil
}

func (config *Bgp_PeerGroups_PeerGroup_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.AuthPassword != nil {
		switch config.AuthPassword.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.AuthPassword.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.AuthPassword)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "auth-password", Data: leafData})
		}
	}

	if config.Description != nil {
		switch config.Description.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.Description.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.Description)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "description", Data: leafData})
		}
	}

	if config.LocalAs != nil {
		switch config.LocalAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.LocalAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.LocalAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "local-as", Data: leafData})
		}
	}

	if config.PeerAs != nil {
		switch config.PeerAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.PeerAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.PeerAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "peer-as", Data: leafData})
		}
	}

	if config.PeerGroupName != nil {
		switch config.PeerGroupName.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.PeerGroupName.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.PeerGroupName)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "peer-group-name", Data: leafData})
		}
	}

	if config.PeerType != nil {
		switch config.PeerType.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.PeerType.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.PeerType)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "peer-type", Data: leafData})
		}
	}

	if config.RemovePrivateAs != nil {
		switch config.RemovePrivateAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RemovePrivateAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RemovePrivateAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "remove-private-as", Data: leafData})
		}
	}

	if config.RouteFlapDamping != nil {
		switch config.RouteFlapDamping.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RouteFlapDamping.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RouteFlapDamping)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "route-flap-damping", Data: leafData})
		}
	}

	if config.SendCommunity != nil {
		switch config.SendCommunity.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.SendCommunity.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.SendCommunity)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "send-community", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_Config) SetValue(value_path string, value string) {
	if value_path == "auth-password" {
		config.AuthPassword = value
	}
	if value_path == "description" {
		config.Description = value
	}
	if value_path == "local-as" {
		config.LocalAs = value
	}
	if value_path == "peer-as" {
		config.PeerAs = value
	}
	if value_path == "peer-group-name" {
		config.PeerGroupName = value
	}
	if value_path == "peer-type" {
		config.PeerType = value
	}
	if value_path == "remove-private-as" {
		config.RemovePrivateAs = value
	}
	if value_path == "route-flap-damping" {
		config.RouteFlapDamping = value
	}
	if value_path == "send-community" {
		config.SendCommunity = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_Config) GetParentYangName() string {
	return "peer-group"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_State struct {
	parent types.Entity
	Filter types.YFilter

	AuthPassword     interface{} // str
	Description      interface{} // str
	LocalAs          interface{} // uint32
	PeerAs           interface{} // uint32
	PeerGroupName    interface{} // str
	PeerType         interface{} // enumeration
	RemovePrivateAs  interface{} // identityref
	RouteFlapDamping interface{} // boolean
	SendCommunity    interface{} // enumeration
	TotalPaths       interface{} // uint32
	TotalPrefixes    interface{} // uint32
}

func (state *Bgp_PeerGroups_PeerGroup_State) HasDataOrFilter() bool {
	return state.AuthPassword != nil ||
		state.Description != nil ||
		state.LocalAs != nil ||
		state.PeerAs != nil ||
		state.PeerGroupName != nil ||
		state.PeerType != nil ||
		state.RemovePrivateAs != nil ||
		state.RouteFlapDamping != nil ||
		state.SendCommunity != nil ||
		state.TotalPaths != nil ||
		state.TotalPrefixes != nil
}

func (state *Bgp_PeerGroups_PeerGroup_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.AuthPassword != nil {
		switch state.AuthPassword.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.AuthPassword.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.AuthPassword)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "auth-password", Data: leafData})
		}
	}

	if state.Description != nil {
		switch state.Description.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.Description.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.Description)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "description", Data: leafData})
		}
	}

	if state.LocalAs != nil {
		switch state.LocalAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.LocalAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.LocalAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "local-as", Data: leafData})
		}
	}

	if state.PeerAs != nil {
		switch state.PeerAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.PeerAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.PeerAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "peer-as", Data: leafData})
		}
	}

	if state.PeerGroupName != nil {
		switch state.PeerGroupName.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.PeerGroupName.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.PeerGroupName)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "peer-group-name", Data: leafData})
		}
	}

	if state.PeerType != nil {
		switch state.PeerType.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.PeerType.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.PeerType)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "peer-type", Data: leafData})
		}
	}

	if state.RemovePrivateAs != nil {
		switch state.RemovePrivateAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RemovePrivateAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RemovePrivateAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "remove-private-as", Data: leafData})
		}
	}

	if state.RouteFlapDamping != nil {
		switch state.RouteFlapDamping.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RouteFlapDamping.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RouteFlapDamping)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "route-flap-damping", Data: leafData})
		}
	}

	if state.SendCommunity != nil {
		switch state.SendCommunity.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.SendCommunity.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.SendCommunity)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "send-community", Data: leafData})
		}
	}

	if state.TotalPaths != nil {
		switch state.TotalPaths.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.TotalPaths.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.TotalPaths)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "total-paths", Data: leafData})
		}
	}

	if state.TotalPrefixes != nil {
		switch state.TotalPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.TotalPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.TotalPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "total-prefixes", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_State) SetValue(value_path string, value string) {
	if value_path == "auth-password" {
		state.AuthPassword = value
	}
	if value_path == "description" {
		state.Description = value
	}
	if value_path == "local-as" {
		state.LocalAs = value
	}
	if value_path == "peer-as" {
		state.PeerAs = value
	}
	if value_path == "peer-group-name" {
		state.PeerGroupName = value
	}
	if value_path == "peer-type" {
		state.PeerType = value
	}
	if value_path == "remove-private-as" {
		state.RemovePrivateAs = value
	}
	if value_path == "route-flap-damping" {
		state.RouteFlapDamping = value
	}
	if value_path == "send-community" {
		state.SendCommunity = value
	}
	if value_path == "total-paths" {
		state.TotalPaths = value
	}
	if value_path == "total-prefixes" {
		state.TotalPrefixes = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_State) GetParentYangName() string {
	return "peer-group"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_Timers
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_Timers struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_PeerGroups_PeerGroup_Timers_Config
	State  Bgp_PeerGroups_PeerGroup_Timers_State
}

func (timers *Bgp_PeerGroups_PeerGroup_Timers) HasDataOrFilter() bool {
	return timers.Config.HasDataOrFilter() ||
		timers.State.HasDataOrFilter()
}

func (timers *Bgp_PeerGroups_PeerGroup_Timers) GetFilter() types.YFilter {
	return timers.Filter
}

func (timers *Bgp_PeerGroups_PeerGroup_Timers) GetSegmentPath() string {
	return "timers"
}

func (timers *Bgp_PeerGroups_PeerGroup_Timers) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: timers.GetSegmentPath()}
	return entityPath
}

func (timers *Bgp_PeerGroups_PeerGroup_Timers) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &timers.Config
	}
	if child_yang_name == "state" {
		return &timers.State
	}
	return nil
}

func (timers *Bgp_PeerGroups_PeerGroup_Timers) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &timers.Config
	children["state"] = &timers.State

	return children
}

func (timers *Bgp_PeerGroups_PeerGroup_Timers) SetValue(value_path string, value string) {
}

func (timers *Bgp_PeerGroups_PeerGroup_Timers) GetBundleName() string {
	return "ydktest"
}

func (timers *Bgp_PeerGroups_PeerGroup_Timers) GetYangName() string {
	return "timers"
}

func (timers *Bgp_PeerGroups_PeerGroup_Timers) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (timers *Bgp_PeerGroups_PeerGroup_Timers) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (timers *Bgp_PeerGroups_PeerGroup_Timers) SetParent(parent types.Entity) {
	timers.parent = parent
}

func (timers *Bgp_PeerGroups_PeerGroup_Timers) GetParent() types.Entity {
	return timers.parent
}

func (timers *Bgp_PeerGroups_PeerGroup_Timers) GetParentYangName() string {
	return "peer-group"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_Timers_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_Timers_Config struct {
	parent types.Entity
	Filter types.YFilter

	ConnectRetry                 interface{} // str
	HoldTime                     interface{} // str
	KeepaliveInterval            interface{} // str
	MinimumAdvertisementInterval interface{} // str
}

func (config *Bgp_PeerGroups_PeerGroup_Timers_Config) HasDataOrFilter() bool {
	return config.ConnectRetry != nil ||
		config.HoldTime != nil ||
		config.KeepaliveInterval != nil ||
		config.MinimumAdvertisementInterval != nil
}

func (config *Bgp_PeerGroups_PeerGroup_Timers_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_Timers_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_Timers_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.ConnectRetry != nil {
		switch config.ConnectRetry.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ConnectRetry.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ConnectRetry)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "connect-retry", Data: leafData})
		}
	}

	if config.HoldTime != nil {
		switch config.HoldTime.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.HoldTime.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.HoldTime)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "hold-time", Data: leafData})
		}
	}

	if config.KeepaliveInterval != nil {
		switch config.KeepaliveInterval.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.KeepaliveInterval.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.KeepaliveInterval)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "keepalive-interval", Data: leafData})
		}
	}

	if config.MinimumAdvertisementInterval != nil {
		switch config.MinimumAdvertisementInterval.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MinimumAdvertisementInterval.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MinimumAdvertisementInterval)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "minimum-advertisement-interval", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_Timers_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_Timers_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_Timers_Config) SetValue(value_path string, value string) {
	if value_path == "connect-retry" {
		config.ConnectRetry = value
	}
	if value_path == "hold-time" {
		config.HoldTime = value
	}
	if value_path == "keepalive-interval" {
		config.KeepaliveInterval = value
	}
	if value_path == "minimum-advertisement-interval" {
		config.MinimumAdvertisementInterval = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_Timers_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_Timers_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_Timers_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_Timers_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_Timers_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_Timers_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_Timers_Config) GetParentYangName() string {
	return "timers"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_Timers_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_Timers_State struct {
	parent types.Entity
	Filter types.YFilter

	ConnectRetry                 interface{} // str
	HoldTime                     interface{} // str
	KeepaliveInterval            interface{} // str
	MinimumAdvertisementInterval interface{} // str
}

func (state *Bgp_PeerGroups_PeerGroup_Timers_State) HasDataOrFilter() bool {
	return state.ConnectRetry != nil ||
		state.HoldTime != nil ||
		state.KeepaliveInterval != nil ||
		state.MinimumAdvertisementInterval != nil
}

func (state *Bgp_PeerGroups_PeerGroup_Timers_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_Timers_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_Timers_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.ConnectRetry != nil {
		switch state.ConnectRetry.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ConnectRetry.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ConnectRetry)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "connect-retry", Data: leafData})
		}
	}

	if state.HoldTime != nil {
		switch state.HoldTime.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.HoldTime.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.HoldTime)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "hold-time", Data: leafData})
		}
	}

	if state.KeepaliveInterval != nil {
		switch state.KeepaliveInterval.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.KeepaliveInterval.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.KeepaliveInterval)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "keepalive-interval", Data: leafData})
		}
	}

	if state.MinimumAdvertisementInterval != nil {
		switch state.MinimumAdvertisementInterval.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MinimumAdvertisementInterval.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MinimumAdvertisementInterval)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "minimum-advertisement-interval", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_Timers_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_Timers_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_Timers_State) SetValue(value_path string, value string) {
	if value_path == "connect-retry" {
		state.ConnectRetry = value
	}
	if value_path == "hold-time" {
		state.HoldTime = value
	}
	if value_path == "keepalive-interval" {
		state.KeepaliveInterval = value
	}
	if value_path == "minimum-advertisement-interval" {
		state.MinimumAdvertisementInterval = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_Timers_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_Timers_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_Timers_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_Timers_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_Timers_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_Timers_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_Timers_State) GetParentYangName() string {
	return "timers"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_Transport
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_Transport struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_PeerGroups_PeerGroup_Transport_Config
	State  Bgp_PeerGroups_PeerGroup_Transport_State
}

func (transport *Bgp_PeerGroups_PeerGroup_Transport) HasDataOrFilter() bool {
	return transport.Config.HasDataOrFilter() ||
		transport.State.HasDataOrFilter()
}

func (transport *Bgp_PeerGroups_PeerGroup_Transport) GetFilter() types.YFilter {
	return transport.Filter
}

func (transport *Bgp_PeerGroups_PeerGroup_Transport) GetSegmentPath() string {
	return "transport"
}

func (transport *Bgp_PeerGroups_PeerGroup_Transport) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: transport.GetSegmentPath()}
	return entityPath
}

func (transport *Bgp_PeerGroups_PeerGroup_Transport) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &transport.Config
	}
	if child_yang_name == "state" {
		return &transport.State
	}
	return nil
}

func (transport *Bgp_PeerGroups_PeerGroup_Transport) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &transport.Config
	children["state"] = &transport.State

	return children
}

func (transport *Bgp_PeerGroups_PeerGroup_Transport) SetValue(value_path string, value string) {
}

func (transport *Bgp_PeerGroups_PeerGroup_Transport) GetBundleName() string {
	return "ydktest"
}

func (transport *Bgp_PeerGroups_PeerGroup_Transport) GetYangName() string {
	return "transport"
}

func (transport *Bgp_PeerGroups_PeerGroup_Transport) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (transport *Bgp_PeerGroups_PeerGroup_Transport) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (transport *Bgp_PeerGroups_PeerGroup_Transport) SetParent(parent types.Entity) {
	transport.parent = parent
}

func (transport *Bgp_PeerGroups_PeerGroup_Transport) GetParent() types.Entity {
	return transport.parent
}

func (transport *Bgp_PeerGroups_PeerGroup_Transport) GetParentYangName() string {
	return "peer-group"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_Transport_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_Transport_Config struct {
	parent types.Entity
	Filter types.YFilter

	LocalAddress interface{} // str
	MtuDiscovery interface{} // boolean
	PassiveMode  interface{} // boolean
	TcpMss       interface{} // uint16
}

func (config *Bgp_PeerGroups_PeerGroup_Transport_Config) HasDataOrFilter() bool {
	return config.LocalAddress != nil ||
		config.MtuDiscovery != nil ||
		config.PassiveMode != nil ||
		config.TcpMss != nil
}

func (config *Bgp_PeerGroups_PeerGroup_Transport_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_Transport_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_Transport_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.LocalAddress != nil {
		switch config.LocalAddress.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.LocalAddress.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.LocalAddress)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "local-address", Data: leafData})
		}
	}

	if config.MtuDiscovery != nil {
		switch config.MtuDiscovery.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MtuDiscovery.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MtuDiscovery)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "mtu-discovery", Data: leafData})
		}
	}

	if config.PassiveMode != nil {
		switch config.PassiveMode.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.PassiveMode.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.PassiveMode)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "passive-mode", Data: leafData})
		}
	}

	if config.TcpMss != nil {
		switch config.TcpMss.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.TcpMss.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.TcpMss)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "tcp-mss", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_Transport_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_Transport_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_Transport_Config) SetValue(value_path string, value string) {
	if value_path == "local-address" {
		config.LocalAddress = value
	}
	if value_path == "mtu-discovery" {
		config.MtuDiscovery = value
	}
	if value_path == "passive-mode" {
		config.PassiveMode = value
	}
	if value_path == "tcp-mss" {
		config.TcpMss = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_Transport_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_Transport_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_Transport_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_Transport_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_Transport_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_Transport_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_Transport_Config) GetParentYangName() string {
	return "transport"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_Transport_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_Transport_State struct {
	parent types.Entity
	Filter types.YFilter

	LocalAddress interface{} // str
	MtuDiscovery interface{} // boolean
	PassiveMode  interface{} // boolean
	TcpMss       interface{} // uint16
}

func (state *Bgp_PeerGroups_PeerGroup_Transport_State) HasDataOrFilter() bool {
	return state.LocalAddress != nil ||
		state.MtuDiscovery != nil ||
		state.PassiveMode != nil ||
		state.TcpMss != nil
}

func (state *Bgp_PeerGroups_PeerGroup_Transport_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_Transport_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_Transport_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.LocalAddress != nil {
		switch state.LocalAddress.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.LocalAddress.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.LocalAddress)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "local-address", Data: leafData})
		}
	}

	if state.MtuDiscovery != nil {
		switch state.MtuDiscovery.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MtuDiscovery.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MtuDiscovery)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "mtu-discovery", Data: leafData})
		}
	}

	if state.PassiveMode != nil {
		switch state.PassiveMode.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.PassiveMode.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.PassiveMode)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "passive-mode", Data: leafData})
		}
	}

	if state.TcpMss != nil {
		switch state.TcpMss.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.TcpMss.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.TcpMss)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "tcp-mss", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_Transport_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_Transport_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_Transport_State) SetValue(value_path string, value string) {
	if value_path == "local-address" {
		state.LocalAddress = value
	}
	if value_path == "mtu-discovery" {
		state.MtuDiscovery = value
	}
	if value_path == "passive-mode" {
		state.PassiveMode = value
	}
	if value_path == "tcp-mss" {
		state.TcpMss = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_Transport_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_Transport_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_Transport_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_Transport_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_Transport_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_Transport_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_Transport_State) GetParentYangName() string {
	return "transport"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_ErrorHandling
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_ErrorHandling struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_PeerGroups_PeerGroup_ErrorHandling_Config
	State  Bgp_PeerGroups_PeerGroup_ErrorHandling_State
}

func (errorHandling *Bgp_PeerGroups_PeerGroup_ErrorHandling) HasDataOrFilter() bool {
	return errorHandling.Config.HasDataOrFilter() ||
		errorHandling.State.HasDataOrFilter()
}

func (errorHandling *Bgp_PeerGroups_PeerGroup_ErrorHandling) GetFilter() types.YFilter {
	return errorHandling.Filter
}

func (errorHandling *Bgp_PeerGroups_PeerGroup_ErrorHandling) GetSegmentPath() string {
	return "error-handling"
}

func (errorHandling *Bgp_PeerGroups_PeerGroup_ErrorHandling) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: errorHandling.GetSegmentPath()}
	return entityPath
}

func (errorHandling *Bgp_PeerGroups_PeerGroup_ErrorHandling) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &errorHandling.Config
	}
	if child_yang_name == "state" {
		return &errorHandling.State
	}
	return nil
}

func (errorHandling *Bgp_PeerGroups_PeerGroup_ErrorHandling) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &errorHandling.Config
	children["state"] = &errorHandling.State

	return children
}

func (errorHandling *Bgp_PeerGroups_PeerGroup_ErrorHandling) SetValue(value_path string, value string) {
}

func (errorHandling *Bgp_PeerGroups_PeerGroup_ErrorHandling) GetBundleName() string {
	return "ydktest"
}

func (errorHandling *Bgp_PeerGroups_PeerGroup_ErrorHandling) GetYangName() string {
	return "errorHandling"
}

func (errorHandling *Bgp_PeerGroups_PeerGroup_ErrorHandling) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (errorHandling *Bgp_PeerGroups_PeerGroup_ErrorHandling) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (errorHandling *Bgp_PeerGroups_PeerGroup_ErrorHandling) SetParent(parent types.Entity) {
	errorHandling.parent = parent
}

func (errorHandling *Bgp_PeerGroups_PeerGroup_ErrorHandling) GetParent() types.Entity {
	return errorHandling.parent
}

func (errorHandling *Bgp_PeerGroups_PeerGroup_ErrorHandling) GetParentYangName() string {
	return "peer-group"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_ErrorHandling_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_ErrorHandling_Config struct {
	parent types.Entity
	Filter types.YFilter

	TreatAsWithdraw interface{} // boolean
}

func (config *Bgp_PeerGroups_PeerGroup_ErrorHandling_Config) HasDataOrFilter() bool {
	return config.TreatAsWithdraw != nil
}

func (config *Bgp_PeerGroups_PeerGroup_ErrorHandling_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_ErrorHandling_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_ErrorHandling_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.TreatAsWithdraw != nil {
		switch config.TreatAsWithdraw.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.TreatAsWithdraw.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.TreatAsWithdraw)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "treat-as-withdraw", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_ErrorHandling_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_ErrorHandling_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_ErrorHandling_Config) SetValue(value_path string, value string) {
	if value_path == "treat-as-withdraw" {
		config.TreatAsWithdraw = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_ErrorHandling_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_ErrorHandling_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_ErrorHandling_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_ErrorHandling_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_ErrorHandling_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_ErrorHandling_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_ErrorHandling_Config) GetParentYangName() string {
	return "error-handling"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_ErrorHandling_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_ErrorHandling_State struct {
	parent types.Entity
	Filter types.YFilter

	TreatAsWithdraw interface{} // boolean
}

func (state *Bgp_PeerGroups_PeerGroup_ErrorHandling_State) HasDataOrFilter() bool {
	return state.TreatAsWithdraw != nil
}

func (state *Bgp_PeerGroups_PeerGroup_ErrorHandling_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_ErrorHandling_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_ErrorHandling_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.TreatAsWithdraw != nil {
		switch state.TreatAsWithdraw.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.TreatAsWithdraw.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.TreatAsWithdraw)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "treat-as-withdraw", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_ErrorHandling_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_ErrorHandling_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_ErrorHandling_State) SetValue(value_path string, value string) {
	if value_path == "treat-as-withdraw" {
		state.TreatAsWithdraw = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_ErrorHandling_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_ErrorHandling_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_ErrorHandling_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_ErrorHandling_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_ErrorHandling_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_ErrorHandling_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_ErrorHandling_State) GetParentYangName() string {
	return "error-handling"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_GracefulRestart
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_GracefulRestart struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_PeerGroups_PeerGroup_GracefulRestart_Config
	State  Bgp_PeerGroups_PeerGroup_GracefulRestart_State
}

func (gracefulRestart *Bgp_PeerGroups_PeerGroup_GracefulRestart) HasDataOrFilter() bool {
	return gracefulRestart.Config.HasDataOrFilter() ||
		gracefulRestart.State.HasDataOrFilter()
}

func (gracefulRestart *Bgp_PeerGroups_PeerGroup_GracefulRestart) GetFilter() types.YFilter {
	return gracefulRestart.Filter
}

func (gracefulRestart *Bgp_PeerGroups_PeerGroup_GracefulRestart) GetSegmentPath() string {
	return "graceful-restart"
}

func (gracefulRestart *Bgp_PeerGroups_PeerGroup_GracefulRestart) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: gracefulRestart.GetSegmentPath()}
	return entityPath
}

func (gracefulRestart *Bgp_PeerGroups_PeerGroup_GracefulRestart) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &gracefulRestart.Config
	}
	if child_yang_name == "state" {
		return &gracefulRestart.State
	}
	return nil
}

func (gracefulRestart *Bgp_PeerGroups_PeerGroup_GracefulRestart) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &gracefulRestart.Config
	children["state"] = &gracefulRestart.State

	return children
}

func (gracefulRestart *Bgp_PeerGroups_PeerGroup_GracefulRestart) SetValue(value_path string, value string) {
}

func (gracefulRestart *Bgp_PeerGroups_PeerGroup_GracefulRestart) GetBundleName() string {
	return "ydktest"
}

func (gracefulRestart *Bgp_PeerGroups_PeerGroup_GracefulRestart) GetYangName() string {
	return "gracefulRestart"
}

func (gracefulRestart *Bgp_PeerGroups_PeerGroup_GracefulRestart) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (gracefulRestart *Bgp_PeerGroups_PeerGroup_GracefulRestart) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (gracefulRestart *Bgp_PeerGroups_PeerGroup_GracefulRestart) SetParent(parent types.Entity) {
	gracefulRestart.parent = parent
}

func (gracefulRestart *Bgp_PeerGroups_PeerGroup_GracefulRestart) GetParent() types.Entity {
	return gracefulRestart.parent
}

func (gracefulRestart *Bgp_PeerGroups_PeerGroup_GracefulRestart) GetParentYangName() string {
	return "peer-group"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_GracefulRestart_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_GracefulRestart_Config struct {
	parent types.Entity
	Filter types.YFilter

	Enabled         interface{} // boolean
	HelperOnly      interface{} // boolean
	RestartTime     interface{} // uint16
	StaleRoutesTime interface{} // str
}

func (config *Bgp_PeerGroups_PeerGroup_GracefulRestart_Config) HasDataOrFilter() bool {
	return config.Enabled != nil ||
		config.HelperOnly != nil ||
		config.RestartTime != nil ||
		config.StaleRoutesTime != nil
}

func (config *Bgp_PeerGroups_PeerGroup_GracefulRestart_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_GracefulRestart_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_GracefulRestart_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.Enabled != nil {
		switch config.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	if config.HelperOnly != nil {
		switch config.HelperOnly.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.HelperOnly.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.HelperOnly)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "helper-only", Data: leafData})
		}
	}

	if config.RestartTime != nil {
		switch config.RestartTime.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTime.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTime)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-time", Data: leafData})
		}
	}

	if config.StaleRoutesTime != nil {
		switch config.StaleRoutesTime.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.StaleRoutesTime.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.StaleRoutesTime)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "stale-routes-time", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_GracefulRestart_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_GracefulRestart_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_GracefulRestart_Config) SetValue(value_path string, value string) {
	if value_path == "enabled" {
		config.Enabled = value
	}
	if value_path == "helper-only" {
		config.HelperOnly = value
	}
	if value_path == "restart-time" {
		config.RestartTime = value
	}
	if value_path == "stale-routes-time" {
		config.StaleRoutesTime = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_GracefulRestart_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_GracefulRestart_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_GracefulRestart_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_GracefulRestart_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_GracefulRestart_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_GracefulRestart_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_GracefulRestart_Config) GetParentYangName() string {
	return "graceful-restart"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_GracefulRestart_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_GracefulRestart_State struct {
	parent types.Entity
	Filter types.YFilter

	Enabled         interface{} // boolean
	HelperOnly      interface{} // boolean
	RestartTime     interface{} // uint16
	StaleRoutesTime interface{} // str
}

func (state *Bgp_PeerGroups_PeerGroup_GracefulRestart_State) HasDataOrFilter() bool {
	return state.Enabled != nil ||
		state.HelperOnly != nil ||
		state.RestartTime != nil ||
		state.StaleRoutesTime != nil
}

func (state *Bgp_PeerGroups_PeerGroup_GracefulRestart_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_GracefulRestart_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_GracefulRestart_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.Enabled != nil {
		switch state.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	if state.HelperOnly != nil {
		switch state.HelperOnly.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.HelperOnly.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.HelperOnly)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "helper-only", Data: leafData})
		}
	}

	if state.RestartTime != nil {
		switch state.RestartTime.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTime.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTime)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-time", Data: leafData})
		}
	}

	if state.StaleRoutesTime != nil {
		switch state.StaleRoutesTime.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.StaleRoutesTime.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.StaleRoutesTime)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "stale-routes-time", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_GracefulRestart_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_GracefulRestart_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_GracefulRestart_State) SetValue(value_path string, value string) {
	if value_path == "enabled" {
		state.Enabled = value
	}
	if value_path == "helper-only" {
		state.HelperOnly = value
	}
	if value_path == "restart-time" {
		state.RestartTime = value
	}
	if value_path == "stale-routes-time" {
		state.StaleRoutesTime = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_GracefulRestart_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_GracefulRestart_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_GracefulRestart_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_GracefulRestart_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_GracefulRestart_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_GracefulRestart_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_GracefulRestart_State) GetParentYangName() string {
	return "graceful-restart"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_LoggingOptions
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_LoggingOptions struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_PeerGroups_PeerGroup_LoggingOptions_Config
	State  Bgp_PeerGroups_PeerGroup_LoggingOptions_State
}

func (loggingOptions *Bgp_PeerGroups_PeerGroup_LoggingOptions) HasDataOrFilter() bool {
	return loggingOptions.Config.HasDataOrFilter() ||
		loggingOptions.State.HasDataOrFilter()
}

func (loggingOptions *Bgp_PeerGroups_PeerGroup_LoggingOptions) GetFilter() types.YFilter {
	return loggingOptions.Filter
}

func (loggingOptions *Bgp_PeerGroups_PeerGroup_LoggingOptions) GetSegmentPath() string {
	return "logging-options"
}

func (loggingOptions *Bgp_PeerGroups_PeerGroup_LoggingOptions) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: loggingOptions.GetSegmentPath()}
	return entityPath
}

func (loggingOptions *Bgp_PeerGroups_PeerGroup_LoggingOptions) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &loggingOptions.Config
	}
	if child_yang_name == "state" {
		return &loggingOptions.State
	}
	return nil
}

func (loggingOptions *Bgp_PeerGroups_PeerGroup_LoggingOptions) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &loggingOptions.Config
	children["state"] = &loggingOptions.State

	return children
}

func (loggingOptions *Bgp_PeerGroups_PeerGroup_LoggingOptions) SetValue(value_path string, value string) {
}

func (loggingOptions *Bgp_PeerGroups_PeerGroup_LoggingOptions) GetBundleName() string {
	return "ydktest"
}

func (loggingOptions *Bgp_PeerGroups_PeerGroup_LoggingOptions) GetYangName() string {
	return "loggingOptions"
}

func (loggingOptions *Bgp_PeerGroups_PeerGroup_LoggingOptions) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (loggingOptions *Bgp_PeerGroups_PeerGroup_LoggingOptions) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (loggingOptions *Bgp_PeerGroups_PeerGroup_LoggingOptions) SetParent(parent types.Entity) {
	loggingOptions.parent = parent
}

func (loggingOptions *Bgp_PeerGroups_PeerGroup_LoggingOptions) GetParent() types.Entity {
	return loggingOptions.parent
}

func (loggingOptions *Bgp_PeerGroups_PeerGroup_LoggingOptions) GetParentYangName() string {
	return "peer-group"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_LoggingOptions_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_LoggingOptions_Config struct {
	parent types.Entity
	Filter types.YFilter

	LogNeighborStateChanges interface{} // boolean
}

func (config *Bgp_PeerGroups_PeerGroup_LoggingOptions_Config) HasDataOrFilter() bool {
	return config.LogNeighborStateChanges != nil
}

func (config *Bgp_PeerGroups_PeerGroup_LoggingOptions_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_LoggingOptions_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_LoggingOptions_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.LogNeighborStateChanges != nil {
		switch config.LogNeighborStateChanges.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.LogNeighborStateChanges.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.LogNeighborStateChanges)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "log-neighbor-state-changes", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_LoggingOptions_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_LoggingOptions_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_LoggingOptions_Config) SetValue(value_path string, value string) {
	if value_path == "log-neighbor-state-changes" {
		config.LogNeighborStateChanges = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_LoggingOptions_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_LoggingOptions_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_LoggingOptions_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_LoggingOptions_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_LoggingOptions_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_LoggingOptions_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_LoggingOptions_Config) GetParentYangName() string {
	return "logging-options"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_LoggingOptions_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_LoggingOptions_State struct {
	parent types.Entity
	Filter types.YFilter

	LogNeighborStateChanges interface{} // boolean
}

func (state *Bgp_PeerGroups_PeerGroup_LoggingOptions_State) HasDataOrFilter() bool {
	return state.LogNeighborStateChanges != nil
}

func (state *Bgp_PeerGroups_PeerGroup_LoggingOptions_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_LoggingOptions_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_LoggingOptions_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.LogNeighborStateChanges != nil {
		switch state.LogNeighborStateChanges.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.LogNeighborStateChanges.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.LogNeighborStateChanges)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "log-neighbor-state-changes", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_LoggingOptions_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_LoggingOptions_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_LoggingOptions_State) SetValue(value_path string, value string) {
	if value_path == "log-neighbor-state-changes" {
		state.LogNeighborStateChanges = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_LoggingOptions_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_LoggingOptions_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_LoggingOptions_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_LoggingOptions_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_LoggingOptions_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_LoggingOptions_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_LoggingOptions_State) GetParentYangName() string {
	return "logging-options"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_EbgpMultihop
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_EbgpMultihop struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config
	State  Bgp_PeerGroups_PeerGroup_EbgpMultihop_State
}

func (ebgpMultihop *Bgp_PeerGroups_PeerGroup_EbgpMultihop) HasDataOrFilter() bool {
	return ebgpMultihop.Config.HasDataOrFilter() ||
		ebgpMultihop.State.HasDataOrFilter()
}

func (ebgpMultihop *Bgp_PeerGroups_PeerGroup_EbgpMultihop) GetFilter() types.YFilter {
	return ebgpMultihop.Filter
}

func (ebgpMultihop *Bgp_PeerGroups_PeerGroup_EbgpMultihop) GetSegmentPath() string {
	return "ebgp-multihop"
}

func (ebgpMultihop *Bgp_PeerGroups_PeerGroup_EbgpMultihop) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: ebgpMultihop.GetSegmentPath()}
	return entityPath
}

func (ebgpMultihop *Bgp_PeerGroups_PeerGroup_EbgpMultihop) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &ebgpMultihop.Config
	}
	if child_yang_name == "state" {
		return &ebgpMultihop.State
	}
	return nil
}

func (ebgpMultihop *Bgp_PeerGroups_PeerGroup_EbgpMultihop) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &ebgpMultihop.Config
	children["state"] = &ebgpMultihop.State

	return children
}

func (ebgpMultihop *Bgp_PeerGroups_PeerGroup_EbgpMultihop) SetValue(value_path string, value string) {
}

func (ebgpMultihop *Bgp_PeerGroups_PeerGroup_EbgpMultihop) GetBundleName() string {
	return "ydktest"
}

func (ebgpMultihop *Bgp_PeerGroups_PeerGroup_EbgpMultihop) GetYangName() string {
	return "ebgpMultihop"
}

func (ebgpMultihop *Bgp_PeerGroups_PeerGroup_EbgpMultihop) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (ebgpMultihop *Bgp_PeerGroups_PeerGroup_EbgpMultihop) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (ebgpMultihop *Bgp_PeerGroups_PeerGroup_EbgpMultihop) SetParent(parent types.Entity) {
	ebgpMultihop.parent = parent
}

func (ebgpMultihop *Bgp_PeerGroups_PeerGroup_EbgpMultihop) GetParent() types.Entity {
	return ebgpMultihop.parent
}

func (ebgpMultihop *Bgp_PeerGroups_PeerGroup_EbgpMultihop) GetParentYangName() string {
	return "peer-group"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config struct {
	parent types.Entity
	Filter types.YFilter

	Enabled     interface{} // boolean
	MultihopTtl interface{} // uint8
}

func (config *Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config) HasDataOrFilter() bool {
	return config.Enabled != nil ||
		config.MultihopTtl != nil
}

func (config *Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.Enabled != nil {
		switch config.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	if config.MultihopTtl != nil {
		switch config.MultihopTtl.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MultihopTtl.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MultihopTtl)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "multihop-ttl", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config) SetValue(value_path string, value string) {
	if value_path == "enabled" {
		config.Enabled = value
	}
	if value_path == "multihop-ttl" {
		config.MultihopTtl = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_EbgpMultihop_Config) GetParentYangName() string {
	return "ebgp-multihop"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_EbgpMultihop_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_EbgpMultihop_State struct {
	parent types.Entity
	Filter types.YFilter

	Enabled     interface{} // boolean
	MultihopTtl interface{} // uint8
}

func (state *Bgp_PeerGroups_PeerGroup_EbgpMultihop_State) HasDataOrFilter() bool {
	return state.Enabled != nil ||
		state.MultihopTtl != nil
}

func (state *Bgp_PeerGroups_PeerGroup_EbgpMultihop_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_EbgpMultihop_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_EbgpMultihop_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.Enabled != nil {
		switch state.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	if state.MultihopTtl != nil {
		switch state.MultihopTtl.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MultihopTtl.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MultihopTtl)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "multihop-ttl", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_EbgpMultihop_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_EbgpMultihop_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_EbgpMultihop_State) SetValue(value_path string, value string) {
	if value_path == "enabled" {
		state.Enabled = value
	}
	if value_path == "multihop-ttl" {
		state.MultihopTtl = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_EbgpMultihop_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_EbgpMultihop_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_EbgpMultihop_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_EbgpMultihop_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_EbgpMultihop_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_EbgpMultihop_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_EbgpMultihop_State) GetParentYangName() string {
	return "ebgp-multihop"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_RouteReflector
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_RouteReflector struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_PeerGroups_PeerGroup_RouteReflector_Config
	State  Bgp_PeerGroups_PeerGroup_RouteReflector_State
}

func (routeReflector *Bgp_PeerGroups_PeerGroup_RouteReflector) HasDataOrFilter() bool {
	return routeReflector.Config.HasDataOrFilter() ||
		routeReflector.State.HasDataOrFilter()
}

func (routeReflector *Bgp_PeerGroups_PeerGroup_RouteReflector) GetFilter() types.YFilter {
	return routeReflector.Filter
}

func (routeReflector *Bgp_PeerGroups_PeerGroup_RouteReflector) GetSegmentPath() string {
	return "route-reflector"
}

func (routeReflector *Bgp_PeerGroups_PeerGroup_RouteReflector) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: routeReflector.GetSegmentPath()}
	return entityPath
}

func (routeReflector *Bgp_PeerGroups_PeerGroup_RouteReflector) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &routeReflector.Config
	}
	if child_yang_name == "state" {
		return &routeReflector.State
	}
	return nil
}

func (routeReflector *Bgp_PeerGroups_PeerGroup_RouteReflector) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &routeReflector.Config
	children["state"] = &routeReflector.State

	return children
}

func (routeReflector *Bgp_PeerGroups_PeerGroup_RouteReflector) SetValue(value_path string, value string) {
}

func (routeReflector *Bgp_PeerGroups_PeerGroup_RouteReflector) GetBundleName() string {
	return "ydktest"
}

func (routeReflector *Bgp_PeerGroups_PeerGroup_RouteReflector) GetYangName() string {
	return "routeReflector"
}

func (routeReflector *Bgp_PeerGroups_PeerGroup_RouteReflector) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (routeReflector *Bgp_PeerGroups_PeerGroup_RouteReflector) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (routeReflector *Bgp_PeerGroups_PeerGroup_RouteReflector) SetParent(parent types.Entity) {
	routeReflector.parent = parent
}

func (routeReflector *Bgp_PeerGroups_PeerGroup_RouteReflector) GetParent() types.Entity {
	return routeReflector.parent
}

func (routeReflector *Bgp_PeerGroups_PeerGroup_RouteReflector) GetParentYangName() string {
	return "peer-group"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_RouteReflector_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_RouteReflector_Config struct {
	parent types.Entity
	Filter types.YFilter

	RouteReflectorClient    interface{} // boolean
	RouteReflectorClusterId interface{} // str
}

func (config *Bgp_PeerGroups_PeerGroup_RouteReflector_Config) HasDataOrFilter() bool {
	return config.RouteReflectorClient != nil ||
		config.RouteReflectorClusterId != nil
}

func (config *Bgp_PeerGroups_PeerGroup_RouteReflector_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_RouteReflector_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_RouteReflector_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.RouteReflectorClient != nil {
		switch config.RouteReflectorClient.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RouteReflectorClient.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RouteReflectorClient)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "route-reflector-client", Data: leafData})
		}
	}

	if config.RouteReflectorClusterId != nil {
		switch config.RouteReflectorClusterId.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RouteReflectorClusterId.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RouteReflectorClusterId)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "route-reflector-cluster-id", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_RouteReflector_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_RouteReflector_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_RouteReflector_Config) SetValue(value_path string, value string) {
	if value_path == "route-reflector-client" {
		config.RouteReflectorClient = value
	}
	if value_path == "route-reflector-cluster-id" {
		config.RouteReflectorClusterId = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_RouteReflector_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_RouteReflector_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_RouteReflector_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_RouteReflector_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_RouteReflector_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_RouteReflector_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_RouteReflector_Config) GetParentYangName() string {
	return "route-reflector"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_RouteReflector_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_RouteReflector_State struct {
	parent types.Entity
	Filter types.YFilter

	RouteReflectorClient    interface{} // boolean
	RouteReflectorClusterId interface{} // str
}

func (state *Bgp_PeerGroups_PeerGroup_RouteReflector_State) HasDataOrFilter() bool {
	return state.RouteReflectorClient != nil ||
		state.RouteReflectorClusterId != nil
}

func (state *Bgp_PeerGroups_PeerGroup_RouteReflector_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_RouteReflector_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_RouteReflector_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.RouteReflectorClient != nil {
		switch state.RouteReflectorClient.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RouteReflectorClient.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RouteReflectorClient)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "route-reflector-client", Data: leafData})
		}
	}

	if state.RouteReflectorClusterId != nil {
		switch state.RouteReflectorClusterId.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RouteReflectorClusterId.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RouteReflectorClusterId)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "route-reflector-cluster-id", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_RouteReflector_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_RouteReflector_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_RouteReflector_State) SetValue(value_path string, value string) {
	if value_path == "route-reflector-client" {
		state.RouteReflectorClient = value
	}
	if value_path == "route-reflector-cluster-id" {
		state.RouteReflectorClusterId = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_RouteReflector_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_RouteReflector_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_RouteReflector_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_RouteReflector_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_RouteReflector_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_RouteReflector_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_RouteReflector_State) GetParentYangName() string {
	return "route-reflector"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AsPathOptions
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AsPathOptions struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_PeerGroups_PeerGroup_AsPathOptions_Config
	State  Bgp_PeerGroups_PeerGroup_AsPathOptions_State
}

func (asPathOptions *Bgp_PeerGroups_PeerGroup_AsPathOptions) HasDataOrFilter() bool {
	return asPathOptions.Config.HasDataOrFilter() ||
		asPathOptions.State.HasDataOrFilter()
}

func (asPathOptions *Bgp_PeerGroups_PeerGroup_AsPathOptions) GetFilter() types.YFilter {
	return asPathOptions.Filter
}

func (asPathOptions *Bgp_PeerGroups_PeerGroup_AsPathOptions) GetSegmentPath() string {
	return "as-path-options"
}

func (asPathOptions *Bgp_PeerGroups_PeerGroup_AsPathOptions) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: asPathOptions.GetSegmentPath()}
	return entityPath
}

func (asPathOptions *Bgp_PeerGroups_PeerGroup_AsPathOptions) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &asPathOptions.Config
	}
	if child_yang_name == "state" {
		return &asPathOptions.State
	}
	return nil
}

func (asPathOptions *Bgp_PeerGroups_PeerGroup_AsPathOptions) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &asPathOptions.Config
	children["state"] = &asPathOptions.State

	return children
}

func (asPathOptions *Bgp_PeerGroups_PeerGroup_AsPathOptions) SetValue(value_path string, value string) {
}

func (asPathOptions *Bgp_PeerGroups_PeerGroup_AsPathOptions) GetBundleName() string {
	return "ydktest"
}

func (asPathOptions *Bgp_PeerGroups_PeerGroup_AsPathOptions) GetYangName() string {
	return "asPathOptions"
}

func (asPathOptions *Bgp_PeerGroups_PeerGroup_AsPathOptions) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (asPathOptions *Bgp_PeerGroups_PeerGroup_AsPathOptions) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (asPathOptions *Bgp_PeerGroups_PeerGroup_AsPathOptions) SetParent(parent types.Entity) {
	asPathOptions.parent = parent
}

func (asPathOptions *Bgp_PeerGroups_PeerGroup_AsPathOptions) GetParent() types.Entity {
	return asPathOptions.parent
}

func (asPathOptions *Bgp_PeerGroups_PeerGroup_AsPathOptions) GetParentYangName() string {
	return "peer-group"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AsPathOptions_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AsPathOptions_Config struct {
	parent types.Entity
	Filter types.YFilter

	AllowOwnAs    interface{} // uint8
	ReplacePeerAs interface{} // boolean
}

func (config *Bgp_PeerGroups_PeerGroup_AsPathOptions_Config) HasDataOrFilter() bool {
	return config.AllowOwnAs != nil ||
		config.ReplacePeerAs != nil
}

func (config *Bgp_PeerGroups_PeerGroup_AsPathOptions_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_AsPathOptions_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AsPathOptions_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.AllowOwnAs != nil {
		switch config.AllowOwnAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.AllowOwnAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.AllowOwnAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "allow-own-as", Data: leafData})
		}
	}

	if config.ReplacePeerAs != nil {
		switch config.ReplacePeerAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ReplacePeerAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ReplacePeerAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "replace-peer-as", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_AsPathOptions_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_AsPathOptions_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_AsPathOptions_Config) SetValue(value_path string, value string) {
	if value_path == "allow-own-as" {
		config.AllowOwnAs = value
	}
	if value_path == "replace-peer-as" {
		config.ReplacePeerAs = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_AsPathOptions_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_AsPathOptions_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AsPathOptions_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_AsPathOptions_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_AsPathOptions_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_AsPathOptions_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_AsPathOptions_Config) GetParentYangName() string {
	return "as-path-options"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AsPathOptions_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AsPathOptions_State struct {
	parent types.Entity
	Filter types.YFilter

	AllowOwnAs    interface{} // uint8
	ReplacePeerAs interface{} // boolean
}

func (state *Bgp_PeerGroups_PeerGroup_AsPathOptions_State) HasDataOrFilter() bool {
	return state.AllowOwnAs != nil ||
		state.ReplacePeerAs != nil
}

func (state *Bgp_PeerGroups_PeerGroup_AsPathOptions_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_AsPathOptions_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AsPathOptions_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.AllowOwnAs != nil {
		switch state.AllowOwnAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.AllowOwnAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.AllowOwnAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "allow-own-as", Data: leafData})
		}
	}

	if state.ReplacePeerAs != nil {
		switch state.ReplacePeerAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ReplacePeerAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ReplacePeerAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "replace-peer-as", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_AsPathOptions_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_AsPathOptions_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_AsPathOptions_State) SetValue(value_path string, value string) {
	if value_path == "allow-own-as" {
		state.AllowOwnAs = value
	}
	if value_path == "replace-peer-as" {
		state.ReplacePeerAs = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_AsPathOptions_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_AsPathOptions_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AsPathOptions_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_AsPathOptions_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_AsPathOptions_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_AsPathOptions_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_AsPathOptions_State) GetParentYangName() string {
	return "as-path-options"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AddPaths
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AddPaths struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_PeerGroups_PeerGroup_AddPaths_Config
	State  Bgp_PeerGroups_PeerGroup_AddPaths_State
}

func (addPaths *Bgp_PeerGroups_PeerGroup_AddPaths) HasDataOrFilter() bool {
	return addPaths.Config.HasDataOrFilter() ||
		addPaths.State.HasDataOrFilter()
}

func (addPaths *Bgp_PeerGroups_PeerGroup_AddPaths) GetFilter() types.YFilter {
	return addPaths.Filter
}

func (addPaths *Bgp_PeerGroups_PeerGroup_AddPaths) GetSegmentPath() string {
	return "add-paths"
}

func (addPaths *Bgp_PeerGroups_PeerGroup_AddPaths) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: addPaths.GetSegmentPath()}
	return entityPath
}

func (addPaths *Bgp_PeerGroups_PeerGroup_AddPaths) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &addPaths.Config
	}
	if child_yang_name == "state" {
		return &addPaths.State
	}
	return nil
}

func (addPaths *Bgp_PeerGroups_PeerGroup_AddPaths) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &addPaths.Config
	children["state"] = &addPaths.State

	return children
}

func (addPaths *Bgp_PeerGroups_PeerGroup_AddPaths) SetValue(value_path string, value string) {
}

func (addPaths *Bgp_PeerGroups_PeerGroup_AddPaths) GetBundleName() string {
	return "ydktest"
}

func (addPaths *Bgp_PeerGroups_PeerGroup_AddPaths) GetYangName() string {
	return "addPaths"
}

func (addPaths *Bgp_PeerGroups_PeerGroup_AddPaths) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (addPaths *Bgp_PeerGroups_PeerGroup_AddPaths) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (addPaths *Bgp_PeerGroups_PeerGroup_AddPaths) SetParent(parent types.Entity) {
	addPaths.parent = parent
}

func (addPaths *Bgp_PeerGroups_PeerGroup_AddPaths) GetParent() types.Entity {
	return addPaths.parent
}

func (addPaths *Bgp_PeerGroups_PeerGroup_AddPaths) GetParentYangName() string {
	return "peer-group"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AddPaths_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AddPaths_Config struct {
	parent types.Entity
	Filter types.YFilter

	EligiblePrefixPolicy interface{} // str
	Receive              interface{} // boolean
	SendMax              interface{} // uint8
}

func (config *Bgp_PeerGroups_PeerGroup_AddPaths_Config) HasDataOrFilter() bool {
	return config.EligiblePrefixPolicy != nil ||
		config.Receive != nil ||
		config.SendMax != nil
}

func (config *Bgp_PeerGroups_PeerGroup_AddPaths_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_AddPaths_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AddPaths_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.EligiblePrefixPolicy != nil {
		switch config.EligiblePrefixPolicy.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.EligiblePrefixPolicy.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.EligiblePrefixPolicy)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "eligible-prefix-policy", Data: leafData})
		}
	}

	if config.Receive != nil {
		switch config.Receive.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.Receive.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.Receive)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "receive", Data: leafData})
		}
	}

	if config.SendMax != nil {
		switch config.SendMax.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.SendMax.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.SendMax)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "send-max", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_AddPaths_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_AddPaths_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_AddPaths_Config) SetValue(value_path string, value string) {
	if value_path == "eligible-prefix-policy" {
		config.EligiblePrefixPolicy = value
	}
	if value_path == "receive" {
		config.Receive = value
	}
	if value_path == "send-max" {
		config.SendMax = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_AddPaths_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_AddPaths_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AddPaths_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_AddPaths_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_AddPaths_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_AddPaths_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_AddPaths_Config) GetParentYangName() string {
	return "add-paths"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AddPaths_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AddPaths_State struct {
	parent types.Entity
	Filter types.YFilter

	EligiblePrefixPolicy interface{} // str
	Receive              interface{} // boolean
	SendMax              interface{} // uint8
}

func (state *Bgp_PeerGroups_PeerGroup_AddPaths_State) HasDataOrFilter() bool {
	return state.EligiblePrefixPolicy != nil ||
		state.Receive != nil ||
		state.SendMax != nil
}

func (state *Bgp_PeerGroups_PeerGroup_AddPaths_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_AddPaths_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AddPaths_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.EligiblePrefixPolicy != nil {
		switch state.EligiblePrefixPolicy.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.EligiblePrefixPolicy.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.EligiblePrefixPolicy)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "eligible-prefix-policy", Data: leafData})
		}
	}

	if state.Receive != nil {
		switch state.Receive.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.Receive.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.Receive)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "receive", Data: leafData})
		}
	}

	if state.SendMax != nil {
		switch state.SendMax.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.SendMax.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.SendMax)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "send-max", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_AddPaths_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_AddPaths_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_AddPaths_State) SetValue(value_path string, value string) {
	if value_path == "eligible-prefix-policy" {
		state.EligiblePrefixPolicy = value
	}
	if value_path == "receive" {
		state.Receive = value
	}
	if value_path == "send-max" {
		state.SendMax = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_AddPaths_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_AddPaths_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AddPaths_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_AddPaths_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_AddPaths_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_AddPaths_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_AddPaths_State) GetParentYangName() string {
	return "add-paths"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_UseMultiplePaths
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_UseMultiplePaths struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config
	Ebgp   Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp
	Ibgp   Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp
	State  Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State
}

func (useMultiplePaths *Bgp_PeerGroups_PeerGroup_UseMultiplePaths) HasDataOrFilter() bool {
	return useMultiplePaths.Config.HasDataOrFilter() ||
		useMultiplePaths.Ebgp.HasDataOrFilter() ||
		useMultiplePaths.Ibgp.HasDataOrFilter() ||
		useMultiplePaths.State.HasDataOrFilter()
}

func (useMultiplePaths *Bgp_PeerGroups_PeerGroup_UseMultiplePaths) GetFilter() types.YFilter {
	return useMultiplePaths.Filter
}

func (useMultiplePaths *Bgp_PeerGroups_PeerGroup_UseMultiplePaths) GetSegmentPath() string {
	return "use-multiple-paths"
}

func (useMultiplePaths *Bgp_PeerGroups_PeerGroup_UseMultiplePaths) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: useMultiplePaths.GetSegmentPath()}
	return entityPath
}

func (useMultiplePaths *Bgp_PeerGroups_PeerGroup_UseMultiplePaths) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &useMultiplePaths.Config
	}
	if child_yang_name == "ebgp" {
		return &useMultiplePaths.Ebgp
	}
	if child_yang_name == "ibgp" {
		return &useMultiplePaths.Ibgp
	}
	if child_yang_name == "state" {
		return &useMultiplePaths.State
	}
	return nil
}

func (useMultiplePaths *Bgp_PeerGroups_PeerGroup_UseMultiplePaths) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &useMultiplePaths.Config
	children["ebgp"] = &useMultiplePaths.Ebgp
	children["ibgp"] = &useMultiplePaths.Ibgp
	children["state"] = &useMultiplePaths.State

	return children
}

func (useMultiplePaths *Bgp_PeerGroups_PeerGroup_UseMultiplePaths) SetValue(value_path string, value string) {
}

func (useMultiplePaths *Bgp_PeerGroups_PeerGroup_UseMultiplePaths) GetBundleName() string {
	return "ydktest"
}

func (useMultiplePaths *Bgp_PeerGroups_PeerGroup_UseMultiplePaths) GetYangName() string {
	return "useMultiplePaths"
}

func (useMultiplePaths *Bgp_PeerGroups_PeerGroup_UseMultiplePaths) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (useMultiplePaths *Bgp_PeerGroups_PeerGroup_UseMultiplePaths) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (useMultiplePaths *Bgp_PeerGroups_PeerGroup_UseMultiplePaths) SetParent(parent types.Entity) {
	useMultiplePaths.parent = parent
}

func (useMultiplePaths *Bgp_PeerGroups_PeerGroup_UseMultiplePaths) GetParent() types.Entity {
	return useMultiplePaths.parent
}

func (useMultiplePaths *Bgp_PeerGroups_PeerGroup_UseMultiplePaths) GetParentYangName() string {
	return "peer-group"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config struct {
	parent types.Entity
	Filter types.YFilter

	Enabled interface{} // boolean
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config) HasDataOrFilter() bool {
	return config.Enabled != nil
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.Enabled != nil {
		switch config.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config) SetValue(value_path string, value string) {
	if value_path == "enabled" {
		config.Enabled = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Config) GetParentYangName() string {
	return "use-multiple-paths"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State struct {
	parent types.Entity
	Filter types.YFilter

	Enabled interface{} // boolean
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State) HasDataOrFilter() bool {
	return state.Enabled != nil
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.Enabled != nil {
		switch state.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State) SetValue(value_path string, value string) {
	if value_path == "enabled" {
		state.Enabled = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_State) GetParentYangName() string {
	return "use-multiple-paths"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config
	State  Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State
}

func (ebgp *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp) HasDataOrFilter() bool {
	return ebgp.Config.HasDataOrFilter() ||
		ebgp.State.HasDataOrFilter()
}

func (ebgp *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp) GetFilter() types.YFilter {
	return ebgp.Filter
}

func (ebgp *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp) GetSegmentPath() string {
	return "ebgp"
}

func (ebgp *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: ebgp.GetSegmentPath()}
	return entityPath
}

func (ebgp *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &ebgp.Config
	}
	if child_yang_name == "state" {
		return &ebgp.State
	}
	return nil
}

func (ebgp *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &ebgp.Config
	children["state"] = &ebgp.State

	return children
}

func (ebgp *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp) SetValue(value_path string, value string) {
}

func (ebgp *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp) GetBundleName() string {
	return "ydktest"
}

func (ebgp *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp) GetYangName() string {
	return "ebgp"
}

func (ebgp *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (ebgp *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (ebgp *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp) SetParent(parent types.Entity) {
	ebgp.parent = parent
}

func (ebgp *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp) GetParent() types.Entity {
	return ebgp.parent
}

func (ebgp *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp) GetParentYangName() string {
	return "use-multiple-paths"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config struct {
	parent types.Entity
	Filter types.YFilter

	AllowMultipleAs interface{} // boolean
	MaximumPaths    interface{} // uint32
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config) HasDataOrFilter() bool {
	return config.AllowMultipleAs != nil ||
		config.MaximumPaths != nil
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.AllowMultipleAs != nil {
		switch config.AllowMultipleAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.AllowMultipleAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.AllowMultipleAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "allow-multiple-as", Data: leafData})
		}
	}

	if config.MaximumPaths != nil {
		switch config.MaximumPaths.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaximumPaths.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaximumPaths)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "maximum-paths", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config) SetValue(value_path string, value string) {
	if value_path == "allow-multiple-as" {
		config.AllowMultipleAs = value
	}
	if value_path == "maximum-paths" {
		config.MaximumPaths = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_Config) GetParentYangName() string {
	return "ebgp"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State struct {
	parent types.Entity
	Filter types.YFilter

	AllowMultipleAs interface{} // boolean
	MaximumPaths    interface{} // uint32
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State) HasDataOrFilter() bool {
	return state.AllowMultipleAs != nil ||
		state.MaximumPaths != nil
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.AllowMultipleAs != nil {
		switch state.AllowMultipleAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.AllowMultipleAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.AllowMultipleAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "allow-multiple-as", Data: leafData})
		}
	}

	if state.MaximumPaths != nil {
		switch state.MaximumPaths.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaximumPaths.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaximumPaths)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "maximum-paths", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State) SetValue(value_path string, value string) {
	if value_path == "allow-multiple-as" {
		state.AllowMultipleAs = value
	}
	if value_path == "maximum-paths" {
		state.MaximumPaths = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ebgp_State) GetParentYangName() string {
	return "ebgp"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config
	State  Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State
}

func (ibgp *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp) HasDataOrFilter() bool {
	return ibgp.Config.HasDataOrFilter() ||
		ibgp.State.HasDataOrFilter()
}

func (ibgp *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp) GetFilter() types.YFilter {
	return ibgp.Filter
}

func (ibgp *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp) GetSegmentPath() string {
	return "ibgp"
}

func (ibgp *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: ibgp.GetSegmentPath()}
	return entityPath
}

func (ibgp *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &ibgp.Config
	}
	if child_yang_name == "state" {
		return &ibgp.State
	}
	return nil
}

func (ibgp *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &ibgp.Config
	children["state"] = &ibgp.State

	return children
}

func (ibgp *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp) SetValue(value_path string, value string) {
}

func (ibgp *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp) GetBundleName() string {
	return "ydktest"
}

func (ibgp *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp) GetYangName() string {
	return "ibgp"
}

func (ibgp *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (ibgp *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (ibgp *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp) SetParent(parent types.Entity) {
	ibgp.parent = parent
}

func (ibgp *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp) GetParent() types.Entity {
	return ibgp.parent
}

func (ibgp *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp) GetParentYangName() string {
	return "use-multiple-paths"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaximumPaths interface{} // uint32
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config) HasDataOrFilter() bool {
	return config.MaximumPaths != nil
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaximumPaths != nil {
		switch config.MaximumPaths.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaximumPaths.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaximumPaths)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "maximum-paths", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config) SetValue(value_path string, value string) {
	if value_path == "maximum-paths" {
		config.MaximumPaths = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_Config) GetParentYangName() string {
	return "ibgp"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State struct {
	parent types.Entity
	Filter types.YFilter

	MaximumPaths interface{} // uint32
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State) HasDataOrFilter() bool {
	return state.MaximumPaths != nil
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaximumPaths != nil {
		switch state.MaximumPaths.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaximumPaths.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaximumPaths)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "maximum-paths", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State) SetValue(value_path string, value string) {
	if value_path == "maximum-paths" {
		state.MaximumPaths = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_UseMultiplePaths_Ibgp_State) GetParentYangName() string {
	return "ibgp"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_ApplyPolicy
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_ApplyPolicy struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config
	State  Bgp_PeerGroups_PeerGroup_ApplyPolicy_State
}

func (applyPolicy *Bgp_PeerGroups_PeerGroup_ApplyPolicy) HasDataOrFilter() bool {
	return applyPolicy.Config.HasDataOrFilter() ||
		applyPolicy.State.HasDataOrFilter()
}

func (applyPolicy *Bgp_PeerGroups_PeerGroup_ApplyPolicy) GetFilter() types.YFilter {
	return applyPolicy.Filter
}

func (applyPolicy *Bgp_PeerGroups_PeerGroup_ApplyPolicy) GetSegmentPath() string {
	return "apply-policy"
}

func (applyPolicy *Bgp_PeerGroups_PeerGroup_ApplyPolicy) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: applyPolicy.GetSegmentPath()}
	return entityPath
}

func (applyPolicy *Bgp_PeerGroups_PeerGroup_ApplyPolicy) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &applyPolicy.Config
	}
	if child_yang_name == "state" {
		return &applyPolicy.State
	}
	return nil
}

func (applyPolicy *Bgp_PeerGroups_PeerGroup_ApplyPolicy) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &applyPolicy.Config
	children["state"] = &applyPolicy.State

	return children
}

func (applyPolicy *Bgp_PeerGroups_PeerGroup_ApplyPolicy) SetValue(value_path string, value string) {
}

func (applyPolicy *Bgp_PeerGroups_PeerGroup_ApplyPolicy) GetBundleName() string {
	return "ydktest"
}

func (applyPolicy *Bgp_PeerGroups_PeerGroup_ApplyPolicy) GetYangName() string {
	return "applyPolicy"
}

func (applyPolicy *Bgp_PeerGroups_PeerGroup_ApplyPolicy) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (applyPolicy *Bgp_PeerGroups_PeerGroup_ApplyPolicy) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (applyPolicy *Bgp_PeerGroups_PeerGroup_ApplyPolicy) SetParent(parent types.Entity) {
	applyPolicy.parent = parent
}

func (applyPolicy *Bgp_PeerGroups_PeerGroup_ApplyPolicy) GetParent() types.Entity {
	return applyPolicy.parent
}

func (applyPolicy *Bgp_PeerGroups_PeerGroup_ApplyPolicy) GetParentYangName() string {
	return "peer-group"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config struct {
	parent types.Entity
	Filter types.YFilter

	DefaultExportPolicy interface{} // enumeration
	DefaultImportPolicy interface{} // enumeration
	ExportPolicy        []interface{}
	ImportPolicy        []interface{}
}

func (config *Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config) HasDataOrFilter() bool {
	for _, leaf := range config.ExportPolicy {
		if leaf != nil {
			return true
		}
	}
	for _, leaf := range config.ImportPolicy {
		if leaf != nil {
			return true
		}
	}
	return config.DefaultExportPolicy != nil ||
		config.DefaultImportPolicy != nil
}

func (config *Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.DefaultExportPolicy != nil {
		switch config.DefaultExportPolicy.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.DefaultExportPolicy.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.DefaultExportPolicy)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "default-export-policy", Data: leafData})
		}
	}

	if config.DefaultImportPolicy != nil {
		switch config.DefaultImportPolicy.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.DefaultImportPolicy.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.DefaultImportPolicy)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "default-import-policy", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config) SetValue(value_path string, value string) {
	if value_path == "default-export-policy" {
		config.DefaultExportPolicy = value
	}
	if value_path == "default-import-policy" {
		config.DefaultImportPolicy = value
	}
	if value_path == "export-policy" {
		config.ExportPolicy = append(config.ExportPolicy, value)
	}
	if value_path == "import-policy" {
		config.ImportPolicy = append(config.ImportPolicy, value)
	}
}

func (config *Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_ApplyPolicy_Config) GetParentYangName() string {
	return "apply-policy"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_ApplyPolicy_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_ApplyPolicy_State struct {
	parent types.Entity
	Filter types.YFilter

	DefaultExportPolicy interface{} // enumeration
	DefaultImportPolicy interface{} // enumeration
	ExportPolicy        []interface{}
	ImportPolicy        []interface{}
}

func (state *Bgp_PeerGroups_PeerGroup_ApplyPolicy_State) HasDataOrFilter() bool {
	for _, leaf := range state.ExportPolicy {
		if leaf != nil {
			return true
		}
	}
	for _, leaf := range state.ImportPolicy {
		if leaf != nil {
			return true
		}
	}
	return state.DefaultExportPolicy != nil ||
		state.DefaultImportPolicy != nil
}

func (state *Bgp_PeerGroups_PeerGroup_ApplyPolicy_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_ApplyPolicy_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_ApplyPolicy_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.DefaultExportPolicy != nil {
		switch state.DefaultExportPolicy.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.DefaultExportPolicy.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.DefaultExportPolicy)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "default-export-policy", Data: leafData})
		}
	}

	if state.DefaultImportPolicy != nil {
		switch state.DefaultImportPolicy.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.DefaultImportPolicy.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.DefaultImportPolicy)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "default-import-policy", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_ApplyPolicy_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_ApplyPolicy_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_ApplyPolicy_State) SetValue(value_path string, value string) {
	if value_path == "default-export-policy" {
		state.DefaultExportPolicy = value
	}
	if value_path == "default-import-policy" {
		state.DefaultImportPolicy = value
	}
	if value_path == "export-policy" {
		state.ExportPolicy = append(state.ExportPolicy, value)
	}
	if value_path == "import-policy" {
		state.ImportPolicy = append(state.ImportPolicy, value)
	}
}

func (state *Bgp_PeerGroups_PeerGroup_ApplyPolicy_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_ApplyPolicy_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_ApplyPolicy_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_ApplyPolicy_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_ApplyPolicy_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_ApplyPolicy_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_ApplyPolicy_State) GetParentYangName() string {
	return "apply-policy"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis struct {
	parent types.Entity
	Filter types.YFilter

	AfiSafi []Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi
}

func (afiSafis *Bgp_PeerGroups_PeerGroup_AfiSafis) HasDataOrFilter() bool {
	for _, child := range afiSafis.AfiSafi {
		if child.HasDataOrFilter() {
			return true
		}
	}
	return false
}

func (afiSafis *Bgp_PeerGroups_PeerGroup_AfiSafis) GetFilter() types.YFilter {
	return afiSafis.Filter
}

func (afiSafis *Bgp_PeerGroups_PeerGroup_AfiSafis) GetSegmentPath() string {
	return "afi-safis"
}

func (afiSafis *Bgp_PeerGroups_PeerGroup_AfiSafis) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: afiSafis.GetSegmentPath()}
	return entityPath
}

func (afiSafis *Bgp_PeerGroups_PeerGroup_AfiSafis) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "afi-safi" {
		for _, c := range afiSafis.AfiSafi {
			if afiSafis.GetSegmentPath() == segment_path {
				return &c
			}
		}
		child := Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi{}
		afiSafis.AfiSafi = append(afiSafis.AfiSafi, child)
		return &afiSafis.AfiSafi[len(afiSafis.AfiSafi)-1]
	}
	return nil
}

func (afiSafis *Bgp_PeerGroups_PeerGroup_AfiSafis) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	for i := range afiSafis.AfiSafi {
		children[afiSafis.AfiSafi[i].GetSegmentPath()] = &afiSafis.AfiSafi[i]
	}

	return children
}

func (afiSafis *Bgp_PeerGroups_PeerGroup_AfiSafis) SetValue(value_path string, value string) {
}

func (afiSafis *Bgp_PeerGroups_PeerGroup_AfiSafis) GetBundleName() string {
	return "ydktest"
}

func (afiSafis *Bgp_PeerGroups_PeerGroup_AfiSafis) GetYangName() string {
	return "afiSafis"
}

func (afiSafis *Bgp_PeerGroups_PeerGroup_AfiSafis) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (afiSafis *Bgp_PeerGroups_PeerGroup_AfiSafis) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (afiSafis *Bgp_PeerGroups_PeerGroup_AfiSafis) SetParent(parent types.Entity) {
	afiSafis.parent = parent
}

func (afiSafis *Bgp_PeerGroups_PeerGroup_AfiSafis) GetParent() types.Entity {
	return afiSafis.parent
}

func (afiSafis *Bgp_PeerGroups_PeerGroup_AfiSafis) GetParentYangName() string {
	return "peer-group"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi struct {
	parent types.Entity
	Filter types.YFilter

	AfiSafiName           interface{} // identityref
	ApplyPolicy           Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy
	Config                Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config
	GracefulRestart       Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart
	Ipv4LabeledUnicast    Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast
	Ipv4Unicast           Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast
	Ipv6LabeledUnicast    Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast
	Ipv6Unicast           Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast
	L2VpnEvpn             Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn
	L2VpnVpls             Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls
	L3VpnIpv4Multicast    Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast
	L3VpnIpv4Unicast      Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast
	L3VpnIpv6Multicast    Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast
	L3VpnIpv6Unicast      Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast
	RouteSelectionOptions Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions
	State                 Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State
	UseMultiplePaths      Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths
}

func (afiSafi *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) HasDataOrFilter() bool {
	return afiSafi.AfiSafiName != nil ||
		afiSafi.ApplyPolicy.HasDataOrFilter() ||
		afiSafi.Config.HasDataOrFilter() ||
		afiSafi.GracefulRestart.HasDataOrFilter() ||
		afiSafi.Ipv4LabeledUnicast.HasDataOrFilter() ||
		afiSafi.Ipv4Unicast.HasDataOrFilter() ||
		afiSafi.Ipv6LabeledUnicast.HasDataOrFilter() ||
		afiSafi.Ipv6Unicast.HasDataOrFilter() ||
		afiSafi.L2VpnEvpn.HasDataOrFilter() ||
		afiSafi.L2VpnVpls.HasDataOrFilter() ||
		afiSafi.L3VpnIpv4Multicast.HasDataOrFilter() ||
		afiSafi.L3VpnIpv4Unicast.HasDataOrFilter() ||
		afiSafi.L3VpnIpv6Multicast.HasDataOrFilter() ||
		afiSafi.L3VpnIpv6Unicast.HasDataOrFilter() ||
		afiSafi.RouteSelectionOptions.HasDataOrFilter() ||
		afiSafi.State.HasDataOrFilter() ||
		afiSafi.UseMultiplePaths.HasDataOrFilter()
}

func (afiSafi *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetFilter() types.YFilter {
	return afiSafi.Filter
}

func (afiSafi *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetSegmentPath() string {
	return "afi-safi" + "[afi-safi-name=\"" + fmt.Sprintf("%v", afiSafi.AfiSafiName) + "\"]"
}

func (afiSafi *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: afiSafi.GetSegmentPath()}
	var leafData types.LeafData

	if afiSafi.AfiSafiName != nil {
		switch afiSafi.AfiSafiName.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: afiSafi.AfiSafiName.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", afiSafi.AfiSafiName)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "afi-safi-name", Data: leafData})
		}
	}

	return entityPath
}

func (afiSafi *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "apply-policy" {
		return &afiSafi.ApplyPolicy
	}
	if child_yang_name == "config" {
		return &afiSafi.Config
	}
	if child_yang_name == "graceful-restart" {
		return &afiSafi.GracefulRestart
	}
	if child_yang_name == "ipv4-labeled-unicast" {
		return &afiSafi.Ipv4LabeledUnicast
	}
	if child_yang_name == "ipv4-unicast" {
		return &afiSafi.Ipv4Unicast
	}
	if child_yang_name == "ipv6-labeled-unicast" {
		return &afiSafi.Ipv6LabeledUnicast
	}
	if child_yang_name == "ipv6-unicast" {
		return &afiSafi.Ipv6Unicast
	}
	if child_yang_name == "l2vpn-evpn" {
		return &afiSafi.L2VpnEvpn
	}
	if child_yang_name == "l2vpn-vpls" {
		return &afiSafi.L2VpnVpls
	}
	if child_yang_name == "l3vpn-ipv4-multicast" {
		return &afiSafi.L3VpnIpv4Multicast
	}
	if child_yang_name == "l3vpn-ipv4-unicast" {
		return &afiSafi.L3VpnIpv4Unicast
	}
	if child_yang_name == "l3vpn-ipv6-multicast" {
		return &afiSafi.L3VpnIpv6Multicast
	}
	if child_yang_name == "l3vpn-ipv6-unicast" {
		return &afiSafi.L3VpnIpv6Unicast
	}
	if child_yang_name == "route-selection-options" {
		return &afiSafi.RouteSelectionOptions
	}
	if child_yang_name == "state" {
		return &afiSafi.State
	}
	if child_yang_name == "use-multiple-paths" {
		return &afiSafi.UseMultiplePaths
	}
	return nil
}

func (afiSafi *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["apply-policy"] = &afiSafi.ApplyPolicy
	children["config"] = &afiSafi.Config
	children["graceful-restart"] = &afiSafi.GracefulRestart
	children["ipv4-labeled-unicast"] = &afiSafi.Ipv4LabeledUnicast
	children["ipv4-unicast"] = &afiSafi.Ipv4Unicast
	children["ipv6-labeled-unicast"] = &afiSafi.Ipv6LabeledUnicast
	children["ipv6-unicast"] = &afiSafi.Ipv6Unicast
	children["l2vpn-evpn"] = &afiSafi.L2VpnEvpn
	children["l2vpn-vpls"] = &afiSafi.L2VpnVpls
	children["l3vpn-ipv4-multicast"] = &afiSafi.L3VpnIpv4Multicast
	children["l3vpn-ipv4-unicast"] = &afiSafi.L3VpnIpv4Unicast
	children["l3vpn-ipv6-multicast"] = &afiSafi.L3VpnIpv6Multicast
	children["l3vpn-ipv6-unicast"] = &afiSafi.L3VpnIpv6Unicast
	children["route-selection-options"] = &afiSafi.RouteSelectionOptions
	children["state"] = &afiSafi.State
	children["use-multiple-paths"] = &afiSafi.UseMultiplePaths

	return children
}

func (afiSafi *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) SetValue(value_path string, value string) {
	if value_path == "afi-safi-name" {
		afiSafi.AfiSafiName = value
	}
}

func (afiSafi *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetBundleName() string {
	return "ydktest"
}

func (afiSafi *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetYangName() string {
	return "afiSafi"
}

func (afiSafi *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (afiSafi *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (afiSafi *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) SetParent(parent types.Entity) {
	afiSafi.parent = parent
}

func (afiSafi *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetParent() types.Entity {
	return afiSafi.parent
}

func (afiSafi *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi) GetParentYangName() string {
	return "afi-safis"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config struct {
	parent types.Entity
	Filter types.YFilter

	AfiSafiName interface{} // identityref
	Enabled     interface{} // boolean
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config) HasDataOrFilter() bool {
	return config.AfiSafiName != nil ||
		config.Enabled != nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.AfiSafiName != nil {
		switch config.AfiSafiName.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.AfiSafiName.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.AfiSafiName)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "afi-safi-name", Data: leafData})
		}
	}

	if config.Enabled != nil {
		switch config.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config) SetValue(value_path string, value string) {
	if value_path == "afi-safi-name" {
		config.AfiSafiName = value
	}
	if value_path == "enabled" {
		config.Enabled = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Config) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State struct {
	parent types.Entity
	Filter types.YFilter

	AfiSafiName interface{} // identityref
	Enabled     interface{} // boolean
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State) HasDataOrFilter() bool {
	return state.AfiSafiName != nil ||
		state.Enabled != nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.AfiSafiName != nil {
		switch state.AfiSafiName.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.AfiSafiName.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.AfiSafiName)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "afi-safi-name", Data: leafData})
		}
	}

	if state.Enabled != nil {
		switch state.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State) SetValue(value_path string, value string) {
	if value_path == "afi-safi-name" {
		state.AfiSafiName = value
	}
	if value_path == "enabled" {
		state.Enabled = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_State) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config
	State  Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State
}

func (gracefulRestart *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart) HasDataOrFilter() bool {
	return gracefulRestart.Config.HasDataOrFilter() ||
		gracefulRestart.State.HasDataOrFilter()
}

func (gracefulRestart *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart) GetFilter() types.YFilter {
	return gracefulRestart.Filter
}

func (gracefulRestart *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart) GetSegmentPath() string {
	return "graceful-restart"
}

func (gracefulRestart *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: gracefulRestart.GetSegmentPath()}
	return entityPath
}

func (gracefulRestart *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &gracefulRestart.Config
	}
	if child_yang_name == "state" {
		return &gracefulRestart.State
	}
	return nil
}

func (gracefulRestart *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &gracefulRestart.Config
	children["state"] = &gracefulRestart.State

	return children
}

func (gracefulRestart *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart) SetValue(value_path string, value string) {
}

func (gracefulRestart *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart) GetBundleName() string {
	return "ydktest"
}

func (gracefulRestart *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart) GetYangName() string {
	return "gracefulRestart"
}

func (gracefulRestart *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (gracefulRestart *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (gracefulRestart *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart) SetParent(parent types.Entity) {
	gracefulRestart.parent = parent
}

func (gracefulRestart *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart) GetParent() types.Entity {
	return gracefulRestart.parent
}

func (gracefulRestart *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config struct {
	parent types.Entity
	Filter types.YFilter

	Enabled interface{} // boolean
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config) HasDataOrFilter() bool {
	return config.Enabled != nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.Enabled != nil {
		switch config.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config) SetValue(value_path string, value string) {
	if value_path == "enabled" {
		config.Enabled = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_Config) GetParentYangName() string {
	return "graceful-restart"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State struct {
	parent types.Entity
	Filter types.YFilter

	Enabled interface{} // boolean
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State) HasDataOrFilter() bool {
	return state.Enabled != nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.Enabled != nil {
		switch state.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State) SetValue(value_path string, value string) {
	if value_path == "enabled" {
		state.Enabled = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_GracefulRestart_State) GetParentYangName() string {
	return "graceful-restart"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_Config
	State  Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_State
}

func (routeSelectionOptions *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions) HasDataOrFilter() bool {
	return routeSelectionOptions.Config.HasDataOrFilter() ||
		routeSelectionOptions.State.HasDataOrFilter()
}

func (routeSelectionOptions *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions) GetFilter() types.YFilter {
	return routeSelectionOptions.Filter
}

func (routeSelectionOptions *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions) GetSegmentPath() string {
	return "route-selection-options"
}

func (routeSelectionOptions *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: routeSelectionOptions.GetSegmentPath()}
	return entityPath
}

func (routeSelectionOptions *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &routeSelectionOptions.Config
	}
	if child_yang_name == "state" {
		return &routeSelectionOptions.State
	}
	return nil
}

func (routeSelectionOptions *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &routeSelectionOptions.Config
	children["state"] = &routeSelectionOptions.State

	return children
}

func (routeSelectionOptions *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions) SetValue(value_path string, value string) {
}

func (routeSelectionOptions *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions) GetBundleName() string {
	return "ydktest"
}

func (routeSelectionOptions *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions) GetYangName() string {
	return "routeSelectionOptions"
}

func (routeSelectionOptions *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (routeSelectionOptions *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (routeSelectionOptions *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions) SetParent(parent types.Entity) {
	routeSelectionOptions.parent = parent
}

func (routeSelectionOptions *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions) GetParent() types.Entity {
	return routeSelectionOptions.parent
}

func (routeSelectionOptions *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_Config struct {
	parent types.Entity
	Filter types.YFilter

	AdvertiseInactiveRoutes interface{} // boolean
	AlwaysCompareMed        interface{} // boolean
	EnableAigp              interface{} // boolean
	ExternalCompareRouterId interface{} // boolean
	IgnoreAsPathLength      interface{} // boolean
	IgnoreNextHopIgpMetric  interface{} // boolean
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_Config) HasDataOrFilter() bool {
	return config.AdvertiseInactiveRoutes != nil ||
		config.AlwaysCompareMed != nil ||
		config.EnableAigp != nil ||
		config.ExternalCompareRouterId != nil ||
		config.IgnoreAsPathLength != nil ||
		config.IgnoreNextHopIgpMetric != nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.AdvertiseInactiveRoutes != nil {
		switch config.AdvertiseInactiveRoutes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.AdvertiseInactiveRoutes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.AdvertiseInactiveRoutes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "advertise-inactive-routes", Data: leafData})
		}
	}

	if config.AlwaysCompareMed != nil {
		switch config.AlwaysCompareMed.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.AlwaysCompareMed.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.AlwaysCompareMed)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "always-compare-med", Data: leafData})
		}
	}

	if config.EnableAigp != nil {
		switch config.EnableAigp.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.EnableAigp.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.EnableAigp)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enable-aigp", Data: leafData})
		}
	}

	if config.ExternalCompareRouterId != nil {
		switch config.ExternalCompareRouterId.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ExternalCompareRouterId.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ExternalCompareRouterId)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "external-compare-router-id", Data: leafData})
		}
	}

	if config.IgnoreAsPathLength != nil {
		switch config.IgnoreAsPathLength.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.IgnoreAsPathLength.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.IgnoreAsPathLength)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "ignore-as-path-length", Data: leafData})
		}
	}

	if config.IgnoreNextHopIgpMetric != nil {
		switch config.IgnoreNextHopIgpMetric.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.IgnoreNextHopIgpMetric.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.IgnoreNextHopIgpMetric)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "ignore-next-hop-igp-metric", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_Config) SetValue(value_path string, value string) {
	if value_path == "advertise-inactive-routes" {
		config.AdvertiseInactiveRoutes = value
	}
	if value_path == "always-compare-med" {
		config.AlwaysCompareMed = value
	}
	if value_path == "enable-aigp" {
		config.EnableAigp = value
	}
	if value_path == "external-compare-router-id" {
		config.ExternalCompareRouterId = value
	}
	if value_path == "ignore-as-path-length" {
		config.IgnoreAsPathLength = value
	}
	if value_path == "ignore-next-hop-igp-metric" {
		config.IgnoreNextHopIgpMetric = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_Config) GetParentYangName() string {
	return "route-selection-options"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_State struct {
	parent types.Entity
	Filter types.YFilter

	AdvertiseInactiveRoutes interface{} // boolean
	AlwaysCompareMed        interface{} // boolean
	EnableAigp              interface{} // boolean
	ExternalCompareRouterId interface{} // boolean
	IgnoreAsPathLength      interface{} // boolean
	IgnoreNextHopIgpMetric  interface{} // boolean
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_State) HasDataOrFilter() bool {
	return state.AdvertiseInactiveRoutes != nil ||
		state.AlwaysCompareMed != nil ||
		state.EnableAigp != nil ||
		state.ExternalCompareRouterId != nil ||
		state.IgnoreAsPathLength != nil ||
		state.IgnoreNextHopIgpMetric != nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.AdvertiseInactiveRoutes != nil {
		switch state.AdvertiseInactiveRoutes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.AdvertiseInactiveRoutes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.AdvertiseInactiveRoutes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "advertise-inactive-routes", Data: leafData})
		}
	}

	if state.AlwaysCompareMed != nil {
		switch state.AlwaysCompareMed.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.AlwaysCompareMed.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.AlwaysCompareMed)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "always-compare-med", Data: leafData})
		}
	}

	if state.EnableAigp != nil {
		switch state.EnableAigp.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.EnableAigp.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.EnableAigp)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enable-aigp", Data: leafData})
		}
	}

	if state.ExternalCompareRouterId != nil {
		switch state.ExternalCompareRouterId.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ExternalCompareRouterId.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ExternalCompareRouterId)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "external-compare-router-id", Data: leafData})
		}
	}

	if state.IgnoreAsPathLength != nil {
		switch state.IgnoreAsPathLength.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.IgnoreAsPathLength.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.IgnoreAsPathLength)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "ignore-as-path-length", Data: leafData})
		}
	}

	if state.IgnoreNextHopIgpMetric != nil {
		switch state.IgnoreNextHopIgpMetric.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.IgnoreNextHopIgpMetric.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.IgnoreNextHopIgpMetric)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "ignore-next-hop-igp-metric", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_State) SetValue(value_path string, value string) {
	if value_path == "advertise-inactive-routes" {
		state.AdvertiseInactiveRoutes = value
	}
	if value_path == "always-compare-med" {
		state.AlwaysCompareMed = value
	}
	if value_path == "enable-aigp" {
		state.EnableAigp = value
	}
	if value_path == "external-compare-router-id" {
		state.ExternalCompareRouterId = value
	}
	if value_path == "ignore-as-path-length" {
		state.IgnoreAsPathLength = value
	}
	if value_path == "ignore-next-hop-igp-metric" {
		state.IgnoreNextHopIgpMetric = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_RouteSelectionOptions_State) GetParentYangName() string {
	return "route-selection-options"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config
	Ebgp   Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp
	Ibgp   Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp
	State  Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State
}

func (useMultiplePaths *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths) HasDataOrFilter() bool {
	return useMultiplePaths.Config.HasDataOrFilter() ||
		useMultiplePaths.Ebgp.HasDataOrFilter() ||
		useMultiplePaths.Ibgp.HasDataOrFilter() ||
		useMultiplePaths.State.HasDataOrFilter()
}

func (useMultiplePaths *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths) GetFilter() types.YFilter {
	return useMultiplePaths.Filter
}

func (useMultiplePaths *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths) GetSegmentPath() string {
	return "use-multiple-paths"
}

func (useMultiplePaths *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: useMultiplePaths.GetSegmentPath()}
	return entityPath
}

func (useMultiplePaths *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &useMultiplePaths.Config
	}
	if child_yang_name == "ebgp" {
		return &useMultiplePaths.Ebgp
	}
	if child_yang_name == "ibgp" {
		return &useMultiplePaths.Ibgp
	}
	if child_yang_name == "state" {
		return &useMultiplePaths.State
	}
	return nil
}

func (useMultiplePaths *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &useMultiplePaths.Config
	children["ebgp"] = &useMultiplePaths.Ebgp
	children["ibgp"] = &useMultiplePaths.Ibgp
	children["state"] = &useMultiplePaths.State

	return children
}

func (useMultiplePaths *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths) SetValue(value_path string, value string) {
}

func (useMultiplePaths *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths) GetBundleName() string {
	return "ydktest"
}

func (useMultiplePaths *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths) GetYangName() string {
	return "useMultiplePaths"
}

func (useMultiplePaths *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (useMultiplePaths *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (useMultiplePaths *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths) SetParent(parent types.Entity) {
	useMultiplePaths.parent = parent
}

func (useMultiplePaths *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths) GetParent() types.Entity {
	return useMultiplePaths.parent
}

func (useMultiplePaths *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config struct {
	parent types.Entity
	Filter types.YFilter

	Enabled interface{} // boolean
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config) HasDataOrFilter() bool {
	return config.Enabled != nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.Enabled != nil {
		switch config.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config) SetValue(value_path string, value string) {
	if value_path == "enabled" {
		config.Enabled = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Config) GetParentYangName() string {
	return "use-multiple-paths"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State struct {
	parent types.Entity
	Filter types.YFilter

	Enabled interface{} // boolean
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State) HasDataOrFilter() bool {
	return state.Enabled != nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.Enabled != nil {
		switch state.Enabled.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.Enabled.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.Enabled)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "enabled", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State) SetValue(value_path string, value string) {
	if value_path == "enabled" {
		state.Enabled = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_State) GetParentYangName() string {
	return "use-multiple-paths"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config
	State  Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State
}

func (ebgp *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) HasDataOrFilter() bool {
	return ebgp.Config.HasDataOrFilter() ||
		ebgp.State.HasDataOrFilter()
}

func (ebgp *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetFilter() types.YFilter {
	return ebgp.Filter
}

func (ebgp *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetSegmentPath() string {
	return "ebgp"
}

func (ebgp *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: ebgp.GetSegmentPath()}
	return entityPath
}

func (ebgp *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &ebgp.Config
	}
	if child_yang_name == "state" {
		return &ebgp.State
	}
	return nil
}

func (ebgp *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &ebgp.Config
	children["state"] = &ebgp.State

	return children
}

func (ebgp *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) SetValue(value_path string, value string) {
}

func (ebgp *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetBundleName() string {
	return "ydktest"
}

func (ebgp *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetYangName() string {
	return "ebgp"
}

func (ebgp *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (ebgp *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (ebgp *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) SetParent(parent types.Entity) {
	ebgp.parent = parent
}

func (ebgp *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetParent() types.Entity {
	return ebgp.parent
}

func (ebgp *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp) GetParentYangName() string {
	return "use-multiple-paths"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config struct {
	parent types.Entity
	Filter types.YFilter

	AllowMultipleAs interface{} // boolean
	MaximumPaths    interface{} // uint32
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) HasDataOrFilter() bool {
	return config.AllowMultipleAs != nil ||
		config.MaximumPaths != nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.AllowMultipleAs != nil {
		switch config.AllowMultipleAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.AllowMultipleAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.AllowMultipleAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "allow-multiple-as", Data: leafData})
		}
	}

	if config.MaximumPaths != nil {
		switch config.MaximumPaths.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaximumPaths.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaximumPaths)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "maximum-paths", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) SetValue(value_path string, value string) {
	if value_path == "allow-multiple-as" {
		config.AllowMultipleAs = value
	}
	if value_path == "maximum-paths" {
		config.MaximumPaths = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_Config) GetParentYangName() string {
	return "ebgp"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State struct {
	parent types.Entity
	Filter types.YFilter

	AllowMultipleAs interface{} // boolean
	MaximumPaths    interface{} // uint32
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) HasDataOrFilter() bool {
	return state.AllowMultipleAs != nil ||
		state.MaximumPaths != nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.AllowMultipleAs != nil {
		switch state.AllowMultipleAs.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.AllowMultipleAs.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.AllowMultipleAs)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "allow-multiple-as", Data: leafData})
		}
	}

	if state.MaximumPaths != nil {
		switch state.MaximumPaths.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaximumPaths.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaximumPaths)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "maximum-paths", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) SetValue(value_path string, value string) {
	if value_path == "allow-multiple-as" {
		state.AllowMultipleAs = value
	}
	if value_path == "maximum-paths" {
		state.MaximumPaths = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ebgp_State) GetParentYangName() string {
	return "ebgp"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config
	State  Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State
}

func (ibgp *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) HasDataOrFilter() bool {
	return ibgp.Config.HasDataOrFilter() ||
		ibgp.State.HasDataOrFilter()
}

func (ibgp *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) GetFilter() types.YFilter {
	return ibgp.Filter
}

func (ibgp *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) GetSegmentPath() string {
	return "ibgp"
}

func (ibgp *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: ibgp.GetSegmentPath()}
	return entityPath
}

func (ibgp *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &ibgp.Config
	}
	if child_yang_name == "state" {
		return &ibgp.State
	}
	return nil
}

func (ibgp *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &ibgp.Config
	children["state"] = &ibgp.State

	return children
}

func (ibgp *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) SetValue(value_path string, value string) {
}

func (ibgp *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) GetBundleName() string {
	return "ydktest"
}

func (ibgp *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) GetYangName() string {
	return "ibgp"
}

func (ibgp *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (ibgp *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (ibgp *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) SetParent(parent types.Entity) {
	ibgp.parent = parent
}

func (ibgp *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) GetParent() types.Entity {
	return ibgp.parent
}

func (ibgp *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp) GetParentYangName() string {
	return "use-multiple-paths"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaximumPaths interface{} // uint32
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) HasDataOrFilter() bool {
	return config.MaximumPaths != nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaximumPaths != nil {
		switch config.MaximumPaths.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaximumPaths.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaximumPaths)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "maximum-paths", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) SetValue(value_path string, value string) {
	if value_path == "maximum-paths" {
		config.MaximumPaths = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_Config) GetParentYangName() string {
	return "ibgp"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State struct {
	parent types.Entity
	Filter types.YFilter

	MaximumPaths interface{} // uint32
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) HasDataOrFilter() bool {
	return state.MaximumPaths != nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaximumPaths != nil {
		switch state.MaximumPaths.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaximumPaths.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaximumPaths)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "maximum-paths", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) SetValue(value_path string, value string) {
	if value_path == "maximum-paths" {
		state.MaximumPaths = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_UseMultiplePaths_Ibgp_State) GetParentYangName() string {
	return "ibgp"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config
	State  Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State
}

func (applyPolicy *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy) HasDataOrFilter() bool {
	return applyPolicy.Config.HasDataOrFilter() ||
		applyPolicy.State.HasDataOrFilter()
}

func (applyPolicy *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy) GetFilter() types.YFilter {
	return applyPolicy.Filter
}

func (applyPolicy *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy) GetSegmentPath() string {
	return "apply-policy"
}

func (applyPolicy *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: applyPolicy.GetSegmentPath()}
	return entityPath
}

func (applyPolicy *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &applyPolicy.Config
	}
	if child_yang_name == "state" {
		return &applyPolicy.State
	}
	return nil
}

func (applyPolicy *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &applyPolicy.Config
	children["state"] = &applyPolicy.State

	return children
}

func (applyPolicy *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy) SetValue(value_path string, value string) {
}

func (applyPolicy *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy) GetBundleName() string {
	return "ydktest"
}

func (applyPolicy *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy) GetYangName() string {
	return "applyPolicy"
}

func (applyPolicy *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (applyPolicy *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (applyPolicy *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy) SetParent(parent types.Entity) {
	applyPolicy.parent = parent
}

func (applyPolicy *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy) GetParent() types.Entity {
	return applyPolicy.parent
}

func (applyPolicy *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config struct {
	parent types.Entity
	Filter types.YFilter

	DefaultExportPolicy interface{} // enumeration
	DefaultImportPolicy interface{} // enumeration
	ExportPolicy        []interface{}
	ImportPolicy        []interface{}
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config) HasDataOrFilter() bool {
	for _, leaf := range config.ExportPolicy {
		if leaf != nil {
			return true
		}
	}
	for _, leaf := range config.ImportPolicy {
		if leaf != nil {
			return true
		}
	}
	return config.DefaultExportPolicy != nil ||
		config.DefaultImportPolicy != nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.DefaultExportPolicy != nil {
		switch config.DefaultExportPolicy.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.DefaultExportPolicy.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.DefaultExportPolicy)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "default-export-policy", Data: leafData})
		}
	}

	if config.DefaultImportPolicy != nil {
		switch config.DefaultImportPolicy.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.DefaultImportPolicy.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.DefaultImportPolicy)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "default-import-policy", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config) SetValue(value_path string, value string) {
	if value_path == "default-export-policy" {
		config.DefaultExportPolicy = value
	}
	if value_path == "default-import-policy" {
		config.DefaultImportPolicy = value
	}
	if value_path == "export-policy" {
		config.ExportPolicy = append(config.ExportPolicy, value)
	}
	if value_path == "import-policy" {
		config.ImportPolicy = append(config.ImportPolicy, value)
	}
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_Config) GetParentYangName() string {
	return "apply-policy"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State struct {
	parent types.Entity
	Filter types.YFilter

	DefaultExportPolicy interface{} // enumeration
	DefaultImportPolicy interface{} // enumeration
	ExportPolicy        []interface{}
	ImportPolicy        []interface{}
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State) HasDataOrFilter() bool {
	for _, leaf := range state.ExportPolicy {
		if leaf != nil {
			return true
		}
	}
	for _, leaf := range state.ImportPolicy {
		if leaf != nil {
			return true
		}
	}
	return state.DefaultExportPolicy != nil ||
		state.DefaultImportPolicy != nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.DefaultExportPolicy != nil {
		switch state.DefaultExportPolicy.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.DefaultExportPolicy.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.DefaultExportPolicy)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "default-export-policy", Data: leafData})
		}
	}

	if state.DefaultImportPolicy != nil {
		switch state.DefaultImportPolicy.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.DefaultImportPolicy.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.DefaultImportPolicy)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "default-import-policy", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State) SetValue(value_path string, value string) {
	if value_path == "default-export-policy" {
		state.DefaultExportPolicy = value
	}
	if value_path == "default-import-policy" {
		state.DefaultImportPolicy = value
	}
	if value_path == "export-policy" {
		state.ExportPolicy = append(state.ExportPolicy, value)
	}
	if value_path == "import-policy" {
		state.ImportPolicy = append(state.ImportPolicy, value)
	}
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_ApplyPolicy_State) GetParentYangName() string {
	return "apply-policy"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast struct {
	parent types.Entity
	Filter types.YFilter

	Config      Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config
	PrefixLimit Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit
	State       Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State
}

func (ipv4Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast) HasDataOrFilter() bool {
	return ipv4Unicast.Config.HasDataOrFilter() ||
		ipv4Unicast.PrefixLimit.HasDataOrFilter() ||
		ipv4Unicast.State.HasDataOrFilter()
}

func (ipv4Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast) GetFilter() types.YFilter {
	return ipv4Unicast.Filter
}

func (ipv4Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast) GetSegmentPath() string {
	return "ipv4-unicast"
}

func (ipv4Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: ipv4Unicast.GetSegmentPath()}
	return entityPath
}

func (ipv4Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &ipv4Unicast.Config
	}
	if child_yang_name == "prefix-limit" {
		return &ipv4Unicast.PrefixLimit
	}
	if child_yang_name == "state" {
		return &ipv4Unicast.State
	}
	return nil
}

func (ipv4Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &ipv4Unicast.Config
	children["prefix-limit"] = &ipv4Unicast.PrefixLimit
	children["state"] = &ipv4Unicast.State

	return children
}

func (ipv4Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast) SetValue(value_path string, value string) {
}

func (ipv4Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast) GetBundleName() string {
	return "ydktest"
}

func (ipv4Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast) GetYangName() string {
	return "ipv4Unicast"
}

func (ipv4Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (ipv4Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (ipv4Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast) SetParent(parent types.Entity) {
	ipv4Unicast.parent = parent
}

func (ipv4Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast) GetParent() types.Entity {
	return ipv4Unicast.parent
}

func (ipv4Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config
	State  Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) HasDataOrFilter() bool {
	return prefixLimit.Config.HasDataOrFilter() ||
		prefixLimit.State.HasDataOrFilter()
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetFilter() types.YFilter {
	return prefixLimit.Filter
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetSegmentPath() string {
	return "prefix-limit"
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixLimit.GetSegmentPath()}
	return entityPath
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &prefixLimit.Config
	}
	if child_yang_name == "state" {
		return &prefixLimit.State
	}
	return nil
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &prefixLimit.Config
	children["state"] = &prefixLimit.State

	return children
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) SetValue(value_path string, value string) {
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetBundleName() string {
	return "ydktest"
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetYangName() string {
	return "prefixLimit"
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) SetParent(parent types.Entity) {
	prefixLimit.parent = parent
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetParent() types.Entity {
	return prefixLimit.parent
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit) GetParentYangName() string {
	return "ipv4-unicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) HasDataOrFilter() bool {
	return config.MaxPrefixes != nil ||
		config.RestartTimer != nil ||
		config.ShutdownThresholdPct != nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaxPrefixes != nil {
		switch config.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if config.RestartTimer != nil {
		switch config.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if config.ShutdownThresholdPct != nil {
		switch config.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		config.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		config.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		config.ShutdownThresholdPct = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_Config) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) HasDataOrFilter() bool {
	return state.MaxPrefixes != nil ||
		state.RestartTimer != nil ||
		state.ShutdownThresholdPct != nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaxPrefixes != nil {
		switch state.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if state.RestartTimer != nil {
		switch state.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if state.ShutdownThresholdPct != nil {
		switch state.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		state.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		state.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		state.ShutdownThresholdPct = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_PrefixLimit_State) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config struct {
	parent types.Entity
	Filter types.YFilter

	SendDefaultRoute interface{} // boolean
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config) HasDataOrFilter() bool {
	return config.SendDefaultRoute != nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.SendDefaultRoute != nil {
		switch config.SendDefaultRoute.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.SendDefaultRoute.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.SendDefaultRoute)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "send-default-route", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config) SetValue(value_path string, value string) {
	if value_path == "send-default-route" {
		config.SendDefaultRoute = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_Config) GetParentYangName() string {
	return "ipv4-unicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State struct {
	parent types.Entity
	Filter types.YFilter

	SendDefaultRoute interface{} // boolean
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State) HasDataOrFilter() bool {
	return state.SendDefaultRoute != nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.SendDefaultRoute != nil {
		switch state.SendDefaultRoute.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.SendDefaultRoute.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.SendDefaultRoute)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "send-default-route", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State) SetValue(value_path string, value string) {
	if value_path == "send-default-route" {
		state.SendDefaultRoute = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4Unicast_State) GetParentYangName() string {
	return "ipv4-unicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast struct {
	parent types.Entity
	Filter types.YFilter

	Config      Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config
	PrefixLimit Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit
	State       Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State
}

func (ipv6Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast) HasDataOrFilter() bool {
	return ipv6Unicast.Config.HasDataOrFilter() ||
		ipv6Unicast.PrefixLimit.HasDataOrFilter() ||
		ipv6Unicast.State.HasDataOrFilter()
}

func (ipv6Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast) GetFilter() types.YFilter {
	return ipv6Unicast.Filter
}

func (ipv6Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast) GetSegmentPath() string {
	return "ipv6-unicast"
}

func (ipv6Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: ipv6Unicast.GetSegmentPath()}
	return entityPath
}

func (ipv6Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &ipv6Unicast.Config
	}
	if child_yang_name == "prefix-limit" {
		return &ipv6Unicast.PrefixLimit
	}
	if child_yang_name == "state" {
		return &ipv6Unicast.State
	}
	return nil
}

func (ipv6Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &ipv6Unicast.Config
	children["prefix-limit"] = &ipv6Unicast.PrefixLimit
	children["state"] = &ipv6Unicast.State

	return children
}

func (ipv6Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast) SetValue(value_path string, value string) {
}

func (ipv6Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast) GetBundleName() string {
	return "ydktest"
}

func (ipv6Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast) GetYangName() string {
	return "ipv6Unicast"
}

func (ipv6Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (ipv6Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (ipv6Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast) SetParent(parent types.Entity) {
	ipv6Unicast.parent = parent
}

func (ipv6Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast) GetParent() types.Entity {
	return ipv6Unicast.parent
}

func (ipv6Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config
	State  Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) HasDataOrFilter() bool {
	return prefixLimit.Config.HasDataOrFilter() ||
		prefixLimit.State.HasDataOrFilter()
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetFilter() types.YFilter {
	return prefixLimit.Filter
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetSegmentPath() string {
	return "prefix-limit"
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixLimit.GetSegmentPath()}
	return entityPath
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &prefixLimit.Config
	}
	if child_yang_name == "state" {
		return &prefixLimit.State
	}
	return nil
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &prefixLimit.Config
	children["state"] = &prefixLimit.State

	return children
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) SetValue(value_path string, value string) {
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetBundleName() string {
	return "ydktest"
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetYangName() string {
	return "prefixLimit"
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) SetParent(parent types.Entity) {
	prefixLimit.parent = parent
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetParent() types.Entity {
	return prefixLimit.parent
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit) GetParentYangName() string {
	return "ipv6-unicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) HasDataOrFilter() bool {
	return config.MaxPrefixes != nil ||
		config.RestartTimer != nil ||
		config.ShutdownThresholdPct != nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaxPrefixes != nil {
		switch config.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if config.RestartTimer != nil {
		switch config.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if config.ShutdownThresholdPct != nil {
		switch config.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		config.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		config.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		config.ShutdownThresholdPct = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_Config) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) HasDataOrFilter() bool {
	return state.MaxPrefixes != nil ||
		state.RestartTimer != nil ||
		state.ShutdownThresholdPct != nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaxPrefixes != nil {
		switch state.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if state.RestartTimer != nil {
		switch state.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if state.ShutdownThresholdPct != nil {
		switch state.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		state.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		state.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		state.ShutdownThresholdPct = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_PrefixLimit_State) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config struct {
	parent types.Entity
	Filter types.YFilter

	SendDefaultRoute interface{} // boolean
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config) HasDataOrFilter() bool {
	return config.SendDefaultRoute != nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.SendDefaultRoute != nil {
		switch config.SendDefaultRoute.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.SendDefaultRoute.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.SendDefaultRoute)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "send-default-route", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config) SetValue(value_path string, value string) {
	if value_path == "send-default-route" {
		config.SendDefaultRoute = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_Config) GetParentYangName() string {
	return "ipv6-unicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State struct {
	parent types.Entity
	Filter types.YFilter

	SendDefaultRoute interface{} // boolean
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State) HasDataOrFilter() bool {
	return state.SendDefaultRoute != nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.SendDefaultRoute != nil {
		switch state.SendDefaultRoute.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.SendDefaultRoute.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.SendDefaultRoute)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "send-default-route", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State) SetValue(value_path string, value string) {
	if value_path == "send-default-route" {
		state.SendDefaultRoute = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6Unicast_State) GetParentYangName() string {
	return "ipv6-unicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast struct {
	parent types.Entity
	Filter types.YFilter

	PrefixLimit Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
}

func (ipv4LabeledUnicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast) HasDataOrFilter() bool {
	return ipv4LabeledUnicast.PrefixLimit.HasDataOrFilter()
}

func (ipv4LabeledUnicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetFilter() types.YFilter {
	return ipv4LabeledUnicast.Filter
}

func (ipv4LabeledUnicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetSegmentPath() string {
	return "ipv4-labeled-unicast"
}

func (ipv4LabeledUnicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: ipv4LabeledUnicast.GetSegmentPath()}
	return entityPath
}

func (ipv4LabeledUnicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "prefix-limit" {
		return &ipv4LabeledUnicast.PrefixLimit
	}
	return nil
}

func (ipv4LabeledUnicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["prefix-limit"] = &ipv4LabeledUnicast.PrefixLimit

	return children
}

func (ipv4LabeledUnicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast) SetValue(value_path string, value string) {
}

func (ipv4LabeledUnicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetBundleName() string {
	return "ydktest"
}

func (ipv4LabeledUnicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetYangName() string {
	return "ipv4LabeledUnicast"
}

func (ipv4LabeledUnicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (ipv4LabeledUnicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (ipv4LabeledUnicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast) SetParent(parent types.Entity) {
	ipv4LabeledUnicast.parent = parent
}

func (ipv4LabeledUnicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetParent() types.Entity {
	return ipv4LabeledUnicast.parent
}

func (ipv4LabeledUnicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config
	State  Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) HasDataOrFilter() bool {
	return prefixLimit.Config.HasDataOrFilter() ||
		prefixLimit.State.HasDataOrFilter()
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetFilter() types.YFilter {
	return prefixLimit.Filter
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetSegmentPath() string {
	return "prefix-limit"
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixLimit.GetSegmentPath()}
	return entityPath
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &prefixLimit.Config
	}
	if child_yang_name == "state" {
		return &prefixLimit.State
	}
	return nil
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &prefixLimit.Config
	children["state"] = &prefixLimit.State

	return children
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) SetValue(value_path string, value string) {
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetBundleName() string {
	return "ydktest"
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetYangName() string {
	return "prefixLimit"
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) SetParent(parent types.Entity) {
	prefixLimit.parent = parent
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetParent() types.Entity {
	return prefixLimit.parent
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetParentYangName() string {
	return "ipv4-labeled-unicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) HasDataOrFilter() bool {
	return config.MaxPrefixes != nil ||
		config.RestartTimer != nil ||
		config.ShutdownThresholdPct != nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaxPrefixes != nil {
		switch config.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if config.RestartTimer != nil {
		switch config.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if config.ShutdownThresholdPct != nil {
		switch config.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		config.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		config.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		config.ShutdownThresholdPct = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_Config) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) HasDataOrFilter() bool {
	return state.MaxPrefixes != nil ||
		state.RestartTimer != nil ||
		state.ShutdownThresholdPct != nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaxPrefixes != nil {
		switch state.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if state.RestartTimer != nil {
		switch state.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if state.ShutdownThresholdPct != nil {
		switch state.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		state.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		state.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		state.ShutdownThresholdPct = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv4LabeledUnicast_PrefixLimit_State) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast struct {
	parent types.Entity
	Filter types.YFilter

	PrefixLimit Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
}

func (ipv6LabeledUnicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast) HasDataOrFilter() bool {
	return ipv6LabeledUnicast.PrefixLimit.HasDataOrFilter()
}

func (ipv6LabeledUnicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetFilter() types.YFilter {
	return ipv6LabeledUnicast.Filter
}

func (ipv6LabeledUnicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetSegmentPath() string {
	return "ipv6-labeled-unicast"
}

func (ipv6LabeledUnicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: ipv6LabeledUnicast.GetSegmentPath()}
	return entityPath
}

func (ipv6LabeledUnicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "prefix-limit" {
		return &ipv6LabeledUnicast.PrefixLimit
	}
	return nil
}

func (ipv6LabeledUnicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["prefix-limit"] = &ipv6LabeledUnicast.PrefixLimit

	return children
}

func (ipv6LabeledUnicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast) SetValue(value_path string, value string) {
}

func (ipv6LabeledUnicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetBundleName() string {
	return "ydktest"
}

func (ipv6LabeledUnicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetYangName() string {
	return "ipv6LabeledUnicast"
}

func (ipv6LabeledUnicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (ipv6LabeledUnicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (ipv6LabeledUnicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast) SetParent(parent types.Entity) {
	ipv6LabeledUnicast.parent = parent
}

func (ipv6LabeledUnicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetParent() types.Entity {
	return ipv6LabeledUnicast.parent
}

func (ipv6LabeledUnicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config
	State  Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) HasDataOrFilter() bool {
	return prefixLimit.Config.HasDataOrFilter() ||
		prefixLimit.State.HasDataOrFilter()
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetFilter() types.YFilter {
	return prefixLimit.Filter
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetSegmentPath() string {
	return "prefix-limit"
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixLimit.GetSegmentPath()}
	return entityPath
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &prefixLimit.Config
	}
	if child_yang_name == "state" {
		return &prefixLimit.State
	}
	return nil
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &prefixLimit.Config
	children["state"] = &prefixLimit.State

	return children
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) SetValue(value_path string, value string) {
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetBundleName() string {
	return "ydktest"
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetYangName() string {
	return "prefixLimit"
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) SetParent(parent types.Entity) {
	prefixLimit.parent = parent
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetParent() types.Entity {
	return prefixLimit.parent
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetParentYangName() string {
	return "ipv6-labeled-unicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) HasDataOrFilter() bool {
	return config.MaxPrefixes != nil ||
		config.RestartTimer != nil ||
		config.ShutdownThresholdPct != nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaxPrefixes != nil {
		switch config.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if config.RestartTimer != nil {
		switch config.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if config.ShutdownThresholdPct != nil {
		switch config.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		config.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		config.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		config.ShutdownThresholdPct = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_Config) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) HasDataOrFilter() bool {
	return state.MaxPrefixes != nil ||
		state.RestartTimer != nil ||
		state.ShutdownThresholdPct != nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaxPrefixes != nil {
		switch state.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if state.RestartTimer != nil {
		switch state.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if state.ShutdownThresholdPct != nil {
		switch state.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		state.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		state.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		state.ShutdownThresholdPct = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_Ipv6LabeledUnicast_PrefixLimit_State) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast struct {
	parent types.Entity
	Filter types.YFilter

	PrefixLimit Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
}

func (l3VpnIpv4Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast) HasDataOrFilter() bool {
	return l3VpnIpv4Unicast.PrefixLimit.HasDataOrFilter()
}

func (l3VpnIpv4Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetFilter() types.YFilter {
	return l3VpnIpv4Unicast.Filter
}

func (l3VpnIpv4Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetSegmentPath() string {
	return "l3vpn-ipv4-unicast"
}

func (l3VpnIpv4Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: l3VpnIpv4Unicast.GetSegmentPath()}
	return entityPath
}

func (l3VpnIpv4Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "prefix-limit" {
		return &l3VpnIpv4Unicast.PrefixLimit
	}
	return nil
}

func (l3VpnIpv4Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["prefix-limit"] = &l3VpnIpv4Unicast.PrefixLimit

	return children
}

func (l3VpnIpv4Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast) SetValue(value_path string, value string) {
}

func (l3VpnIpv4Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetBundleName() string {
	return "ydktest"
}

func (l3VpnIpv4Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetYangName() string {
	return "l3VpnIpv4Unicast"
}

func (l3VpnIpv4Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (l3VpnIpv4Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (l3VpnIpv4Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast) SetParent(parent types.Entity) {
	l3VpnIpv4Unicast.parent = parent
}

func (l3VpnIpv4Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetParent() types.Entity {
	return l3VpnIpv4Unicast.parent
}

func (l3VpnIpv4Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config
	State  Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) HasDataOrFilter() bool {
	return prefixLimit.Config.HasDataOrFilter() ||
		prefixLimit.State.HasDataOrFilter()
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetFilter() types.YFilter {
	return prefixLimit.Filter
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetSegmentPath() string {
	return "prefix-limit"
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixLimit.GetSegmentPath()}
	return entityPath
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &prefixLimit.Config
	}
	if child_yang_name == "state" {
		return &prefixLimit.State
	}
	return nil
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &prefixLimit.Config
	children["state"] = &prefixLimit.State

	return children
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) SetValue(value_path string, value string) {
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetBundleName() string {
	return "ydktest"
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetYangName() string {
	return "prefixLimit"
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) SetParent(parent types.Entity) {
	prefixLimit.parent = parent
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetParent() types.Entity {
	return prefixLimit.parent
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetParentYangName() string {
	return "l3vpn-ipv4-unicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) HasDataOrFilter() bool {
	return config.MaxPrefixes != nil ||
		config.RestartTimer != nil ||
		config.ShutdownThresholdPct != nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaxPrefixes != nil {
		switch config.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if config.RestartTimer != nil {
		switch config.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if config.ShutdownThresholdPct != nil {
		switch config.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		config.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		config.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		config.ShutdownThresholdPct = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_Config) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) HasDataOrFilter() bool {
	return state.MaxPrefixes != nil ||
		state.RestartTimer != nil ||
		state.ShutdownThresholdPct != nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaxPrefixes != nil {
		switch state.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if state.RestartTimer != nil {
		switch state.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if state.ShutdownThresholdPct != nil {
		switch state.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		state.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		state.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		state.ShutdownThresholdPct = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Unicast_PrefixLimit_State) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast struct {
	parent types.Entity
	Filter types.YFilter

	PrefixLimit Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
}

func (l3VpnIpv6Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast) HasDataOrFilter() bool {
	return l3VpnIpv6Unicast.PrefixLimit.HasDataOrFilter()
}

func (l3VpnIpv6Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetFilter() types.YFilter {
	return l3VpnIpv6Unicast.Filter
}

func (l3VpnIpv6Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetSegmentPath() string {
	return "l3vpn-ipv6-unicast"
}

func (l3VpnIpv6Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: l3VpnIpv6Unicast.GetSegmentPath()}
	return entityPath
}

func (l3VpnIpv6Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "prefix-limit" {
		return &l3VpnIpv6Unicast.PrefixLimit
	}
	return nil
}

func (l3VpnIpv6Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["prefix-limit"] = &l3VpnIpv6Unicast.PrefixLimit

	return children
}

func (l3VpnIpv6Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast) SetValue(value_path string, value string) {
}

func (l3VpnIpv6Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetBundleName() string {
	return "ydktest"
}

func (l3VpnIpv6Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetYangName() string {
	return "l3VpnIpv6Unicast"
}

func (l3VpnIpv6Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (l3VpnIpv6Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (l3VpnIpv6Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast) SetParent(parent types.Entity) {
	l3VpnIpv6Unicast.parent = parent
}

func (l3VpnIpv6Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetParent() types.Entity {
	return l3VpnIpv6Unicast.parent
}

func (l3VpnIpv6Unicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config
	State  Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) HasDataOrFilter() bool {
	return prefixLimit.Config.HasDataOrFilter() ||
		prefixLimit.State.HasDataOrFilter()
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetFilter() types.YFilter {
	return prefixLimit.Filter
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetSegmentPath() string {
	return "prefix-limit"
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixLimit.GetSegmentPath()}
	return entityPath
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &prefixLimit.Config
	}
	if child_yang_name == "state" {
		return &prefixLimit.State
	}
	return nil
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &prefixLimit.Config
	children["state"] = &prefixLimit.State

	return children
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) SetValue(value_path string, value string) {
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetBundleName() string {
	return "ydktest"
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetYangName() string {
	return "prefixLimit"
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) SetParent(parent types.Entity) {
	prefixLimit.parent = parent
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetParent() types.Entity {
	return prefixLimit.parent
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetParentYangName() string {
	return "l3vpn-ipv6-unicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) HasDataOrFilter() bool {
	return config.MaxPrefixes != nil ||
		config.RestartTimer != nil ||
		config.ShutdownThresholdPct != nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetFilter() types.YFilter {
	return config.Filter

}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaxPrefixes != nil {
		switch config.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if config.RestartTimer != nil {
		switch config.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if config.ShutdownThresholdPct != nil {
		switch config.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		config.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		config.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		config.ShutdownThresholdPct = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_Config) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) HasDataOrFilter() bool {
	return state.MaxPrefixes != nil ||
		state.RestartTimer != nil ||
		state.ShutdownThresholdPct != nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaxPrefixes != nil {
		switch state.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if state.RestartTimer != nil {
		switch state.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if state.ShutdownThresholdPct != nil {
		switch state.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		state.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		state.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		state.ShutdownThresholdPct = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Unicast_PrefixLimit_State) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast struct {
	parent types.Entity
	Filter types.YFilter

	PrefixLimit Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit
}

func (l3VpnIpv4Multicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast) HasDataOrFilter() bool {
	return l3VpnIpv4Multicast.PrefixLimit.HasDataOrFilter()
}

func (l3VpnIpv4Multicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetFilter() types.YFilter {
	return l3VpnIpv4Multicast.Filter
}

func (l3VpnIpv4Multicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetSegmentPath() string {
	return "l3vpn-ipv4-multicast"
}

func (l3VpnIpv4Multicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: l3VpnIpv4Multicast.GetSegmentPath()}
	return entityPath
}

func (l3VpnIpv4Multicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "prefix-limit" {
		return &l3VpnIpv4Multicast.PrefixLimit
	}
	return nil
}

func (l3VpnIpv4Multicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["prefix-limit"] = &l3VpnIpv4Multicast.PrefixLimit

	return children
}

func (l3VpnIpv4Multicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast) SetValue(value_path string, value string) {
}

func (l3VpnIpv4Multicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetBundleName() string {
	return "ydktest"
}

func (l3VpnIpv4Multicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetYangName() string {
	return "l3VpnIpv4Multicast"
}

func (l3VpnIpv4Multicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (l3VpnIpv4Multicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (l3VpnIpv4Multicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast) SetParent(parent types.Entity) {
	l3VpnIpv4Multicast.parent = parent
}

func (l3VpnIpv4Multicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetParent() types.Entity {
	return l3VpnIpv4Multicast.parent
}

func (l3VpnIpv4Multicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config
	State  Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) HasDataOrFilter() bool {
	return prefixLimit.Config.HasDataOrFilter() ||
		prefixLimit.State.HasDataOrFilter()
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetFilter() types.YFilter {
	return prefixLimit.Filter
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetSegmentPath() string {
	return "prefix-limit"
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixLimit.GetSegmentPath()}
	return entityPath
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &prefixLimit.Config
	}
	if child_yang_name == "state" {
		return &prefixLimit.State
	}
	return nil
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &prefixLimit.Config
	children["state"] = &prefixLimit.State

	return children
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) SetValue(value_path string, value string) {
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetBundleName() string {
	return "ydktest"
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetYangName() string {
	return "prefixLimit"
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) SetParent(parent types.Entity) {
	prefixLimit.parent = parent
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetParent() types.Entity {
	return prefixLimit.parent
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetParentYangName() string {
	return "l3vpn-ipv4-multicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) HasDataOrFilter() bool {
	return config.MaxPrefixes != nil ||
		config.RestartTimer != nil ||
		config.ShutdownThresholdPct != nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaxPrefixes != nil {
		switch config.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if config.RestartTimer != nil {
		switch config.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if config.ShutdownThresholdPct != nil {
		switch config.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		config.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		config.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		config.ShutdownThresholdPct = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_Config) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) HasDataOrFilter() bool {
	return state.MaxPrefixes != nil ||
		state.RestartTimer != nil ||
		state.ShutdownThresholdPct != nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaxPrefixes != nil {
		switch state.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if state.RestartTimer != nil {
		switch state.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if state.ShutdownThresholdPct != nil {
		switch state.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		state.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		state.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		state.ShutdownThresholdPct = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv4Multicast_PrefixLimit_State) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast struct {
	parent types.Entity
	Filter types.YFilter

	PrefixLimit Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit
}

func (l3VpnIpv6Multicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast) HasDataOrFilter() bool {
	return l3VpnIpv6Multicast.PrefixLimit.HasDataOrFilter()
}

func (l3VpnIpv6Multicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetFilter() types.YFilter {
	return l3VpnIpv6Multicast.Filter
}

func (l3VpnIpv6Multicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetSegmentPath() string {
	return "l3vpn-ipv6-multicast"
}

func (l3VpnIpv6Multicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: l3VpnIpv6Multicast.GetSegmentPath()}
	return entityPath
}

func (l3VpnIpv6Multicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "prefix-limit" {
		return &l3VpnIpv6Multicast.PrefixLimit
	}
	return nil
}

func (l3VpnIpv6Multicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["prefix-limit"] = &l3VpnIpv6Multicast.PrefixLimit

	return children
}

func (l3VpnIpv6Multicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast) SetValue(value_path string, value string) {
}

func (l3VpnIpv6Multicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetBundleName() string {
	return "ydktest"
}

func (l3VpnIpv6Multicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetYangName() string {
	return "l3VpnIpv6Multicast"
}

func (l3VpnIpv6Multicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (l3VpnIpv6Multicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (l3VpnIpv6Multicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast) SetParent(parent types.Entity) {
	l3VpnIpv6Multicast.parent = parent
}

func (l3VpnIpv6Multicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetParent() types.Entity {
	return l3VpnIpv6Multicast.parent
}

func (l3VpnIpv6Multicast *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config
	State  Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) HasDataOrFilter() bool {
	return prefixLimit.Config.HasDataOrFilter() ||
		prefixLimit.State.HasDataOrFilter()
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetFilter() types.YFilter {
	return prefixLimit.Filter
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetSegmentPath() string {
	return "prefix-limit"
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixLimit.GetSegmentPath()}
	return entityPath
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &prefixLimit.Config
	}
	if child_yang_name == "state" {
		return &prefixLimit.State
	}
	return nil
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &prefixLimit.Config
	children["state"] = &prefixLimit.State

	return children
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) SetValue(value_path string, value string) {
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetBundleName() string {
	return "ydktest"
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetYangName() string {
	return "prefixLimit"
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) SetParent(parent types.Entity) {
	prefixLimit.parent = parent
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetParent() types.Entity {
	return prefixLimit.parent
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetParentYangName() string {
	return "l3vpn-ipv6-multicast"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) HasDataOrFilter() bool {
	return config.MaxPrefixes != nil ||
		config.RestartTimer != nil ||
		config.ShutdownThresholdPct != nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaxPrefixes != nil {
		switch config.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if config.RestartTimer != nil {
		switch config.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if config.ShutdownThresholdPct != nil {
		switch config.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		config.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		config.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		config.ShutdownThresholdPct = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_Config) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) HasDataOrFilter() bool {
	return state.MaxPrefixes != nil ||
		state.RestartTimer != nil ||
		state.ShutdownThresholdPct != nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaxPrefixes != nil {
		switch state.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if state.RestartTimer != nil {
		switch state.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if state.ShutdownThresholdPct != nil {
		switch state.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		state.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		state.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		state.ShutdownThresholdPct = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L3VpnIpv6Multicast_PrefixLimit_State) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls struct {
	parent types.Entity
	Filter types.YFilter

	PrefixLimit Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit
}

func (l2VpnVpls *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls) HasDataOrFilter() bool {
	return l2VpnVpls.PrefixLimit.HasDataOrFilter()
}

func (l2VpnVpls *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls) GetFilter() types.YFilter {
	return l2VpnVpls.Filter
}

func (l2VpnVpls *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls) GetSegmentPath() string {
	return "l2vpn-vpls"
}

func (l2VpnVpls *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: l2VpnVpls.GetSegmentPath()}
	return entityPath
}

func (l2VpnVpls *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "prefix-limit" {
		return &l2VpnVpls.PrefixLimit
	}
	return nil
}

func (l2VpnVpls *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["prefix-limit"] = &l2VpnVpls.PrefixLimit

	return children
}

func (l2VpnVpls *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls) SetValue(value_path string, value string) {
}

func (l2VpnVpls *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls) GetBundleName() string {
	return "ydktest"
}

func (l2VpnVpls *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls) GetYangName() string {
	return "l2VpnVpls"
}

func (l2VpnVpls *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (l2VpnVpls *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (l2VpnVpls *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls) SetParent(parent types.Entity) {
	l2VpnVpls.parent = parent
}

func (l2VpnVpls *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls) GetParent() types.Entity {
	return l2VpnVpls.parent
}

func (l2VpnVpls *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config
	State  Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) HasDataOrFilter() bool {
	return prefixLimit.Config.HasDataOrFilter() ||
		prefixLimit.State.HasDataOrFilter()
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetFilter() types.YFilter {
	return prefixLimit.Filter
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetSegmentPath() string {
	return "prefix-limit"
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixLimit.GetSegmentPath()}
	return entityPath
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &prefixLimit.Config
	}
	if child_yang_name == "state" {
		return &prefixLimit.State
	}
	return nil
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &prefixLimit.Config
	children["state"] = &prefixLimit.State

	return children
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) SetValue(value_path string, value string) {
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetBundleName() string {
	return "ydktest"
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetYangName() string {
	return "prefixLimit"
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) SetParent(parent types.Entity) {
	prefixLimit.parent = parent
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetParent() types.Entity {
	return prefixLimit.parent
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit) GetParentYangName() string {
	return "l2vpn-vpls"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) HasDataOrFilter() bool {
	return config.MaxPrefixes != nil ||
		config.RestartTimer != nil ||
		config.ShutdownThresholdPct != nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaxPrefixes != nil {
		switch config.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if config.RestartTimer != nil {
		switch config.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if config.ShutdownThresholdPct != nil {
		switch config.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		config.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		config.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		config.ShutdownThresholdPct = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_Config) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) HasDataOrFilter() bool {
	return state.MaxPrefixes != nil ||
		state.RestartTimer != nil ||
		state.ShutdownThresholdPct != nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaxPrefixes != nil {
		switch state.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if state.RestartTimer != nil {
		switch state.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if state.ShutdownThresholdPct != nil {
		switch state.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		state.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		state.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		state.ShutdownThresholdPct = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnVpls_PrefixLimit_State) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn struct {
	parent types.Entity
	Filter types.YFilter

	PrefixLimit Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit
}

func (l2VpnEvpn *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn) HasDataOrFilter() bool {
	return l2VpnEvpn.PrefixLimit.HasDataOrFilter()
}

func (l2VpnEvpn *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn) GetFilter() types.YFilter {
	return l2VpnEvpn.Filter
}

func (l2VpnEvpn *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn) GetSegmentPath() string {
	return "l2vpn-evpn"
}

func (l2VpnEvpn *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: l2VpnEvpn.GetSegmentPath()}
	return entityPath
}

func (l2VpnEvpn *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "prefix-limit" {
		return &l2VpnEvpn.PrefixLimit
	}
	return nil
}

func (l2VpnEvpn *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["prefix-limit"] = &l2VpnEvpn.PrefixLimit

	return children
}

func (l2VpnEvpn *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn) SetValue(value_path string, value string) {
}

func (l2VpnEvpn *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn) GetBundleName() string {
	return "ydktest"
}

func (l2VpnEvpn *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn) GetYangName() string {
	return "l2VpnEvpn"
}

func (l2VpnEvpn *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (l2VpnEvpn *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (l2VpnEvpn *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn) SetParent(parent types.Entity) {
	l2VpnEvpn.parent = parent
}

func (l2VpnEvpn *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn) GetParent() types.Entity {
	return l2VpnEvpn.parent
}

func (l2VpnEvpn *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn) GetParentYangName() string {
	return "afi-safi"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit struct {
	parent types.Entity
	Filter types.YFilter

	Config Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config
	State  Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) HasDataOrFilter() bool {
	return prefixLimit.Config.HasDataOrFilter() ||
		prefixLimit.State.HasDataOrFilter()
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetFilter() types.YFilter {
	return prefixLimit.Filter
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetSegmentPath() string {
	return "prefix-limit"
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: prefixLimit.GetSegmentPath()}
	return entityPath
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	if child_yang_name == "config" {
		return &prefixLimit.Config
	}
	if child_yang_name == "state" {
		return &prefixLimit.State
	}
	return nil
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)
	children["config"] = &prefixLimit.Config
	children["state"] = &prefixLimit.State

	return children
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) SetValue(value_path string, value string) {
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetBundleName() string {
	return "ydktest"
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetYangName() string {
	return "prefixLimit"
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) SetParent(parent types.Entity) {
	prefixLimit.parent = parent
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetParent() types.Entity {
	return prefixLimit.parent
}

func (prefixLimit *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit) GetParentYangName() string {
	return "l2vpn-evpn"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) HasDataOrFilter() bool {
	return config.MaxPrefixes != nil ||
		config.RestartTimer != nil ||
		config.ShutdownThresholdPct != nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetFilter() types.YFilter {
	return config.Filter
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetSegmentPath() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: config.GetSegmentPath()}
	var leafData types.LeafData

	if config.MaxPrefixes != nil {
		switch config.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if config.RestartTimer != nil {
		switch config.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if config.ShutdownThresholdPct != nil {
		switch config.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: config.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", config.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		config.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		config.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		config.ShutdownThresholdPct = value
	}
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetBundleName() string {
	return "ydktest"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetYangName() string {
	return "config"
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) SetParent(parent types.Entity) {
	config.parent = parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetParent() types.Entity {
	return config.parent
}

func (config *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_Config) GetParentYangName() string {
	return "prefix-limit"
}

//////////////////////////////////////////////////////////////////////////
// Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State
//////////////////////////////////////////////////////////////////////////
type Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State struct {
	parent types.Entity
	Filter types.YFilter

	MaxPrefixes          interface{} // uint32
	RestartTimer         interface{} // str
	ShutdownThresholdPct interface{} // uint8
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) HasDataOrFilter() bool {
	return state.MaxPrefixes != nil ||
		state.RestartTimer != nil ||
		state.ShutdownThresholdPct != nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetFilter() types.YFilter {
	return state.Filter
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetSegmentPath() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetEntityPath(entity types.Entity) types.EntityPath {
	entityPath := types.EntityPath{Path: state.GetSegmentPath()}
	var leafData types.LeafData

	if state.MaxPrefixes != nil {
		switch state.MaxPrefixes.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.MaxPrefixes.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.MaxPrefixes)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "max-prefixes", Data: leafData})
		}
	}

	if state.RestartTimer != nil {
		switch state.RestartTimer.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.RestartTimer.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.RestartTimer)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "restart-timer", Data: leafData})
		}
	}

	if state.ShutdownThresholdPct != nil {
		switch state.ShutdownThresholdPct.(type) {
		case types.YFilter:
			leafData = types.LeafData{IsSet: false, Filter: state.ShutdownThresholdPct.(types.YFilter)}
		default:
			leafData = types.LeafData{IsSet: true, Value: fmt.Sprintf("%v", state.ShutdownThresholdPct)}
			entityPath.ValuePaths = append(entityPath.ValuePaths, types.NameLeafData{Name: "shutdown-threshold-pct", Data: leafData})
		}
	}

	return entityPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetChildByName(child_yang_name string, segment_path string) types.Entity {
	return nil
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetChildren() map[string]types.Entity {
	children := make(map[string]types.Entity)

	return children
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) SetValue(value_path string, value string) {
	if value_path == "max-prefixes" {
		state.MaxPrefixes = value
	}
	if value_path == "restart-timer" {
		state.RestartTimer = value
	}
	if value_path == "shutdown-threshold-pct" {
		state.ShutdownThresholdPct = value
	}
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetBundleName() string {
	return "ydktest"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetYangName() string {
	return "state"
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetBundleYangModelsLocation() string {
	return ydktest.YdkYdktestModelsPath
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetAugmentCapabilitiesFunction() types.AugmentCapabilitiesFunction {
	return ydktest.YdktestAugmentLookupTables
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) SetParent(parent types.Entity) {
	state.parent = parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetParent() types.Entity {
	return state.parent
}

func (state *Bgp_PeerGroups_PeerGroup_AfiSafis_AfiSafi_L2VpnEvpn_PrefixLimit_State) GetParentYangName() string {
	return "prefix-limit"
}
